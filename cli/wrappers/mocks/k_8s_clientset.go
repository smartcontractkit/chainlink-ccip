// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/client-go/kubernetes/typed/core/v1"
	networkingv1 "k8s.io/client-go/kubernetes/typed/networking/v1"
)

// K8sClientset is an autogenerated mock type for the K8sClientset type
type K8sClientset struct {
	mock.Mock
}

type K8sClientset_Expecter struct {
	mock *mock.Mock
}

func (_m *K8sClientset) EXPECT() *K8sClientset_Expecter {
	return &K8sClientset_Expecter{mock: &_m.Mock}
}

// CoreV1 provides a mock function with given fields:
func (_m *K8sClientset) CoreV1() v1.CoreV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CoreV1")
	}

	var r0 v1.CoreV1Interface
	if rf, ok := ret.Get(0).(func() v1.CoreV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.CoreV1Interface)
		}
	}

	return r0
}

// K8sClientset_CoreV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CoreV1'
type K8sClientset_CoreV1_Call struct {
	*mock.Call
}

// CoreV1 is a helper method to define mock.On call
func (_e *K8sClientset_Expecter) CoreV1() *K8sClientset_CoreV1_Call {
	return &K8sClientset_CoreV1_Call{Call: _e.mock.On("CoreV1")}
}

func (_c *K8sClientset_CoreV1_Call) Run(run func()) *K8sClientset_CoreV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8sClientset_CoreV1_Call) Return(_a0 v1.CoreV1Interface) *K8sClientset_CoreV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8sClientset_CoreV1_Call) RunAndReturn(run func() v1.CoreV1Interface) *K8sClientset_CoreV1_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkingV1 provides a mock function with given fields:
func (_m *K8sClientset) NetworkingV1() networkingv1.NetworkingV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NetworkingV1")
	}

	var r0 networkingv1.NetworkingV1Interface
	if rf, ok := ret.Get(0).(func() networkingv1.NetworkingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(networkingv1.NetworkingV1Interface)
		}
	}

	return r0
}

// K8sClientset_NetworkingV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkingV1'
type K8sClientset_NetworkingV1_Call struct {
	*mock.Call
}

// NetworkingV1 is a helper method to define mock.On call
func (_e *K8sClientset_Expecter) NetworkingV1() *K8sClientset_NetworkingV1_Call {
	return &K8sClientset_NetworkingV1_Call{Call: _e.mock.On("NetworkingV1")}
}

func (_c *K8sClientset_NetworkingV1_Call) Run(run func()) *K8sClientset_NetworkingV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8sClientset_NetworkingV1_Call) Return(_a0 networkingv1.NetworkingV1Interface) *K8sClientset_NetworkingV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8sClientset_NetworkingV1_Call) RunAndReturn(run func() networkingv1.NetworkingV1Interface) *K8sClientset_NetworkingV1_Call {
	_c.Call.Return(run)
	return _c
}

// NewK8sClientset creates a new instance of K8sClientset. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewK8sClientset(t interface {
	mock.TestingT
	Cleanup(func())
}) *K8sClientset {
	mock := &K8sClientset{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
