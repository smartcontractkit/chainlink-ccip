// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MkcertCLI is an autogenerated mock type for the MkcertCLI type
type MkcertCLI struct {
	mock.Mock
}

type MkcertCLI_Expecter struct {
	mock *mock.Mock
}

func (_m *MkcertCLI) EXPECT() *MkcertCLI_Expecter {
	return &MkcertCLI_Expecter{mock: &_m.Mock}
}

// CARoot provides a mock function with given fields:
func (_m *MkcertCLI) CARoot() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CARoot")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MkcertCLI_CARoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CARoot'
type MkcertCLI_CARoot_Call struct {
	*mock.Call
}

// CARoot is a helper method to define mock.On call
func (_e *MkcertCLI_Expecter) CARoot() *MkcertCLI_CARoot_Call {
	return &MkcertCLI_CARoot_Call{Call: _e.mock.On("CARoot")}
}

func (_c *MkcertCLI_CARoot_Call) Run(run func()) *MkcertCLI_CARoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MkcertCLI_CARoot_Call) Return(_a0 string, _a1 error) *MkcertCLI_CARoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MkcertCLI_CARoot_Call) RunAndReturn(run func() (string, error)) *MkcertCLI_CARoot_Call {
	_c.Call.Return(run)
	return _c
}

// Certificate provides a mock function with given fields:
func (_m *MkcertCLI) Certificate() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Certificate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MkcertCLI_Certificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Certificate'
type MkcertCLI_Certificate_Call struct {
	*mock.Call
}

// Certificate is a helper method to define mock.On call
func (_e *MkcertCLI_Expecter) Certificate() *MkcertCLI_Certificate_Call {
	return &MkcertCLI_Certificate_Call{Call: _e.mock.On("Certificate")}
}

func (_c *MkcertCLI_Certificate_Call) Run(run func()) *MkcertCLI_Certificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MkcertCLI_Certificate_Call) Return(_a0 string) *MkcertCLI_Certificate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MkcertCLI_Certificate_Call) RunAndReturn(run func() string) *MkcertCLI_Certificate_Call {
	_c.Call.Return(run)
	return _c
}

// Install provides a mock function with given fields:
func (_m *MkcertCLI) Install() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MkcertCLI_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type MkcertCLI_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
func (_e *MkcertCLI_Expecter) Install() *MkcertCLI_Install_Call {
	return &MkcertCLI_Install_Call{Call: _e.mock.On("Install")}
}

func (_c *MkcertCLI_Install_Call) Run(run func()) *MkcertCLI_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MkcertCLI_Install_Call) Return(_a0 error) *MkcertCLI_Install_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MkcertCLI_Install_Call) RunAndReturn(run func() error) *MkcertCLI_Install_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function with given fields:
func (_m *MkcertCLI) Key() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MkcertCLI_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type MkcertCLI_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *MkcertCLI_Expecter) Key() *MkcertCLI_Key_Call {
	return &MkcertCLI_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *MkcertCLI_Key_Call) Run(run func()) *MkcertCLI_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MkcertCLI_Key_Call) Return(_a0 string) *MkcertCLI_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MkcertCLI_Key_Call) RunAndReturn(run func() string) *MkcertCLI_Key_Call {
	_c.Call.Return(run)
	return _c
}

// NewMkcertCLI creates a new instance of MkcertCLI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMkcertCLI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MkcertCLI {
	mock := &MkcertCLI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
