// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	api "k8s.io/client-go/tools/clientcmd/api"
)

// KubeConfigInterface is an autogenerated mock type for the KubeConfigInterface type
type KubeConfigInterface struct {
	mock.Mock
}

type KubeConfigInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *KubeConfigInterface) EXPECT() *KubeConfigInterface_Expecter {
	return &KubeConfigInterface_Expecter{mock: &_m.Mock}
}

// Contexts provides a mock function with given fields:
func (_m *KubeConfigInterface) Contexts() map[string]*api.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Contexts")
	}

	var r0 map[string]*api.Context
	if rf, ok := ret.Get(0).(func() map[string]*api.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*api.Context)
		}
	}

	return r0
}

// KubeConfigInterface_Contexts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Contexts'
type KubeConfigInterface_Contexts_Call struct {
	*mock.Call
}

// Contexts is a helper method to define mock.On call
func (_e *KubeConfigInterface_Expecter) Contexts() *KubeConfigInterface_Contexts_Call {
	return &KubeConfigInterface_Contexts_Call{Call: _e.mock.On("Contexts")}
}

func (_c *KubeConfigInterface_Contexts_Call) Run(run func()) *KubeConfigInterface_Contexts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeConfigInterface_Contexts_Call) Return(_a0 map[string]*api.Context) *KubeConfigInterface_Contexts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeConfigInterface_Contexts_Call) RunAndReturn(run func() map[string]*api.Context) *KubeConfigInterface_Contexts_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentContext provides a mock function with given fields:
func (_m *KubeConfigInterface) CurrentContext() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentContext")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KubeConfigInterface_CurrentContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentContext'
type KubeConfigInterface_CurrentContext_Call struct {
	*mock.Call
}

// CurrentContext is a helper method to define mock.On call
func (_e *KubeConfigInterface_Expecter) CurrentContext() *KubeConfigInterface_CurrentContext_Call {
	return &KubeConfigInterface_CurrentContext_Call{Call: _e.mock.On("CurrentContext")}
}

func (_c *KubeConfigInterface_CurrentContext_Call) Run(run func()) *KubeConfigInterface_CurrentContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeConfigInterface_CurrentContext_Call) Return(_a0 string) *KubeConfigInterface_CurrentContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeConfigInterface_CurrentContext_Call) RunAndReturn(run func() string) *KubeConfigInterface_CurrentContext_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function with given fields:
func (_m *KubeConfigInterface) LoadConfig() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KubeConfigInterface_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type KubeConfigInterface_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *KubeConfigInterface_Expecter) LoadConfig() *KubeConfigInterface_LoadConfig_Call {
	return &KubeConfigInterface_LoadConfig_Call{Call: _e.mock.On("LoadConfig")}
}

func (_c *KubeConfigInterface_LoadConfig_Call) Run(run func()) *KubeConfigInterface_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeConfigInterface_LoadConfig_Call) Return(_a0 error) *KubeConfigInterface_LoadConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeConfigInterface_LoadConfig_Call) RunAndReturn(run func() error) *KubeConfigInterface_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields:
func (_m *KubeConfigInterface) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KubeConfigInterface_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type KubeConfigInterface_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *KubeConfigInterface_Expecter) Path() *KubeConfigInterface_Path_Call {
	return &KubeConfigInterface_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *KubeConfigInterface_Path_Call) Run(run func()) *KubeConfigInterface_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeConfigInterface_Path_Call) Return(_a0 string) *KubeConfigInterface_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeConfigInterface_Path_Call) RunAndReturn(run func() string) *KubeConfigInterface_Path_Call {
	_c.Call.Return(run)
	return _c
}

// SetNamespaceForContext provides a mock function with given fields: context, namespace
func (_m *KubeConfigInterface) SetNamespaceForContext(context string, namespace string) error {
	ret := _m.Called(context, namespace)

	if len(ret) == 0 {
		panic("no return value specified for SetNamespaceForContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(context, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KubeConfigInterface_SetNamespaceForContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNamespaceForContext'
type KubeConfigInterface_SetNamespaceForContext_Call struct {
	*mock.Call
}

// SetNamespaceForContext is a helper method to define mock.On call
//   - context string
//   - namespace string
func (_e *KubeConfigInterface_Expecter) SetNamespaceForContext(context interface{}, namespace interface{}) *KubeConfigInterface_SetNamespaceForContext_Call {
	return &KubeConfigInterface_SetNamespaceForContext_Call{Call: _e.mock.On("SetNamespaceForContext", context, namespace)}
}

func (_c *KubeConfigInterface_SetNamespaceForContext_Call) Run(run func(context string, namespace string)) *KubeConfigInterface_SetNamespaceForContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *KubeConfigInterface_SetNamespaceForContext_Call) Return(_a0 error) *KubeConfigInterface_SetNamespaceForContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeConfigInterface_SetNamespaceForContext_Call) RunAndReturn(run func(string, string) error) *KubeConfigInterface_SetNamespaceForContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewKubeConfigInterface creates a new instance of KubeConfigInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKubeConfigInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *KubeConfigInterface {
	mock := &KubeConfigInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
