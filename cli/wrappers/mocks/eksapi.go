// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	eks "github.com/aws/aws-sdk-go-v2/service/eks"
	mock "github.com/stretchr/testify/mock"
)

// EKSAPI is an autogenerated mock type for the EKSAPI type
type EKSAPI struct {
	mock.Mock
}

type EKSAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *EKSAPI) EXPECT() *EKSAPI_Expecter {
	return &EKSAPI_Expecter{mock: &_m.Mock}
}

// DescribeCluster provides a mock function with given fields: ctx, input
func (_m *EKSAPI) DescribeCluster(ctx context.Context, input *eks.DescribeClusterInput) (*eks.DescribeClusterOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCluster")
	}

	var r0 *eks.DescribeClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeClusterInput) (*eks.DescribeClusterOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeClusterInput) *eks.DescribeClusterOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *eks.DescribeClusterInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EKSAPI_DescribeCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeCluster'
type EKSAPI_DescribeCluster_Call struct {
	*mock.Call
}

// DescribeCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - input *eks.DescribeClusterInput
func (_e *EKSAPI_Expecter) DescribeCluster(ctx interface{}, input interface{}) *EKSAPI_DescribeCluster_Call {
	return &EKSAPI_DescribeCluster_Call{Call: _e.mock.On("DescribeCluster", ctx, input)}
}

func (_c *EKSAPI_DescribeCluster_Call) Run(run func(ctx context.Context, input *eks.DescribeClusterInput)) *EKSAPI_DescribeCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*eks.DescribeClusterInput))
	})
	return _c
}

func (_c *EKSAPI_DescribeCluster_Call) Return(_a0 *eks.DescribeClusterOutput, _a1 error) *EKSAPI_DescribeCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EKSAPI_DescribeCluster_Call) RunAndReturn(run func(context.Context, *eks.DescribeClusterInput) (*eks.DescribeClusterOutput, error)) *EKSAPI_DescribeCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewEKSAPI creates a new instance of EKSAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEKSAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *EKSAPI {
	mock := &EKSAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
