// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	api "k8s.io/client-go/tools/clientcmd/api"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	context "context"

	dynamic "k8s.io/client-go/dynamic"

	mock "github.com/stretchr/testify/mock"

	networkingv1 "k8s.io/api/networking/v1"

	rest "k8s.io/client-go/rest"

	time "time"

	v1 "k8s.io/api/core/v1"

	wrappers "github.com/smartcontractkit/crib/cli/wrappers"
)

// K8sCLI is an autogenerated mock type for the K8sCLI type
type K8sCLI struct {
	mock.Mock
}

type K8sCLI_Expecter struct {
	mock *mock.Mock
}

func (_m *K8sCLI) EXPECT() *K8sCLI_Expecter {
	return &K8sCLI_Expecter{mock: &_m.Mock}
}

// ApplyConfigMap provides a mock function with given fields: ctx, configMap
func (_m *K8sCLI) ApplyConfigMap(ctx context.Context, configMap *v1.ConfigMap) (bool, error) {
	ret := _m.Called(ctx, configMap)

	if len(ret) == 0 {
		panic("no return value specified for ApplyConfigMap")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ConfigMap) (bool, error)); ok {
		return rf(ctx, configMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ConfigMap) bool); ok {
		r0 = rf(ctx, configMap)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ConfigMap) error); ok {
		r1 = rf(ctx, configMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// K8sCLI_ApplyConfigMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyConfigMap'
type K8sCLI_ApplyConfigMap_Call struct {
	*mock.Call
}

// ApplyConfigMap is a helper method to define mock.On call
//   - ctx context.Context
//   - configMap *v1.ConfigMap
func (_e *K8sCLI_Expecter) ApplyConfigMap(ctx interface{}, configMap interface{}) *K8sCLI_ApplyConfigMap_Call {
	return &K8sCLI_ApplyConfigMap_Call{Call: _e.mock.On("ApplyConfigMap", ctx, configMap)}
}

func (_c *K8sCLI_ApplyConfigMap_Call) Run(run func(ctx context.Context, configMap *v1.ConfigMap)) *K8sCLI_ApplyConfigMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.ConfigMap))
	})
	return _c
}

func (_c *K8sCLI_ApplyConfigMap_Call) Return(_a0 bool, _a1 error) *K8sCLI_ApplyConfigMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *K8sCLI_ApplyConfigMap_Call) RunAndReturn(run func(context.Context, *v1.ConfigMap) (bool, error)) *K8sCLI_ApplyConfigMap_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAccess provides a mock function with given fields: ctx
func (_m *K8sCLI) CheckAccess(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// K8sCLI_CheckAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAccess'
type K8sCLI_CheckAccess_Call struct {
	*mock.Call
}

// CheckAccess is a helper method to define mock.On call
//   - ctx context.Context
func (_e *K8sCLI_Expecter) CheckAccess(ctx interface{}) *K8sCLI_CheckAccess_Call {
	return &K8sCLI_CheckAccess_Call{Call: _e.mock.On("CheckAccess", ctx)}
}

func (_c *K8sCLI_CheckAccess_Call) Run(run func(ctx context.Context)) *K8sCLI_CheckAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *K8sCLI_CheckAccess_Call) Return(_a0 error) *K8sCLI_CheckAccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8sCLI_CheckAccess_Call) RunAndReturn(run func(context.Context) error) *K8sCLI_CheckAccess_Call {
	_c.Call.Return(run)
	return _c
}

// ClientConfig provides a mock function with given fields:
func (_m *K8sCLI) ClientConfig() *api.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClientConfig")
	}

	var r0 *api.Config
	if rf, ok := ret.Get(0).(func() *api.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Config)
		}
	}

	return r0
}

// K8sCLI_ClientConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientConfig'
type K8sCLI_ClientConfig_Call struct {
	*mock.Call
}

// ClientConfig is a helper method to define mock.On call
func (_e *K8sCLI_Expecter) ClientConfig() *K8sCLI_ClientConfig_Call {
	return &K8sCLI_ClientConfig_Call{Call: _e.mock.On("ClientConfig")}
}

func (_c *K8sCLI_ClientConfig_Call) Run(run func()) *K8sCLI_ClientConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8sCLI_ClientConfig_Call) Return(_a0 *api.Config) *K8sCLI_ClientConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8sCLI_ClientConfig_Call) RunAndReturn(run func() *api.Config) *K8sCLI_ClientConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Clientset provides a mock function with given fields:
func (_m *K8sCLI) Clientset() wrappers.K8sClientset {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clientset")
	}

	var r0 wrappers.K8sClientset
	if rf, ok := ret.Get(0).(func() wrappers.K8sClientset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrappers.K8sClientset)
		}
	}

	return r0
}

// K8sCLI_Clientset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clientset'
type K8sCLI_Clientset_Call struct {
	*mock.Call
}

// Clientset is a helper method to define mock.On call
func (_e *K8sCLI_Expecter) Clientset() *K8sCLI_Clientset_Call {
	return &K8sCLI_Clientset_Call{Call: _e.mock.On("Clientset")}
}

func (_c *K8sCLI_Clientset_Call) Run(run func()) *K8sCLI_Clientset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8sCLI_Clientset_Call) Return(_a0 wrappers.K8sClientset) *K8sCLI_Clientset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8sCLI_Clientset_Call) RunAndReturn(run func() wrappers.K8sClientset) *K8sCLI_Clientset_Call {
	_c.Call.Return(run)
	return _c
}

// ControllerRuntimeClient provides a mock function with given fields: opts
func (_m *K8sCLI) ControllerRuntimeClient(opts client.Options) (client.Client, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for ControllerRuntimeClient")
	}

	var r0 client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(client.Options) (client.Client, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(client.Options) client.Client); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(client.Options) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// K8sCLI_ControllerRuntimeClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ControllerRuntimeClient'
type K8sCLI_ControllerRuntimeClient_Call struct {
	*mock.Call
}

// ControllerRuntimeClient is a helper method to define mock.On call
//   - opts client.Options
func (_e *K8sCLI_Expecter) ControllerRuntimeClient(opts interface{}) *K8sCLI_ControllerRuntimeClient_Call {
	return &K8sCLI_ControllerRuntimeClient_Call{Call: _e.mock.On("ControllerRuntimeClient", opts)}
}

func (_c *K8sCLI_ControllerRuntimeClient_Call) Run(run func(opts client.Options)) *K8sCLI_ControllerRuntimeClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Options))
	})
	return _c
}

func (_c *K8sCLI_ControllerRuntimeClient_Call) Return(_a0 client.Client, _a1 error) *K8sCLI_ControllerRuntimeClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *K8sCLI_ControllerRuntimeClient_Call) RunAndReturn(run func(client.Options) (client.Client, error)) *K8sCLI_ControllerRuntimeClient_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentContext provides a mock function with given fields:
func (_m *K8sCLI) CurrentContext() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentContext")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// K8sCLI_CurrentContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentContext'
type K8sCLI_CurrentContext_Call struct {
	*mock.Call
}

// CurrentContext is a helper method to define mock.On call
func (_e *K8sCLI_Expecter) CurrentContext() *K8sCLI_CurrentContext_Call {
	return &K8sCLI_CurrentContext_Call{Call: _e.mock.On("CurrentContext")}
}

func (_c *K8sCLI_CurrentContext_Call) Run(run func()) *K8sCLI_CurrentContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8sCLI_CurrentContext_Call) Return(_a0 string) *K8sCLI_CurrentContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8sCLI_CurrentContext_Call) RunAndReturn(run func() string) *K8sCLI_CurrentContext_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureNamespaceExists provides a mock function with given fields: ctx, name
func (_m *K8sCLI) EnsureNamespaceExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for EnsureNamespaceExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// K8sCLI_EnsureNamespaceExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureNamespaceExists'
type K8sCLI_EnsureNamespaceExists_Call struct {
	*mock.Call
}

// EnsureNamespaceExists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *K8sCLI_Expecter) EnsureNamespaceExists(ctx interface{}, name interface{}) *K8sCLI_EnsureNamespaceExists_Call {
	return &K8sCLI_EnsureNamespaceExists_Call{Call: _e.mock.On("EnsureNamespaceExists", ctx, name)}
}

func (_c *K8sCLI_EnsureNamespaceExists_Call) Run(run func(ctx context.Context, name string)) *K8sCLI_EnsureNamespaceExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *K8sCLI_EnsureNamespaceExists_Call) Return(_a0 bool, _a1 error) *K8sCLI_EnsureNamespaceExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *K8sCLI_EnsureNamespaceExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *K8sCLI_EnsureNamespaceExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetIngress provides a mock function with given fields: ctx, namespace, name
func (_m *K8sCLI) GetIngress(ctx context.Context, namespace string, name string) (*networkingv1.Ingress, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetIngress")
	}

	var r0 *networkingv1.Ingress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*networkingv1.Ingress, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *networkingv1.Ingress); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkingv1.Ingress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// K8sCLI_GetIngress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIngress'
type K8sCLI_GetIngress_Call struct {
	*mock.Call
}

// GetIngress is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *K8sCLI_Expecter) GetIngress(ctx interface{}, namespace interface{}, name interface{}) *K8sCLI_GetIngress_Call {
	return &K8sCLI_GetIngress_Call{Call: _e.mock.On("GetIngress", ctx, namespace, name)}
}

func (_c *K8sCLI_GetIngress_Call) Run(run func(ctx context.Context, namespace string, name string)) *K8sCLI_GetIngress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *K8sCLI_GetIngress_Call) Return(_a0 *networkingv1.Ingress, _a1 error) *K8sCLI_GetIngress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *K8sCLI_GetIngress_Call) RunAndReturn(run func(context.Context, string, string) (*networkingv1.Ingress, error)) *K8sCLI_GetIngress_Call {
	_c.Call.Return(run)
	return _c
}

// LabelNamespace provides a mock function with given fields: ctx, namespace, key, value
func (_m *K8sCLI) LabelNamespace(ctx context.Context, namespace string, labels map[string]string) error {
	ret := _m.Called(ctx, namespace, labels)

	if len(ret) == 0 {
		panic("no return value specified for LabelNamespace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) error); ok {
		r0 = rf(ctx, namespace, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// K8sCLI_LabelNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LabelNamespace'
type K8sCLI_LabelNamespace_Call struct {
	*mock.Call
}

// LabelNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - key string
//   - value map[string]string
func (_e *K8sCLI_Expecter) LabelNamespace(ctx interface{}, namespace interface{},  labels map[string]string) *K8sCLI_LabelNamespace_Call {
	return &K8sCLI_LabelNamespace_Call{Call: _e.mock.On("LabelNamespace", ctx, namespace, labels)}
}

func (_c *K8sCLI_LabelNamespace_Call) Run(run func(ctx context.Context, namespace string, labels map[string]string)) *K8sCLI_LabelNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *K8sCLI_LabelNamespace_Call) Return(_a0 error) *K8sCLI_LabelNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8sCLI_LabelNamespace_Call) RunAndReturn(run func(context.Context, string, map[string]string) error) *K8sCLI_LabelNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// ListIngresses provides a mock function with given fields: ctx, namespace
func (_m *K8sCLI) ListIngresses(ctx context.Context, namespace string) (*networkingv1.IngressList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListIngresses")
	}

	var r0 *networkingv1.IngressList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*networkingv1.IngressList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *networkingv1.IngressList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkingv1.IngressList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// K8sCLI_ListIngresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIngresses'
type K8sCLI_ListIngresses_Call struct {
	*mock.Call
}

// ListIngresses is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
func (_e *K8sCLI_Expecter) ListIngresses(ctx interface{}, namespace interface{}) *K8sCLI_ListIngresses_Call {
	return &K8sCLI_ListIngresses_Call{Call: _e.mock.On("ListIngresses", ctx, namespace)}
}

func (_c *K8sCLI_ListIngresses_Call) Run(run func(ctx context.Context, namespace string)) *K8sCLI_ListIngresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *K8sCLI_ListIngresses_Call) Return(_a0 *networkingv1.IngressList, _a1 error) *K8sCLI_ListIngresses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *K8sCLI_ListIngresses_Call) RunAndReturn(run func(context.Context, string) (*networkingv1.IngressList, error)) *K8sCLI_ListIngresses_Call {
	_c.Call.Return(run)
	return _c
}

// RestConfig provides a mock function with given fields:
func (_m *K8sCLI) RestConfig() *rest.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RestConfig")
	}

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}

// K8sCLI_RestConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestConfig'
type K8sCLI_RestConfig_Call struct {
	*mock.Call
}

// RestConfig is a helper method to define mock.On call
func (_e *K8sCLI_Expecter) RestConfig() *K8sCLI_RestConfig_Call {
	return &K8sCLI_RestConfig_Call{Call: _e.mock.On("RestConfig")}
}

func (_c *K8sCLI_RestConfig_Call) Run(run func()) *K8sCLI_RestConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *K8sCLI_RestConfig_Call) Return(_a0 *rest.Config) *K8sCLI_RestConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8sCLI_RestConfig_Call) RunAndReturn(run func() *rest.Config) *K8sCLI_RestConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForResource provides a mock function with given fields: ctx, resourceClient, resourceName, interval, timeout
func (_m *K8sCLI) WaitForResource(ctx context.Context, resourceClient dynamic.ResourceInterface, resourceName string, interval time.Duration, timeout time.Duration) error {
	ret := _m.Called(ctx, resourceClient, resourceName, interval, timeout)

	if len(ret) == 0 {
		panic("no return value specified for WaitForResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamic.ResourceInterface, string, time.Duration, time.Duration) error); ok {
		r0 = rf(ctx, resourceClient, resourceName, interval, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// K8sCLI_WaitForResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForResource'
type K8sCLI_WaitForResource_Call struct {
	*mock.Call
}

// WaitForResource is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceClient dynamic.ResourceInterface
//   - resourceName string
//   - interval time.Duration
//   - timeout time.Duration
func (_e *K8sCLI_Expecter) WaitForResource(ctx interface{}, resourceClient interface{}, resourceName interface{}, interval interface{}, timeout interface{}) *K8sCLI_WaitForResource_Call {
	return &K8sCLI_WaitForResource_Call{Call: _e.mock.On("WaitForResource", ctx, resourceClient, resourceName, interval, timeout)}
}

func (_c *K8sCLI_WaitForResource_Call) Run(run func(ctx context.Context, resourceClient dynamic.ResourceInterface, resourceName string, interval time.Duration, timeout time.Duration)) *K8sCLI_WaitForResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamic.ResourceInterface), args[2].(string), args[3].(time.Duration), args[4].(time.Duration))
	})
	return _c
}

func (_c *K8sCLI_WaitForResource_Call) Return(_a0 error) *K8sCLI_WaitForResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *K8sCLI_WaitForResource_Call) RunAndReturn(run func(context.Context, dynamic.ResourceInterface, string, time.Duration, time.Duration) error) *K8sCLI_WaitForResource_Call {
	_c.Call.Return(run)
	return _c
}

// NewK8sCLI creates a new instance of K8sCLI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewK8sCLI(t interface {
	mock.TestingT
	Cleanup(func())
}) *K8sCLI {
	mock := &K8sCLI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
