// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	sts "github.com/aws/aws-sdk-go-v2/service/sts"
	mock "github.com/stretchr/testify/mock"
)

// STSAPI is an autogenerated mock type for the STSAPI type
type STSAPI struct {
	mock.Mock
}

type STSAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *STSAPI) EXPECT() *STSAPI_Expecter {
	return &STSAPI_Expecter{mock: &_m.Mock}
}

// GetCallerIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *STSAPI) GetCallerIdentity(ctx context.Context, params *sts.GetCallerIdentityInput, optFns ...func(*sts.Options)) (*sts.GetCallerIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCallerIdentity")
	}

	var r0 *sts.GetCallerIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sts.GetCallerIdentityInput, ...func(*sts.Options)) (*sts.GetCallerIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sts.GetCallerIdentityInput, ...func(*sts.Options)) *sts.GetCallerIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sts.GetCallerIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sts.GetCallerIdentityInput, ...func(*sts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// STSAPI_GetCallerIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCallerIdentity'
type STSAPI_GetCallerIdentity_Call struct {
	*mock.Call
}

// GetCallerIdentity is a helper method to define mock.On call
//   - ctx context.Context
//   - params *sts.GetCallerIdentityInput
//   - optFns ...func(*sts.Options)
func (_e *STSAPI_Expecter) GetCallerIdentity(ctx interface{}, params interface{}, optFns ...interface{}) *STSAPI_GetCallerIdentity_Call {
	return &STSAPI_GetCallerIdentity_Call{Call: _e.mock.On("GetCallerIdentity",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *STSAPI_GetCallerIdentity_Call) Run(run func(ctx context.Context, params *sts.GetCallerIdentityInput, optFns ...func(*sts.Options))) *STSAPI_GetCallerIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*sts.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*sts.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*sts.GetCallerIdentityInput), variadicArgs...)
	})
	return _c
}

func (_c *STSAPI_GetCallerIdentity_Call) Return(_a0 *sts.GetCallerIdentityOutput, _a1 error) *STSAPI_GetCallerIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *STSAPI_GetCallerIdentity_Call) RunAndReturn(run func(context.Context, *sts.GetCallerIdentityInput, ...func(*sts.Options)) (*sts.GetCallerIdentityOutput, error)) *STSAPI_GetCallerIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// NewSTSAPI creates a new instance of STSAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSTSAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *STSAPI {
	mock := &STSAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
