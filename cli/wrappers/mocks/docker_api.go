// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	registry "github.com/docker/docker/api/types/registry"
	mock "github.com/stretchr/testify/mock"
)

// DockerAPI is an autogenerated mock type for the DockerAPI type
type DockerAPI struct {
	mock.Mock
}

type DockerAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *DockerAPI) EXPECT() *DockerAPI_Expecter {
	return &DockerAPI_Expecter{mock: &_m.Mock}
}

// RegistryLogin provides a mock function with given fields: ctx, auth
func (_m *DockerAPI) RegistryLogin(ctx context.Context, auth registry.AuthConfig) (registry.AuthenticateOKBody, error) {
	ret := _m.Called(ctx, auth)

	if len(ret) == 0 {
		panic("no return value specified for RegistryLogin")
	}

	var r0 registry.AuthenticateOKBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, registry.AuthConfig) (registry.AuthenticateOKBody, error)); ok {
		return rf(ctx, auth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, registry.AuthConfig) registry.AuthenticateOKBody); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Get(0).(registry.AuthenticateOKBody)
	}

	if rf, ok := ret.Get(1).(func(context.Context, registry.AuthConfig) error); ok {
		r1 = rf(ctx, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerAPI_RegistryLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryLogin'
type DockerAPI_RegistryLogin_Call struct {
	*mock.Call
}

// RegistryLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - auth registry.AuthConfig
func (_e *DockerAPI_Expecter) RegistryLogin(ctx interface{}, auth interface{}) *DockerAPI_RegistryLogin_Call {
	return &DockerAPI_RegistryLogin_Call{Call: _e.mock.On("RegistryLogin", ctx, auth)}
}

func (_c *DockerAPI_RegistryLogin_Call) Run(run func(ctx context.Context, auth registry.AuthConfig)) *DockerAPI_RegistryLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(registry.AuthConfig))
	})
	return _c
}

func (_c *DockerAPI_RegistryLogin_Call) Return(_a0 registry.AuthenticateOKBody, _a1 error) *DockerAPI_RegistryLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerAPI_RegistryLogin_Call) RunAndReturn(run func(context.Context, registry.AuthConfig) (registry.AuthenticateOKBody, error)) *DockerAPI_RegistryLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewDockerAPI creates a new instance of DockerAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDockerAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *DockerAPI {
	mock := &DockerAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
