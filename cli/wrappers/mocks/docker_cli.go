// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	configfile "github.com/docker/cli/cli/config/configfile"
	client "github.com/docker/docker/client"

	container "github.com/docker/docker/api/types/container"

	context "context"

	mock "github.com/stretchr/testify/mock"

	network "github.com/docker/docker/api/types/network"

	registry "github.com/docker/docker/api/types/registry"

	time "time"
)

// DockerCLI is an autogenerated mock type for the DockerCLI type
type DockerCLI struct {
	mock.Mock
}

type DockerCLI_Expecter struct {
	mock *mock.Mock
}

func (_m *DockerCLI) EXPECT() *DockerCLI_Expecter {
	return &DockerCLI_Expecter{mock: &_m.Mock}
}

// Client provides a mock function with given fields:
func (_m *DockerCLI) Client() client.APIClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 client.APIClient
	if rf, ok := ret.Get(0).(func() client.APIClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.APIClient)
		}
	}

	return r0
}

// DockerCLI_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type DockerCLI_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *DockerCLI_Expecter) Client() *DockerCLI_Client_Call {
	return &DockerCLI_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *DockerCLI_Client_Call) Run(run func()) *DockerCLI_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerCLI_Client_Call) Return(_a0 client.APIClient) *DockerCLI_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerCLI_Client_Call) RunAndReturn(run func() client.APIClient) *DockerCLI_Client_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigFile provides a mock function with given fields:
func (_m *DockerCLI) ConfigFile() *configfile.ConfigFile {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfigFile")
	}

	var r0 *configfile.ConfigFile
	if rf, ok := ret.Get(0).(func() *configfile.ConfigFile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configfile.ConfigFile)
		}
	}

	return r0
}

// DockerCLI_ConfigFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigFile'
type DockerCLI_ConfigFile_Call struct {
	*mock.Call
}

// ConfigFile is a helper method to define mock.On call
func (_e *DockerCLI_Expecter) ConfigFile() *DockerCLI_ConfigFile_Call {
	return &DockerCLI_ConfigFile_Call{Call: _e.mock.On("ConfigFile")}
}

func (_c *DockerCLI_ConfigFile_Call) Run(run func()) *DockerCLI_ConfigFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerCLI_ConfigFile_Call) Return(_a0 *configfile.ConfigFile) *DockerCLI_ConfigFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerCLI_ConfigFile_Call) RunAndReturn(run func() *configfile.ConfigFile) *DockerCLI_ConfigFile_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectContainerToNetwork provides a mock function with given fields: ctx, containerID, networkID
func (_m *DockerCLI) ConnectContainerToNetwork(ctx context.Context, containerID string, networkID string) (bool, error) {
	ret := _m.Called(ctx, containerID, networkID)

	if len(ret) == 0 {
		panic("no return value specified for ConnectContainerToNetwork")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, containerID, networkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, containerID, networkID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, containerID, networkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerCLI_ConnectContainerToNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectContainerToNetwork'
type DockerCLI_ConnectContainerToNetwork_Call struct {
	*mock.Call
}

// ConnectContainerToNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - networkID string
func (_e *DockerCLI_Expecter) ConnectContainerToNetwork(ctx interface{}, containerID interface{}, networkID interface{}) *DockerCLI_ConnectContainerToNetwork_Call {
	return &DockerCLI_ConnectContainerToNetwork_Call{Call: _e.mock.On("ConnectContainerToNetwork", ctx, containerID, networkID)}
}

func (_c *DockerCLI_ConnectContainerToNetwork_Call) Run(run func(ctx context.Context, containerID string, networkID string)) *DockerCLI_ConnectContainerToNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DockerCLI_ConnectContainerToNetwork_Call) Return(_a0 bool, _a1 error) *DockerCLI_ConnectContainerToNetwork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerCLI_ConnectContainerToNetwork_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *DockerCLI_ConnectContainerToNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteContainer provides a mock function with given fields: ctx, containerName, removeOptions, timeout
func (_m *DockerCLI) DeleteContainer(ctx context.Context, containerName string, removeOptions container.RemoveOptions, timeout *time.Duration) error {
	ret := _m.Called(ctx, containerName, removeOptions, timeout)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.RemoveOptions, *time.Duration) error); ok {
		r0 = rf(ctx, containerName, removeOptions, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DockerCLI_DeleteContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteContainer'
type DockerCLI_DeleteContainer_Call struct {
	*mock.Call
}

// DeleteContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - containerName string
//   - removeOptions container.RemoveOptions
//   - timeout *time.Duration
func (_e *DockerCLI_Expecter) DeleteContainer(ctx interface{}, containerName interface{}, removeOptions interface{}, timeout interface{}) *DockerCLI_DeleteContainer_Call {
	return &DockerCLI_DeleteContainer_Call{Call: _e.mock.On("DeleteContainer", ctx, containerName, removeOptions, timeout)}
}

func (_c *DockerCLI_DeleteContainer_Call) Run(run func(ctx context.Context, containerName string, removeOptions container.RemoveOptions, timeout *time.Duration)) *DockerCLI_DeleteContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.RemoveOptions), args[3].(*time.Duration))
	})
	return _c
}

func (_c *DockerCLI_DeleteContainer_Call) Return(_a0 error) *DockerCLI_DeleteContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerCLI_DeleteContainer_Call) RunAndReturn(run func(context.Context, string, container.RemoveOptions, *time.Duration) error) *DockerCLI_DeleteContainer_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: username, password, registryURL
func (_m *DockerCLI) Login(username string, password string, registryURL string) (*registry.AuthenticateOKBody, error) {
	ret := _m.Called(username, password, registryURL)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *registry.AuthenticateOKBody
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*registry.AuthenticateOKBody, error)); ok {
		return rf(username, password, registryURL)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *registry.AuthenticateOKBody); ok {
		r0 = rf(username, password, registryURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.AuthenticateOKBody)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(username, password, registryURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerCLI_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type DockerCLI_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - username string
//   - password string
//   - registryURL string
func (_e *DockerCLI_Expecter) Login(username interface{}, password interface{}, registryURL interface{}) *DockerCLI_Login_Call {
	return &DockerCLI_Login_Call{Call: _e.mock.On("Login", username, password, registryURL)}
}

func (_c *DockerCLI_Login_Call) Run(run func(username string, password string, registryURL string)) *DockerCLI_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DockerCLI_Login_Call) Return(_a0 *registry.AuthenticateOKBody, _a1 error) *DockerCLI_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerCLI_Login_Call) RunAndReturn(run func(string, string, string) (*registry.AuthenticateOKBody, error)) *DockerCLI_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RunContainer provides a mock function with given fields: ctx, config, hostConfig, networkingConfig, containerName, forceRecreate, timeout
func (_m *DockerCLI) RunContainer(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, containerName string, forceRecreate bool, timeout *time.Duration) (bool, error) {
	ret := _m.Called(ctx, config, hostConfig, networkingConfig, containerName, forceRecreate, timeout)

	if len(ret) == 0 {
		panic("no return value specified for RunContainer")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, string, bool, *time.Duration) (bool, error)); ok {
		return rf(ctx, config, hostConfig, networkingConfig, containerName, forceRecreate, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, string, bool, *time.Duration) bool); ok {
		r0 = rf(ctx, config, hostConfig, networkingConfig, containerName, forceRecreate, timeout)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, string, bool, *time.Duration) error); ok {
		r1 = rf(ctx, config, hostConfig, networkingConfig, containerName, forceRecreate, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerCLI_RunContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunContainer'
type DockerCLI_RunContainer_Call struct {
	*mock.Call
}

// RunContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - config *container.Config
//   - hostConfig *container.HostConfig
//   - networkingConfig *network.NetworkingConfig
//   - containerName string
//   - forceRecreate bool
//   - timeout *time.Duration
func (_e *DockerCLI_Expecter) RunContainer(ctx interface{}, config interface{}, hostConfig interface{}, networkingConfig interface{}, containerName interface{}, forceRecreate interface{}, timeout interface{}) *DockerCLI_RunContainer_Call {
	return &DockerCLI_RunContainer_Call{Call: _e.mock.On("RunContainer", ctx, config, hostConfig, networkingConfig, containerName, forceRecreate, timeout)}
}

func (_c *DockerCLI_RunContainer_Call) Run(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, containerName string, forceRecreate bool, timeout *time.Duration)) *DockerCLI_RunContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.Config), args[2].(*container.HostConfig), args[3].(*network.NetworkingConfig), args[4].(string), args[5].(bool), args[6].(*time.Duration))
	})
	return _c
}

func (_c *DockerCLI_RunContainer_Call) Return(_a0 bool, _a1 error) *DockerCLI_RunContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerCLI_RunContainer_Call) RunAndReturn(run func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, string, bool, *time.Duration) (bool, error)) *DockerCLI_RunContainer_Call {
	_c.Call.Return(run)
	return _c
}

// NewDockerCLI creates a new instance of DockerCLI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDockerCLI(t interface {
	mock.TestingT
	Cleanup(func())
}) *DockerCLI {
	mock := &DockerCLI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
