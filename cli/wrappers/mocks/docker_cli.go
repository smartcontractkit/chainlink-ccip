// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	command "github.com/docker/cli/cli/command"
	configfile "github.com/docker/cli/cli/config/configfile"

	flags "github.com/docker/cli/cli/flags"

	mock "github.com/stretchr/testify/mock"

	wrappers "github.com/smartcontractkit/crib/cli/wrappers"
)

// DockerCLI is an autogenerated mock type for the DockerCLI type
type DockerCLI struct {
	mock.Mock
}

type DockerCLI_Expecter struct {
	mock *mock.Mock
}

func (_m *DockerCLI) EXPECT() *DockerCLI_Expecter {
	return &DockerCLI_Expecter{mock: &_m.Mock}
}

// Client provides a mock function with given fields:
func (_m *DockerCLI) Client() wrappers.DockerAPI {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 wrappers.DockerAPI
	if rf, ok := ret.Get(0).(func() wrappers.DockerAPI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrappers.DockerAPI)
		}
	}

	return r0
}

// DockerCLI_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type DockerCLI_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *DockerCLI_Expecter) Client() *DockerCLI_Client_Call {
	return &DockerCLI_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *DockerCLI_Client_Call) Run(run func()) *DockerCLI_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerCLI_Client_Call) Return(_a0 wrappers.DockerAPI) *DockerCLI_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerCLI_Client_Call) RunAndReturn(run func() wrappers.DockerAPI) *DockerCLI_Client_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigFile provides a mock function with given fields:
func (_m *DockerCLI) ConfigFile() *configfile.ConfigFile {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfigFile")
	}

	var r0 *configfile.ConfigFile
	if rf, ok := ret.Get(0).(func() *configfile.ConfigFile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configfile.ConfigFile)
		}
	}

	return r0
}

// DockerCLI_ConfigFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigFile'
type DockerCLI_ConfigFile_Call struct {
	*mock.Call
}

// ConfigFile is a helper method to define mock.On call
func (_e *DockerCLI_Expecter) ConfigFile() *DockerCLI_ConfigFile_Call {
	return &DockerCLI_ConfigFile_Call{Call: _e.mock.On("ConfigFile")}
}

func (_c *DockerCLI_ConfigFile_Call) Run(run func()) *DockerCLI_ConfigFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerCLI_ConfigFile_Call) Return(_a0 *configfile.ConfigFile) *DockerCLI_ConfigFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerCLI_ConfigFile_Call) RunAndReturn(run func() *configfile.ConfigFile) *DockerCLI_ConfigFile_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: opts, ops
func (_m *DockerCLI) Initialize(opts *flags.ClientOptions, ops ...command.CLIOption) error {
	_va := make([]interface{}, len(ops))
	for _i := range ops {
		_va[_i] = ops[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*flags.ClientOptions, ...command.CLIOption) error); ok {
		r0 = rf(opts, ops...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DockerCLI_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type DockerCLI_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - opts *flags.ClientOptions
//   - ops ...command.CLIOption
func (_e *DockerCLI_Expecter) Initialize(opts interface{}, ops ...interface{}) *DockerCLI_Initialize_Call {
	return &DockerCLI_Initialize_Call{Call: _e.mock.On("Initialize",
		append([]interface{}{opts}, ops...)...)}
}

func (_c *DockerCLI_Initialize_Call) Run(run func(opts *flags.ClientOptions, ops ...command.CLIOption)) *DockerCLI_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]command.CLIOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(command.CLIOption)
			}
		}
		run(args[0].(*flags.ClientOptions), variadicArgs...)
	})
	return _c
}

func (_c *DockerCLI_Initialize_Call) Return(_a0 error) *DockerCLI_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerCLI_Initialize_Call) RunAndReturn(run func(*flags.ClientOptions, ...command.CLIOption) error) *DockerCLI_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewDockerCLI creates a new instance of DockerCLI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDockerCLI(t interface {
	mock.TestingT
	Cleanup(func())
}) *DockerCLI {
	mock := &DockerCLI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
