// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// ResourceInterface is an autogenerated mock type for the ResourceInterface type
type ResourceInterface struct {
	mock.Mock
}

type ResourceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceInterface) EXPECT() *ResourceInterface_Expecter {
	return &ResourceInterface_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: ctx, name, obj, options, subresources
func (_m *ResourceInterface) Apply(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions, subresources ...string) (*unstructured.Unstructured, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, obj, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return rf(ctx, name, obj, options, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) *unstructured.Unstructured); ok {
		r0 = rf(ctx, name, obj, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) error); ok {
		r1 = rf(ctx, name, obj, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type ResourceInterface_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - obj *unstructured.Unstructured
//   - options v1.ApplyOptions
//   - subresources ...string
func (_e *ResourceInterface_Expecter) Apply(ctx interface{}, name interface{}, obj interface{}, options interface{}, subresources ...interface{}) *ResourceInterface_Apply_Call {
	return &ResourceInterface_Apply_Call{Call: _e.mock.On("Apply",
		append([]interface{}{ctx, name, obj, options}, subresources...)...)}
}

func (_c *ResourceInterface_Apply_Call) Run(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions, subresources ...string)) *ResourceInterface_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*unstructured.Unstructured), args[3].(v1.ApplyOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceInterface_Apply_Call) Return(_a0 *unstructured.Unstructured, _a1 error) *ResourceInterface_Apply_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_Apply_Call) RunAndReturn(run func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterface_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyStatus provides a mock function with given fields: ctx, name, obj, options
func (_m *ResourceInterface) ApplyStatus(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions) (*unstructured.Unstructured, error) {
	ret := _m.Called(ctx, name, obj, options)

	if len(ret) == 0 {
		panic("no return value specified for ApplyStatus")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)); ok {
		return rf(ctx, name, obj, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) *unstructured.Unstructured); ok {
		r0 = rf(ctx, name, obj, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) error); ok {
		r1 = rf(ctx, name, obj, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_ApplyStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyStatus'
type ResourceInterface_ApplyStatus_Call struct {
	*mock.Call
}

// ApplyStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - obj *unstructured.Unstructured
//   - options v1.ApplyOptions
func (_e *ResourceInterface_Expecter) ApplyStatus(ctx interface{}, name interface{}, obj interface{}, options interface{}) *ResourceInterface_ApplyStatus_Call {
	return &ResourceInterface_ApplyStatus_Call{Call: _e.mock.On("ApplyStatus", ctx, name, obj, options)}
}

func (_c *ResourceInterface_ApplyStatus_Call) Run(run func(ctx context.Context, name string, obj *unstructured.Unstructured, options v1.ApplyOptions)) *ResourceInterface_ApplyStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*unstructured.Unstructured), args[3].(v1.ApplyOptions))
	})
	return _c
}

func (_c *ResourceInterface_ApplyStatus_Call) Return(_a0 *unstructured.Unstructured, _a1 error) *ResourceInterface_ApplyStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_ApplyStatus_Call) RunAndReturn(run func(context.Context, string, *unstructured.Unstructured, v1.ApplyOptions) (*unstructured.Unstructured, error)) *ResourceInterface_ApplyStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, obj, options, subresources
func (_m *ResourceInterface) Create(ctx context.Context, obj *unstructured.Unstructured, options v1.CreateOptions, subresources ...string) (*unstructured.Unstructured, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, obj, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return rf(ctx, obj, options, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) *unstructured.Unstructured); ok {
		r0 = rf(ctx, obj, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) error); ok {
		r1 = rf(ctx, obj, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ResourceInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options v1.CreateOptions
//   - subresources ...string
func (_e *ResourceInterface_Expecter) Create(ctx interface{}, obj interface{}, options interface{}, subresources ...interface{}) *ResourceInterface_Create_Call {
	return &ResourceInterface_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, obj, options}, subresources...)...)}
}

func (_c *ResourceInterface_Create_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options v1.CreateOptions, subresources ...string)) *ResourceInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(*unstructured.Unstructured), args[2].(v1.CreateOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceInterface_Create_Call) Return(_a0 *unstructured.Unstructured, _a1 error) *ResourceInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_Create_Call) RunAndReturn(run func(context.Context, *unstructured.Unstructured, v1.CreateOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name, options, subresources
func (_m *ResourceInterface) Delete(ctx context.Context, name string, options v1.DeleteOptions, subresources ...string) error {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.DeleteOptions, ...string) error); ok {
		r0 = rf(ctx, name, options, subresources...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ResourceInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options v1.DeleteOptions
//   - subresources ...string
func (_e *ResourceInterface_Expecter) Delete(ctx interface{}, name interface{}, options interface{}, subresources ...interface{}) *ResourceInterface_Delete_Call {
	return &ResourceInterface_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, name, options}, subresources...)...)}
}

func (_c *ResourceInterface_Delete_Call) Run(run func(ctx context.Context, name string, options v1.DeleteOptions, subresources ...string)) *ResourceInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(v1.DeleteOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceInterface_Delete_Call) Return(_a0 error) *ResourceInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceInterface_Delete_Call) RunAndReturn(run func(context.Context, string, v1.DeleteOptions, ...string) error) *ResourceInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function with given fields: ctx, options, listOptions
func (_m *ResourceInterface) DeleteCollection(ctx context.Context, options v1.DeleteOptions, listOptions v1.ListOptions) error {
	ret := _m.Called(ctx, options, listOptions)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.DeleteOptions, v1.ListOptions) error); ok {
		r0 = rf(ctx, options, listOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceInterface_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type ResourceInterface_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - options v1.DeleteOptions
//   - listOptions v1.ListOptions
func (_e *ResourceInterface_Expecter) DeleteCollection(ctx interface{}, options interface{}, listOptions interface{}) *ResourceInterface_DeleteCollection_Call {
	return &ResourceInterface_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, options, listOptions)}
}

func (_c *ResourceInterface_DeleteCollection_Call) Run(run func(ctx context.Context, options v1.DeleteOptions, listOptions v1.ListOptions)) *ResourceInterface_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.DeleteOptions), args[2].(v1.ListOptions))
	})
	return _c
}

func (_c *ResourceInterface_DeleteCollection_Call) Return(_a0 error) *ResourceInterface_DeleteCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceInterface_DeleteCollection_Call) RunAndReturn(run func(context.Context, v1.DeleteOptions, v1.ListOptions) error) *ResourceInterface_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name, options, subresources
func (_m *ResourceInterface) Get(ctx context.Context, name string, options v1.GetOptions, subresources ...string) (*unstructured.Unstructured, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return rf(ctx, name, options, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions, ...string) *unstructured.Unstructured); ok {
		r0 = rf(ctx, name, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, v1.GetOptions, ...string) error); ok {
		r1 = rf(ctx, name, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ResourceInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options v1.GetOptions
//   - subresources ...string
func (_e *ResourceInterface_Expecter) Get(ctx interface{}, name interface{}, options interface{}, subresources ...interface{}) *ResourceInterface_Get_Call {
	return &ResourceInterface_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, name, options}, subresources...)...)}
}

func (_c *ResourceInterface_Get_Call) Run(run func(ctx context.Context, name string, options v1.GetOptions, subresources ...string)) *ResourceInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(v1.GetOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceInterface_Get_Call) Return(_a0 *unstructured.Unstructured, _a1 error) *ResourceInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_Get_Call) RunAndReturn(run func(context.Context, string, v1.GetOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *ResourceInterface) List(ctx context.Context, opts v1.ListOptions) (*unstructured.UnstructuredList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *unstructured.UnstructuredList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *unstructured.UnstructuredList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.UnstructuredList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ResourceInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *ResourceInterface_Expecter) List(ctx interface{}, opts interface{}) *ResourceInterface_List_Call {
	return &ResourceInterface_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *ResourceInterface_List_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *ResourceInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.ListOptions))
	})
	return _c
}

func (_c *ResourceInterface_List_Call) Return(_a0 *unstructured.UnstructuredList, _a1 error) *ResourceInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_List_Call) RunAndReturn(run func(context.Context, v1.ListOptions) (*unstructured.UnstructuredList, error)) *ResourceInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, name, pt, data, options, subresources
func (_m *ResourceInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, options v1.PatchOptions, subresources ...string) (*unstructured.Unstructured, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return rf(ctx, name, pt, data, options, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) *unstructured.Unstructured); ok {
		r0 = rf(ctx, name, pt, data, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type ResourceInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - options v1.PatchOptions
//   - subresources ...string
func (_e *ResourceInterface_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, options interface{}, subresources ...interface{}) *ResourceInterface_Patch_Call {
	return &ResourceInterface_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, options}, subresources...)...)}
}

func (_c *ResourceInterface_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, options v1.PatchOptions, subresources ...string)) *ResourceInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(types.PatchType), args[3].([]byte), args[4].(v1.PatchOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceInterface_Patch_Call) Return(_a0 *unstructured.Unstructured, _a1 error) *ResourceInterface_Patch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_Patch_Call) RunAndReturn(run func(context.Context, string, types.PatchType, []byte, v1.PatchOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, obj, options, subresources
func (_m *ResourceInterface) Update(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions, subresources ...string) (*unstructured.Unstructured, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, obj, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)); ok {
		return rf(ctx, obj, options, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) *unstructured.Unstructured); ok {
		r0 = rf(ctx, obj, options, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) error); ok {
		r1 = rf(ctx, obj, options, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ResourceInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options v1.UpdateOptions
//   - subresources ...string
func (_e *ResourceInterface_Expecter) Update(ctx interface{}, obj interface{}, options interface{}, subresources ...interface{}) *ResourceInterface_Update_Call {
	return &ResourceInterface_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, obj, options}, subresources...)...)}
}

func (_c *ResourceInterface_Update_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions, subresources ...string)) *ResourceInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(*unstructured.Unstructured), args[2].(v1.UpdateOptions), variadicArgs...)
	})
	return _c
}

func (_c *ResourceInterface_Update_Call) Return(_a0 *unstructured.Unstructured, _a1 error) *ResourceInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_Update_Call) RunAndReturn(run func(context.Context, *unstructured.Unstructured, v1.UpdateOptions, ...string) (*unstructured.Unstructured, error)) *ResourceInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, obj, options
func (_m *ResourceInterface) UpdateStatus(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions) (*unstructured.Unstructured, error) {
	ret := _m.Called(ctx, obj, options)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)); ok {
		return rf(ctx, obj, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) *unstructured.Unstructured); ok {
		r0 = rf(ctx, obj, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) error); ok {
		r1 = rf(ctx, obj, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type ResourceInterface_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *unstructured.Unstructured
//   - options v1.UpdateOptions
func (_e *ResourceInterface_Expecter) UpdateStatus(ctx interface{}, obj interface{}, options interface{}) *ResourceInterface_UpdateStatus_Call {
	return &ResourceInterface_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, obj, options)}
}

func (_c *ResourceInterface_UpdateStatus_Call) Run(run func(ctx context.Context, obj *unstructured.Unstructured, options v1.UpdateOptions)) *ResourceInterface_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*unstructured.Unstructured), args[2].(v1.UpdateOptions))
	})
	return _c
}

func (_c *ResourceInterface_UpdateStatus_Call) Return(_a0 *unstructured.Unstructured, _a1 error) *ResourceInterface_UpdateStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_UpdateStatus_Call) RunAndReturn(run func(context.Context, *unstructured.Unstructured, v1.UpdateOptions) (*unstructured.Unstructured, error)) *ResourceInterface_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *ResourceInterface) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) (watch.Interface, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type ResourceInterface_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts v1.ListOptions
func (_e *ResourceInterface_Expecter) Watch(ctx interface{}, opts interface{}) *ResourceInterface_Watch_Call {
	return &ResourceInterface_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *ResourceInterface_Watch_Call) Run(run func(ctx context.Context, opts v1.ListOptions)) *ResourceInterface_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.ListOptions))
	})
	return _c
}

func (_c *ResourceInterface_Watch_Call) Return(_a0 watch.Interface, _a1 error) *ResourceInterface_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_Watch_Call) RunAndReturn(run func(context.Context, v1.ListOptions) (watch.Interface, error)) *ResourceInterface_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceInterface creates a new instance of ResourceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceInterface {
	mock := &ResourceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
