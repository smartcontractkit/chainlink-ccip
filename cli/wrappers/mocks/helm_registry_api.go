// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	registry "helm.sh/helm/v3/pkg/registry"
)

// HelmRegistryAPI is an autogenerated mock type for the HelmRegistryAPI type
type HelmRegistryAPI struct {
	mock.Mock
}

type HelmRegistryAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *HelmRegistryAPI) EXPECT() *HelmRegistryAPI_Expecter {
	return &HelmRegistryAPI_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: host, options
func (_m *HelmRegistryAPI) Login(host string, options ...registry.LoginOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, host)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...registry.LoginOption) error); ok {
		r0 = rf(host, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HelmRegistryAPI_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type HelmRegistryAPI_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - host string
//   - options ...registry.LoginOption
func (_e *HelmRegistryAPI_Expecter) Login(host interface{}, options ...interface{}) *HelmRegistryAPI_Login_Call {
	return &HelmRegistryAPI_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{host}, options...)...)}
}

func (_c *HelmRegistryAPI_Login_Call) Run(run func(host string, options ...registry.LoginOption)) *HelmRegistryAPI_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]registry.LoginOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(registry.LoginOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *HelmRegistryAPI_Login_Call) Return(_a0 error) *HelmRegistryAPI_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HelmRegistryAPI_Login_Call) RunAndReturn(run func(string, ...registry.LoginOption) error) *HelmRegistryAPI_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewHelmRegistryAPI creates a new instance of HelmRegistryAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelmRegistryAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *HelmRegistryAPI {
	mock := &HelmRegistryAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
