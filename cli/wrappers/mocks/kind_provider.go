// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	cluster "sigs.k8s.io/kind/pkg/cluster"

	nodes "sigs.k8s.io/kind/pkg/cluster/nodes"
)

// KindProvider is an autogenerated mock type for the KindProvider type
type KindProvider struct {
	mock.Mock
}

type KindProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *KindProvider) EXPECT() *KindProvider_Expecter {
	return &KindProvider_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: name, options
func (_m *KindProvider) Create(name string, options ...cluster.CreateOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...cluster.CreateOption) error); ok {
		r0 = rf(name, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KindProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type KindProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
//   - options ...cluster.CreateOption
func (_e *KindProvider_Expecter) Create(name interface{}, options ...interface{}) *KindProvider_Create_Call {
	return &KindProvider_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{name}, options...)...)}
}

func (_c *KindProvider_Create_Call) Run(run func(name string, options ...cluster.CreateOption)) *KindProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]cluster.CreateOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(cluster.CreateOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *KindProvider_Create_Call) Return(_a0 error) *KindProvider_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindProvider_Create_Call) RunAndReturn(run func(string, ...cluster.CreateOption) error) *KindProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: name, explicitKubeconfigPath
func (_m *KindProvider) Delete(name string, explicitKubeconfigPath string) error {
	ret := _m.Called(name, explicitKubeconfigPath)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, explicitKubeconfigPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KindProvider_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type KindProvider_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - name string
//   - explicitKubeconfigPath string
func (_e *KindProvider_Expecter) Delete(name interface{}, explicitKubeconfigPath interface{}) *KindProvider_Delete_Call {
	return &KindProvider_Delete_Call{Call: _e.mock.On("Delete", name, explicitKubeconfigPath)}
}

func (_c *KindProvider_Delete_Call) Run(run func(name string, explicitKubeconfigPath string)) *KindProvider_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *KindProvider_Delete_Call) Return(_a0 error) *KindProvider_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindProvider_Delete_Call) RunAndReturn(run func(string, string) error) *KindProvider_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExportKubeConfig provides a mock function with given fields: name, explicitPath, internal
func (_m *KindProvider) ExportKubeConfig(name string, explicitPath string, internal bool) error {
	ret := _m.Called(name, explicitPath, internal)

	if len(ret) == 0 {
		panic("no return value specified for ExportKubeConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(name, explicitPath, internal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KindProvider_ExportKubeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportKubeConfig'
type KindProvider_ExportKubeConfig_Call struct {
	*mock.Call
}

// ExportKubeConfig is a helper method to define mock.On call
//   - name string
//   - explicitPath string
//   - internal bool
func (_e *KindProvider_Expecter) ExportKubeConfig(name interface{}, explicitPath interface{}, internal interface{}) *KindProvider_ExportKubeConfig_Call {
	return &KindProvider_ExportKubeConfig_Call{Call: _e.mock.On("ExportKubeConfig", name, explicitPath, internal)}
}

func (_c *KindProvider_ExportKubeConfig_Call) Run(run func(name string, explicitPath string, internal bool)) *KindProvider_ExportKubeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *KindProvider_ExportKubeConfig_Call) Return(_a0 error) *KindProvider_ExportKubeConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindProvider_ExportKubeConfig_Call) RunAndReturn(run func(string, string, bool) error) *KindProvider_ExportKubeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *KindProvider) List() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KindProvider_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type KindProvider_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *KindProvider_Expecter) List() *KindProvider_List_Call {
	return &KindProvider_List_Call{Call: _e.mock.On("List")}
}

func (_c *KindProvider_List_Call) Run(run func()) *KindProvider_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KindProvider_List_Call) Return(_a0 []string, _a1 error) *KindProvider_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KindProvider_List_Call) RunAndReturn(run func() ([]string, error)) *KindProvider_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function with given fields: name
func (_m *KindProvider) ListNodes(name string) ([]nodes.Node, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []nodes.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]nodes.Node, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []nodes.Node); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nodes.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KindProvider_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type KindProvider_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - name string
func (_e *KindProvider_Expecter) ListNodes(name interface{}) *KindProvider_ListNodes_Call {
	return &KindProvider_ListNodes_Call{Call: _e.mock.On("ListNodes", name)}
}

func (_c *KindProvider_ListNodes_Call) Run(run func(name string)) *KindProvider_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *KindProvider_ListNodes_Call) Return(_a0 []nodes.Node, _a1 error) *KindProvider_ListNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KindProvider_ListNodes_Call) RunAndReturn(run func(string) ([]nodes.Node, error)) *KindProvider_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// NewKindProvider creates a new instance of KindProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKindProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *KindProvider {
	mock := &KindProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
