// Code generated by mockery v2.45.1. DO NOT EDIT.

package kind

import (
	context "context"
	io "io"

	exec "sigs.k8s.io/kind/pkg/exec"

	mock "github.com/stretchr/testify/mock"
)

// KindNode is an autogenerated mock type for the Node type
type KindNode struct {
	mock.Mock
}

type KindNode_Expecter struct {
	mock *mock.Mock
}

func (_m *KindNode) EXPECT() *KindNode_Expecter {
	return &KindNode_Expecter{mock: &_m.Mock}
}

// Command provides a mock function with given fields: _a0, _a1
func (_m *KindNode) Command(_a0 string, _a1 ...string) exec.Cmd {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Command")
	}

	var r0 exec.Cmd
	if rf, ok := ret.Get(0).(func(string, ...string) exec.Cmd); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exec.Cmd)
		}
	}

	return r0
}

// KindNode_Command_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Command'
type KindNode_Command_Call struct {
	*mock.Call
}

// Command is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...string
func (_e *KindNode_Expecter) Command(_a0 interface{}, _a1 ...interface{}) *KindNode_Command_Call {
	return &KindNode_Command_Call{Call: _e.mock.On("Command",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *KindNode_Command_Call) Run(run func(_a0 string, _a1 ...string)) *KindNode_Command_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *KindNode_Command_Call) Return(_a0 exec.Cmd) *KindNode_Command_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindNode_Command_Call) RunAndReturn(run func(string, ...string) exec.Cmd) *KindNode_Command_Call {
	_c.Call.Return(run)
	return _c
}

// CommandContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *KindNode) CommandContext(_a0 context.Context, _a1 string, _a2 ...string) exec.Cmd {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommandContext")
	}

	var r0 exec.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) exec.Cmd); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exec.Cmd)
		}
	}

	return r0
}

// KindNode_CommandContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommandContext'
type KindNode_CommandContext_Call struct {
	*mock.Call
}

// CommandContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 ...string
func (_e *KindNode_Expecter) CommandContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *KindNode_CommandContext_Call {
	return &KindNode_CommandContext_Call{Call: _e.mock.On("CommandContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *KindNode_CommandContext_Call) Run(run func(_a0 context.Context, _a1 string, _a2 ...string)) *KindNode_CommandContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *KindNode_CommandContext_Call) Return(_a0 exec.Cmd) *KindNode_CommandContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindNode_CommandContext_Call) RunAndReturn(run func(context.Context, string, ...string) exec.Cmd) *KindNode_CommandContext_Call {
	_c.Call.Return(run)
	return _c
}

// IP provides a mock function with given fields:
func (_m *KindNode) IP() (string, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IP")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// KindNode_IP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IP'
type KindNode_IP_Call struct {
	*mock.Call
}

// IP is a helper method to define mock.On call
func (_e *KindNode_Expecter) IP() *KindNode_IP_Call {
	return &KindNode_IP_Call{Call: _e.mock.On("IP")}
}

func (_c *KindNode_IP_Call) Run(run func()) *KindNode_IP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KindNode_IP_Call) Return(ipv4 string, ipv6 string, err error) *KindNode_IP_Call {
	_c.Call.Return(ipv4, ipv6, err)
	return _c
}

func (_c *KindNode_IP_Call) RunAndReturn(run func() (string, string, error)) *KindNode_IP_Call {
	_c.Call.Return(run)
	return _c
}

// Role provides a mock function with given fields:
func (_m *KindNode) Role() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Role")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KindNode_Role_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Role'
type KindNode_Role_Call struct {
	*mock.Call
}

// Role is a helper method to define mock.On call
func (_e *KindNode_Expecter) Role() *KindNode_Role_Call {
	return &KindNode_Role_Call{Call: _e.mock.On("Role")}
}

func (_c *KindNode_Role_Call) Run(run func()) *KindNode_Role_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KindNode_Role_Call) Return(_a0 string, _a1 error) *KindNode_Role_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KindNode_Role_Call) RunAndReturn(run func() (string, error)) *KindNode_Role_Call {
	_c.Call.Return(run)
	return _c
}

// SerialLogs provides a mock function with given fields: writer
func (_m *KindNode) SerialLogs(writer io.Writer) error {
	ret := _m.Called(writer)

	if len(ret) == 0 {
		panic("no return value specified for SerialLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KindNode_SerialLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SerialLogs'
type KindNode_SerialLogs_Call struct {
	*mock.Call
}

// SerialLogs is a helper method to define mock.On call
//   - writer io.Writer
func (_e *KindNode_Expecter) SerialLogs(writer interface{}) *KindNode_SerialLogs_Call {
	return &KindNode_SerialLogs_Call{Call: _e.mock.On("SerialLogs", writer)}
}

func (_c *KindNode_SerialLogs_Call) Run(run func(writer io.Writer)) *KindNode_SerialLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *KindNode_SerialLogs_Call) Return(_a0 error) *KindNode_SerialLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindNode_SerialLogs_Call) RunAndReturn(run func(io.Writer) error) *KindNode_SerialLogs_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *KindNode) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KindNode_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type KindNode_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *KindNode_Expecter) String() *KindNode_String_Call {
	return &KindNode_String_Call{Call: _e.mock.On("String")}
}

func (_c *KindNode_String_Call) Run(run func()) *KindNode_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KindNode_String_Call) Return(_a0 string) *KindNode_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindNode_String_Call) RunAndReturn(run func() string) *KindNode_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewKindNode creates a new instance of KindNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKindNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *KindNode {
	mock := &KindNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
