// Code generated by mockery v2.45.1. DO NOT EDIT.

package kind

import (
	io "io"

	exec "sigs.k8s.io/kind/pkg/exec"

	mock "github.com/stretchr/testify/mock"
)

// KindExecCmd is an autogenerated mock type for the Cmd type
type KindExecCmd struct {
	mock.Mock
}

type KindExecCmd_Expecter struct {
	mock *mock.Mock
}

func (_m *KindExecCmd) EXPECT() *KindExecCmd_Expecter {
	return &KindExecCmd_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields:
func (_m *KindExecCmd) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KindExecCmd_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type KindExecCmd_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *KindExecCmd_Expecter) Run() *KindExecCmd_Run_Call {
	return &KindExecCmd_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *KindExecCmd_Run_Call) Run(run func()) *KindExecCmd_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KindExecCmd_Run_Call) Return(_a0 error) *KindExecCmd_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindExecCmd_Run_Call) RunAndReturn(run func() error) *KindExecCmd_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetEnv provides a mock function with given fields: _a0
func (_m *KindExecCmd) SetEnv(_a0 ...string) exec.Cmd {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetEnv")
	}

	var r0 exec.Cmd
	if rf, ok := ret.Get(0).(func(...string) exec.Cmd); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exec.Cmd)
		}
	}

	return r0
}

// KindExecCmd_SetEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnv'
type KindExecCmd_SetEnv_Call struct {
	*mock.Call
}

// SetEnv is a helper method to define mock.On call
//   - _a0 ...string
func (_e *KindExecCmd_Expecter) SetEnv(_a0 ...interface{}) *KindExecCmd_SetEnv_Call {
	return &KindExecCmd_SetEnv_Call{Call: _e.mock.On("SetEnv",
		append([]interface{}{}, _a0...)...)}
}

func (_c *KindExecCmd_SetEnv_Call) Run(run func(_a0 ...string)) *KindExecCmd_SetEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *KindExecCmd_SetEnv_Call) Return(_a0 exec.Cmd) *KindExecCmd_SetEnv_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindExecCmd_SetEnv_Call) RunAndReturn(run func(...string) exec.Cmd) *KindExecCmd_SetEnv_Call {
	_c.Call.Return(run)
	return _c
}

// SetStderr provides a mock function with given fields: _a0
func (_m *KindExecCmd) SetStderr(_a0 io.Writer) exec.Cmd {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetStderr")
	}

	var r0 exec.Cmd
	if rf, ok := ret.Get(0).(func(io.Writer) exec.Cmd); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exec.Cmd)
		}
	}

	return r0
}

// KindExecCmd_SetStderr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStderr'
type KindExecCmd_SetStderr_Call struct {
	*mock.Call
}

// SetStderr is a helper method to define mock.On call
//   - _a0 io.Writer
func (_e *KindExecCmd_Expecter) SetStderr(_a0 interface{}) *KindExecCmd_SetStderr_Call {
	return &KindExecCmd_SetStderr_Call{Call: _e.mock.On("SetStderr", _a0)}
}

func (_c *KindExecCmd_SetStderr_Call) Run(run func(_a0 io.Writer)) *KindExecCmd_SetStderr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *KindExecCmd_SetStderr_Call) Return(_a0 exec.Cmd) *KindExecCmd_SetStderr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindExecCmd_SetStderr_Call) RunAndReturn(run func(io.Writer) exec.Cmd) *KindExecCmd_SetStderr_Call {
	_c.Call.Return(run)
	return _c
}

// SetStdin provides a mock function with given fields: _a0
func (_m *KindExecCmd) SetStdin(_a0 io.Reader) exec.Cmd {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetStdin")
	}

	var r0 exec.Cmd
	if rf, ok := ret.Get(0).(func(io.Reader) exec.Cmd); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exec.Cmd)
		}
	}

	return r0
}

// KindExecCmd_SetStdin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStdin'
type KindExecCmd_SetStdin_Call struct {
	*mock.Call
}

// SetStdin is a helper method to define mock.On call
//   - _a0 io.Reader
func (_e *KindExecCmd_Expecter) SetStdin(_a0 interface{}) *KindExecCmd_SetStdin_Call {
	return &KindExecCmd_SetStdin_Call{Call: _e.mock.On("SetStdin", _a0)}
}

func (_c *KindExecCmd_SetStdin_Call) Run(run func(_a0 io.Reader)) *KindExecCmd_SetStdin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *KindExecCmd_SetStdin_Call) Return(_a0 exec.Cmd) *KindExecCmd_SetStdin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindExecCmd_SetStdin_Call) RunAndReturn(run func(io.Reader) exec.Cmd) *KindExecCmd_SetStdin_Call {
	_c.Call.Return(run)
	return _c
}

// SetStdout provides a mock function with given fields: _a0
func (_m *KindExecCmd) SetStdout(_a0 io.Writer) exec.Cmd {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetStdout")
	}

	var r0 exec.Cmd
	if rf, ok := ret.Get(0).(func(io.Writer) exec.Cmd); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exec.Cmd)
		}
	}

	return r0
}

// KindExecCmd_SetStdout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStdout'
type KindExecCmd_SetStdout_Call struct {
	*mock.Call
}

// SetStdout is a helper method to define mock.On call
//   - _a0 io.Writer
func (_e *KindExecCmd_Expecter) SetStdout(_a0 interface{}) *KindExecCmd_SetStdout_Call {
	return &KindExecCmd_SetStdout_Call{Call: _e.mock.On("SetStdout", _a0)}
}

func (_c *KindExecCmd_SetStdout_Call) Run(run func(_a0 io.Writer)) *KindExecCmd_SetStdout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *KindExecCmd_SetStdout_Call) Return(_a0 exec.Cmd) *KindExecCmd_SetStdout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KindExecCmd_SetStdout_Call) RunAndReturn(run func(io.Writer) exec.Cmd) *KindExecCmd_SetStdout_Call {
	_c.Call.Return(run)
	return _c
}

// NewKindExecCmd creates a new instance of KindExecCmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKindExecCmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *KindExecCmd {
	mock := &KindExecCmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
