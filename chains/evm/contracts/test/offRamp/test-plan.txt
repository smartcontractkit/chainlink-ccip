# Test Plan for OffRampOverSuperchainInterop

## Executive Summary

This test plan outlines the strategy for testing OffRampOverSuperchainInterop, which is a modified version of the regular OffRamp contract that uses Optimism's Superchain Interop for cross-chain message verification instead of OCR3-based merkle root commits. The plan emphasizes avoiding test duplication while ensuring comprehensive coverage of both inherited and new functionality.

## Contract Analysis

### Key Differences from Regular OffRamp
1. **No OCR3 inheritance**: Uses Ownable2StepMsgSender instead of MultiOCR3Base
2. **CrossL2Inbox validation**: Replaces merkle root verification with CrossL2Inbox.validateMessage
3. **Allowed transmitters**: Manual transmitter management instead of OCR3 signers
4. **Chain mapping**: New chainSelector to chainId mapping functionality
5. **Execution flow**: Different execute() and manuallyExecute() signatures
6. **No commit phase**: Messages are validated directly without a separate commit step

### Unchanged Functionality (Lines 558-1003)
- Execution state management (getExecutionState, _setExecutionState)
- Trial execution (_trialExecute)
- Single message execution (executeSingleMessage)
- Token handling (_releaseOrMintSingleToken, _releaseOrMintTokens, _getBalanceOfReceiver)
- Configuration management (getDynamicConfig, setDynamicConfig, applySourceChainConfigUpdates)
- ccipReceive (always reverts)

### Ignore unchanged functions in your test generation at this time, only generate test for any diference w.r.t the existing OffRamp.

## Test Strategy to Avoid Duplication

### 1. THINK very deeply to create a far more detailed test plan


### 2. Create Test setup, and helper contract if necessary.


### 3. Test Only New/Changed Functionality

Create dedicated test files for features unique to OffRampOverSuperchainInterop:

```
contracts/test/offRamp/OffRampOverSuperchainInterop/
├── OffRampOverSuperchainInteropSetup.t.sol
├── OffRampOverSuperchainInterop.constructor.t.sol
├── OffRampOverSuperchainInterop.execute.t.sol
├── OffRampOverSuperchainInterop.manuallyExecute.t.sol
├── OffRampOverSuperchainInterop.decodeLogDataIntoMessage.t.sol
├── OffRampOverSuperchainInterop.executeSingleReport.t.sol
├── OffRampOverSuperchainInterop.applyAllowedTransmitterUpdates.t.sol
├── OffRampOverSuperchainInterop.applyChainSelectorToChainIdConfigUpdates.t.sol
├── OffRampOverSuperchainInterop.getStaticConfig.t.sol
├── OffRampOverSuperchainInterop.whenChainNotForked.t.sol
```

## Example Test Coverage

### Constructor Tests (OffRampOverSuperchainInterop.constructor.t.sol)
- Valid deployment with all parameters
- Zero address validation for crossL2Inbox
- Zero address validation for tokenAdminRegistry
- Zero address validation for nonceManager
- Zero chain selector validation
- Initial allowed transmitters setup
- Initial chain selector to chain ID mapping
- Chain ID capture at deployment
- Event emissions (StaticConfigSet, DynamicConfigSet, etc.)

### Execute Function Tests (OffRampOverSuperchainInterop.execute.t.sol)
- Success: Valid execution by allowed transmitter
- Success: Multiple messages execution
- Revert: Unauthorized transmitter
- Gas estimation sender bypass
- Event emissions

### Manual Execute Tests (OffRampOverSuperchainInterop.manuallyExecute.t.sol)
- Success: Manual execution after threshold time
- Success: Manual execution of previously failed message
- Success: Gas limit override
- Success: Token gas overrides
- Revert: Manual execution before threshold
- Revert: Invalid gas limit (lower than original)
- Revert: Invalid token gas override
- Revert: Gas amount count mismatch

### Message Decoding Tests (OffRampOverSuperchainInterop.decodeLogDataIntoMessage.t.sol)
- Success: Valid log data decoding
- Revert: Invalid selector
- Revert: Destination chain selector mismatch
- Revert: Sequence number mismatch
- Edge case: Malformed log data

### Execute Single Report Tests (OffRampOverSuperchainInterop.executeSingleReport.t.sol)
- Success: Valid report execution
- Success: State transitions (UNTOUCHED -> SUCCESS/FAILURE)
- Success: Nonce management for ordered messages
- Success: Skip already executed messages
- Revert: Invalid destination chain selector
- Revert: Invalid source OnRamp
- Revert: Chain ID not configured
- Revert: Chain ID mismatch
- CrossL2Inbox validation integration
- Event emissions with correct message hash

### Transmitter Management Tests (OffRampOverSuperchainInterop.applyAllowedTransmitterUpdates.t.sol)
- Add single transmitter
- Add multiple transmitters
- Remove transmitter
- Add and remove in same call
- Zero address validation
- Duplicate transmitter handling
- Event emissions

### Chain Mapping Tests (OffRampOverSuperchainInterop.applyChainSelectorToChainIdConfigUpdates.t.sol)
- Set single mapping
- Set multiple mappings
- Unset mapping
- Update existing mapping
- Zero chain ID validation
- Zero chain selector validation
- Event emissions

### Static Config Tests (OffRampOverSuperchainInterop.getStaticConfig.t.sol)
- Verify all static config values
- CrossL2Inbox address included
