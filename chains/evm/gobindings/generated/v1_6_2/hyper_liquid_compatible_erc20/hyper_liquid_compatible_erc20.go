// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package hyper_liquid_compatible_erc20

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var HyperLiquidCompatibleERC20MetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"maxSupply\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"preMint\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"acceptOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"burnFrom\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"decreaseApproval\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getBurners\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCCIPAdmin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getHyperEVMLinker\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getMinters\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"grantBurnRole\",\"inputs\":[{\"name\":\"burner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"grantMintAndBurnRoles\",\"inputs\":[{\"name\":\"burnAndMinter\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"grantMintRole\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"increaseApproval\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isBurner\",\"inputs\":[{\"name\":\"burner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isMinter\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"maxSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"revokeBurnRole\",\"inputs\":[{\"name\":\"burner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"revokeMintRole\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setCCIPAdmin\",\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setHyperEVMLinker\",\"inputs\":[{\"name\":\"newLinker\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setRemoteToken\",\"inputs\":[{\"name\":\"hipTokenId\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"remoteTokenDecimals\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"supportsInterface\",\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"typeAndVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"pure\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BurnAccessGranted\",\"inputs\":[{\"name\":\"burner\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BurnAccessRevoked\",\"inputs\":[{\"name\":\"burner\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"CCIPAdminTransferred\",\"inputs\":[{\"name\":\"previousAdmin\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newAdmin\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"HyperEVMLinkerSet\",\"inputs\":[{\"name\":\"hyperEVMLinker\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MintAccessGranted\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MintAccessRevoked\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferRequested\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RemoteTokenSet\",\"inputs\":[{\"name\":\"remoteTokenId\",\"type\":\"uint64\",\"indexed\":true,\"internalType\":\"uint64\"},{\"name\":\"remoteToken\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"remoteTokenDecimals\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"CannotTransferToSelf\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"HyperEVMTransferFailed\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientSpotBalance\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"LinkerAddressCannotBeZero\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MaxSupplyExceeded\",\"inputs\":[{\"name\":\"supplyAfterMint\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"MustBeProposedOwner\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyCallableByOwner\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OverflowDetected\",\"inputs\":[{\"name\":\"remoteDecimals\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"localDecimals\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"remoteAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"OwnerCannotBeZero\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"RemoteTokenAlreadySet\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"SenderNotBurner\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"SenderNotMinter\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ZeroAddressNotAllowed\",\"inputs\":[]}]",
	Bin: "0x60c08060405234610362576132cf803803809161001c82856105fa565b833981019060c0818303126103625780516001600160401b0381116103625782610047918301610638565b602082015190926001600160401b03821161036257610067918301610638565b604082015160ff811681036103625760608301519160a060808501519401519460018060a01b038616809603610362578051906001600160401b0382116104f75760035490600182811c921680156105f0575b60208310146104d75781601f849311610580575b50602090601f83116001146105185760009261050d575b50508160011b916000199060031b1c1916176003555b8051906001600160401b0382116104f75760045490600182811c921680156104ed575b60208310146104d75781601f849311610467575b50602090601f83116001146103ff576000926103f4575b50508160011b916000199060031b1c1916176004555b33156103e3573360018060a01b031960065416176006556080528060a0528260018060a01b0319600754161760075580821190816103d9575b506103c557806101d2575b604051612b2790816107a8823960805181818161175801526129d6015260a0518181816106b601526114c40152f35b811561038057600c54604081901c6001600160a01b0316831461025d575b50600254908082018092116102475760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160009360025584845283825260408420818154019055604051908152a338806101a3565b634e487b7160e01b600052601160045260246000fd5b60408051602081018581526001600160401b0384168284015291815260009182916102896060826105fa565b51906108015afa3d15610378573d906102a18261061d565b916102af60405193846105fa565b82523d6000602084013e5b15610367576060818051810103126103625760405160009290606081016001600160401b0381118282101761034e579160ff9161033894936040526040610322606061030860208801610698565b96878552610317848201610698565b602086015201610698565b91015260e01c16906001600160401b03166106d1565b8211156101f05763e08a99d760e01b8152600490fd5b634e487b7160e01b85526041600452602485fd5b600080fd5b63d1ba842760e01b60005260046000fd5b6060906102ba565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b63cbbf111360e01b60005260045260246000fd5b9050151538610198565b639b15e16f60e01b60005260046000fd5b015190503880610149565b600460009081528281209350601f198516905b81811061044f5750908460019594939210610436575b505050811b0160045561015f565b015160001960f88460031b161c19169055388080610428565b92936020600181928786015181550195019301610412565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c810191602085106104cd575b90601f859493920160051c01905b8181106104be5750610132565b600081558493506001016104b1565b90915081906104a3565b634e487b7160e01b600052602260045260246000fd5b91607f169161011e565b634e487b7160e01b600052604160045260246000fd5b0151905038806100e5565b600360009081528281209350601f198516905b818110610568575090846001959493921061054f575b505050811b016003556100fb565b015160001960f88460031b161c19169055388080610541565b9293602060018192878601518155019501930161052b565b60036000529091507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f840160051c810191602085106105e6575b90601f859493920160051c01905b8181106105d757506100ce565b600081558493506001016105ca565b90915081906105bc565b91607f16916100ba565b601f909101601f19168101906001600160401b038211908210176104f757604052565b6001600160401b0381116104f757601f01601f191660200190565b81601f820112156103625780519061064f8261061d565b9261065d60405194856105fa565b828452602083830101116103625760005b82811061068357505060206000918301015290565b8060208092840101518282870101520161066e565b51906001600160401b038216820361036257565b9060ff8091169116039060ff821161024757565b60ff16604d811161024757600a0a90565b9060ff6080511660ff8216918183146107a1578180841161077657906106f6916106ac565b91604d60ff8416118015610745575b610728575050610714906106c0565b908181029181830414901517156102475790565b90915063a9cb113d60e01b60005260045260245260445260646000fd5b5061074f836106c0565b801561076057600019048411610705565b634e487b7160e01b600052601260045260246000fd5b61077f916106ac565b91604d60ff841611610728575050610796906106c0565b908115610760570490565b5050509056fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714611c8a5750806306fdde0314611bad578063095ea7b3146119f057806318160ddd146119b4578063181f5a771461193f57806323b872dd1461177c578063313ce5671461172057806339509351146116e457806340c10f191461144d57806342966c68146113f65780634334614a146113915780634f5632f8146113005780636618846314610dde5780636b32810b1461126b57806370a082311461120657806379ba50971461111d57806379cc679014610de357806386fe8b431461107c5780638da5cb5b1461102a5780638fd6a6ac14610fd857806395d89b4114610e7b5780639dc29fac14610de3578063a457c2d714610dde578063a8fa343c14610d33578063a9059cbb1461097e578063aa271e1a1461090f578063c2e3273d1461087e578063c630948d146107db578063c64d0ebc1461074a578063cf30d408146106d9578063d5abeb0114610680578063d73dd6231461063b578063dc3623361461049c578063dd62ed3e1461040c578063dfc6a39b1461033c578063f2fde38b1461024c5763f81094f3146101b657600080fd5b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475773ffffffffffffffffffffffffffffffffffffffff610202611e41565b61020a612349565b16610214816127c9565b61021a57005b60207fed998b960f6340d045f620c119730f7aa7995e7425c2401d3a5b64ff998a59e991604051908152a1005b600080fd5b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475773ffffffffffffffffffffffffffffffffffffffff610298611e41565b6102a0612349565b1633811461031257807fffffffffffffffffffffffff0000000000000000000000000000000000000000600554161760055573ffffffffffffffffffffffffffffffffffffffff600654167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278600080a3005b7fdad89dca0000000000000000000000000000000000000000000000000000000060005260046000fd5b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757610373611e41565b61037b612349565b73ffffffffffffffffffffffffffffffffffffffff81169081156103e2577f8c306a6a12fff1951878e8621be6674add1102cd359dd968efbbe797629ef84f557f58dc48d21bdfdfd38a14ec5c284648779a185303f99274a36e229247ad554b00600080a2005b7f4496fa750000000000000000000000000000000000000000000000000000000060005260046000fd5b346102475760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757610443611e41565b73ffffffffffffffffffffffffffffffffffffffff610460611e64565b9116600052600160205273ffffffffffffffffffffffffffffffffffffffff604060002091166000526020526020604060002054604051908152f35b346102475760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475760043567ffffffffffffffff8116809103610247576024359060ff821691828103610247576104f8612349565b600c5473ffffffffffffffffffffffffffffffffffffffff8160401c166106115782156105e75773ffffffffffffffffffffffffffffffffffffffff917cff00000000000000000000000000000000000000000000000000000000847fffffff00000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffff0000000000000000732000000000000000000000000000000000000000831760401b169416179160e01b16171780600c5560401c16907fdfe07d71cc59385f4636a8fcd2903aef349e9d53bef3f028b1417c16cd48c2be600080a4005b7f8579befe0000000000000000000000000000000000000000000000000000000060005260046000fd5b7ff56cd76b0000000000000000000000000000000000000000000000000000000060005260046000fd5b346102475760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475761067e610675611e41565b6024359061214f565b005b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475760207f8c306a6a12fff1951878e8621be6674add1102cd359dd968efbbe797629ef84f5473ffffffffffffffffffffffffffffffffffffffff60405191168152f35b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475773ffffffffffffffffffffffffffffffffffffffff610796611e41565b61079e612349565b166107a881612954565b6107ae57005b60207f92308bb7573b2a3d17ddb868b39d8ebec433f3194421abc22d084f89658c9bad91604051908152a1005b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475773ffffffffffffffffffffffffffffffffffffffff610827611e41565b61082f612349565b16610839816128f4565b61084f575b610846612349565b6107a881612954565b7fe46fef8bbff1389d9010703cf8ebb363fb3daf5bf56edc27080b67bc8d9251ea6020604051838152a161083e565b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475773ffffffffffffffffffffffffffffffffffffffff6108ca611e41565b6108d2612349565b166108dc816128f4565b6108e257005b60207fe46fef8bbff1389d9010703cf8ebb363fb3daf5bf56edc27080b67bc8d9251ea91604051908152a1005b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757602061097473ffffffffffffffffffffffffffffffffffffffff610960611e41565b166000526009602052604060002054151590565b6040519015158152f35b346102475760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610247576109b5611e41565b73ffffffffffffffffffffffffffffffffffffffff16602435308214610247573315610caf578115610c2b57600c5473ffffffffffffffffffffffffffffffffffffffff8160401c168314610afd575b50336000526000602052604060002054818110610a795781903360005260006020520360406000205581600052600060205260406000208181540190556040519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a3602060405160018152f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b600080604051602081019086825267ffffffffffffffff8516604082015260408152610b2a606082612098565b51906108015afa3d15610c23573d90610b42826120d9565b91610b506040519384612098565b82523d6000602084013e5b15610bf9576060818051810103126102475767ffffffffffffffff60ff610bc393604051610b888161204d565b6040610bb56060610b9b60208901612394565b97888552610baa848201612394565b602086015201612394565b91015260e01c1691166129d3565b8111610bcf5782610a05565b7fe08a99d70000000000000000000000000000000000000000000000000000000060005260046000fd5b7fd1ba84270000000000000000000000000000000000000000000000000000000060005260046000fd5b606090610b5b565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757610d6a611e41565b610d72612349565b73ffffffffffffffffffffffffffffffffffffffff80600754921691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600755167f9524c9e4b0b61eb018dd58a1cd856e3e74009528328ab4a613b434fa631d7242600080a3005b611e87565b346102475760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757610e1a611e41565b602435610e3433600052600b602052604060002054151590565b15610e4d5761067e91610e488233836121ee565b6123a9565b7fc820b10b000000000000000000000000000000000000000000000000000000006000523360045260246000fd5b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475760405160006004548060011c90600181168015610fce575b602083108114610fa157828552908115610f5f5750600114610eff575b610efb83610eef81850382612098565b60405191829182611dd9565b0390f35b91905060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b808210610f4557509091508101602001610eef610edf565b919260018160209254838588010152019101909291610f2d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208086019190915291151560051b84019091019150610eef9050610edf565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526022600452fd5b91607f1691610ec2565b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757602073ffffffffffffffffffffffffffffffffffffffff60075416604051908152f35b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757604051806020600a54918281520190600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a89060005b81811061110757610efb856110fb81870382612098565b60405191829182611ffd565b82548452602090930192600192830192016110e4565b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475760055473ffffffffffffffffffffffffffffffffffffffff811633036111dc577fffffffffffffffffffffffff00000000000000000000000000000000000000006006549133828416176006551660055573ffffffffffffffffffffffffffffffffffffffff3391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b7f02b543c60000000000000000000000000000000000000000000000000000000060005260046000fd5b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475773ffffffffffffffffffffffffffffffffffffffff611252611e41565b1660005260006020526020604060002054604051908152f35b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475760405180602060085491828152019060086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee39060005b8181106112ea57610efb856110fb81870382612098565b82548452602090930192600192830192016112d3565b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475773ffffffffffffffffffffffffffffffffffffffff61134c611e41565b611354612349565b1661135e81612633565b61136457005b60207f0a675452746933cefe3d74182e78db7afe57ba60eaa4234b5d85e9aa41b0610c91604051908152a1005b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757602061097473ffffffffffffffffffffffffffffffffffffffff6113e2611e41565b16600052600b602052604060002054151590565b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475761143c33600052600b602052604060002054151590565b15610e4d5761067e600435336123a9565b346102475760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757611484611e41565b6024359061149f336000526009602052604060002054151590565b156116b65773ffffffffffffffffffffffffffffffffffffffff1690308214610247577f000000000000000000000000000000000000000000000000000000000000000080151590816116a1575b5061166857811561160a57600c5473ffffffffffffffffffffffffffffffffffffffff8160401c16831461156b575b507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208261154f600094600254612113565b60025584845283825260408420818154019055604051908152a3005b600080604051602081019086825267ffffffffffffffff8516604082015260408152611598606082612098565b51906108015afa3d15611602573d906115b0826120d9565b916115be6040519384612098565b82523d6000602084013e5b15610bf9576060818051810103126102475767ffffffffffffffff60ff6115f693604051610b888161204d565b8111610bcf578261151c565b6060906115c9565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b61167490600254612113565b7fcbbf11130000000000000000000000000000000000000000000000000000000060005260045260246000fd5b90506116af82600254612113565b11836114ed565b7fe2c8c9d5000000000000000000000000000000000000000000000000000000006000523360045260246000fd5b346102475760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610247576020610974610675611e41565b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102475760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610247576117b3611e41565b6117bb611e64565b73ffffffffffffffffffffffffffffffffffffffff604435916117df8333866121ee565b16913083146102475773ffffffffffffffffffffffffffffffffffffffff16908115610caf578215610c2b57600c5473ffffffffffffffffffffffffffffffffffffffff8160401c1684146118a0575b50816000526000602052604060002054818110610a7957817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209285600052600084520360406000205584600052600082526040600020818154019055604051908152a3602060405160018152f35b600080604051602081019087825267ffffffffffffffff85166040820152604081526118cd606082612098565b51906108015afa3d15611937573d906118e5826120d9565b916118f36040519384612098565b82523d6000602084013e5b15610bf9576060818051810103126102475767ffffffffffffffff60ff61192b93604051610b888161204d565b8111610bcf578361182f565b6060906118fe565b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757610efb60408051906119808183612098565b602082527f48797065724c6971756964436f6d70617469626c65455243323020312e362e3260208301525191829182611dd9565b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610247576020600254604051908152f35b346102475760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757611a27611e41565b73ffffffffffffffffffffffffffffffffffffffff16602435308214610247573315611b2a578115611aa657336000526001602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b346102475760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102475760405160006003548060011c90600181168015611c80575b602083108114610fa157828552908115610f5f5750600114611c2057610efb83610eef81850382612098565b91905060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b916000905b808210611c6657509091508101602001610eef610edf565b919260018160209254838588010152019101909291611c4e565b91607f1691611bf4565b346102475760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361024757817f36372b070000000000000000000000000000000000000000000000000000000060209314908115611daf575b8115611d85575b8115611d5b575b8115611d31575b5015158152f35b7f8fd6a6ac0000000000000000000000000000000000000000000000000000000091501483611d2a565b7f06e278470000000000000000000000000000000000000000000000000000000081149150611d23565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081149150611d1c565b7fe6599b4d0000000000000000000000000000000000000000000000000000000081149150611d15565b9190916020815282519283602083015260005b848110611e2b5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b8060208092840101516040828601015201611dec565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361024757565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361024757565b346102475760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261024757611ebe611e41565b6024359060009133835260016020526040832073ffffffffffffffffffffffffffffffffffffffff83168452602052604083205490808210611f795773ffffffffffffffffffffffffffffffffffffffff9103911691308314611f76573315611b2a578215611aa65760408291338152600160205281812085825260205220556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a360206001604051908152f35b80fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b602060408183019282815284518094520192019060005b8181106120215750505090565b825173ffffffffffffffffffffffffffffffffffffffff16845260209384019390920191600101612014565b6060810190811067ffffffffffffffff82111761206957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761206957604052565b67ffffffffffffffff811161206957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b9190820180921161212057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9061218b73ffffffffffffffffffffffffffffffffffffffff913360005260016020526040600020838516600052602052604060002054612113565b911690308214610247573315611b2a578115611aa657336000526001602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3600190565b73ffffffffffffffffffffffffffffffffffffffff909291921690816000526001602052604060002073ffffffffffffffffffffffffffffffffffffffff8416600052602052604060002054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612269575b50505050565b8082106122eb5773ffffffffffffffffffffffffffffffffffffffff9103921691308314610247578115611b2a578215611aa65760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a338808080612263565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff60065416330361236a57565b7f2b5c74de0000000000000000000000000000000000000000000000000000000060005260046000fd5b519067ffffffffffffffff8216820361024757565b73ffffffffffffffffffffffffffffffffffffffff16801561256857600c5473ffffffffffffffffffffffffffffffffffffffff8160401c16156124c9575b5080600052600060205260406000205491808310612445576020817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926000958587528684520360408620558060025403600255604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152fd5b600080604051602081019082825267ffffffffffffffff85166040820152604081526124f6606082612098565b51906108015afa3d15612560573d9061250e826120d9565b9161251c6040519384612098565b82523d6000602084013e5b15610bf9576060818051810103126102475767ffffffffffffffff60ff61255493604051610b888161204d565b8211610bcf57386123e8565b606090612527565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fd5b80548210156126045760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000818152600b602052604090205480156127c2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811161212057600a54907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820191821161212057818103612753575b505050600a548015612724577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016126e181600a6125ec565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82549160031b1b19169055600a55600052600b60205260006040812055600190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6127aa61276461277593600a6125ec565b90549060031b1c928392600a6125ec565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b9055600052600b6020526040600020553880806126a8565b5050600090565b60008181526009602052604090205480156127c2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811161212057600854907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201918211612120578181036128ba575b5050506008548015612724577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016128778160086125ec565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82549160031b1b19169055600855600052600960205260006040812055600190565b6128dc6128cb6127759360086125ec565b90549060031b1c92839260086125ec565b9055600052600960205260406000205538808061283e565b8060005260096020526040600020541560001461294e57600854680100000000000000008110156120695761293561277582600185940160085560086125ec565b9055600854906000526009602052604060002055600190565b50600090565b80600052600b6020526040600020541560001461294e57600a546801000000000000000081101561206957612995612775826001859401600a55600a6125ec565b9055600a5490600052600b602052604060002055600190565b9060ff8091169116039060ff821161212057565b60ff16604d811161212057600a0a90565b907f00000000000000000000000000000000000000000000000000000000000000009060ff82169060ff811692828414612b1357828411612ae85790612a18916129ae565b91604d60ff8416118015612a80575b612a4a575050612a36906129c2565b908181029181830414901517156121205790565b9091507fa9cb113d0000000000000000000000000000000000000000000000000000000060005260045260245260445260646000fd5b50612a8a836129c2565b8015612ab9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048411612a27565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b612af1916129ae565b91604d60ff841611612a4a575050612b08906129c2565b908115612ab9570490565b505050509056fea164736f6c634300081a000a",
}

var HyperLiquidCompatibleERC20ABI = HyperLiquidCompatibleERC20MetaData.ABI

var HyperLiquidCompatibleERC20Bin = HyperLiquidCompatibleERC20MetaData.Bin

func DeployHyperLiquidCompatibleERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, decimals uint8, maxSupply *big.Int, preMint *big.Int, newOwner common.Address) (common.Address, *types.Transaction, *HyperLiquidCompatibleERC20, error) {
	parsed, err := HyperLiquidCompatibleERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(HyperLiquidCompatibleERC20Bin), backend, name, symbol, decimals, maxSupply, preMint, newOwner)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &HyperLiquidCompatibleERC20{address: address, abi: *parsed, HyperLiquidCompatibleERC20Caller: HyperLiquidCompatibleERC20Caller{contract: contract}, HyperLiquidCompatibleERC20Transactor: HyperLiquidCompatibleERC20Transactor{contract: contract}, HyperLiquidCompatibleERC20Filterer: HyperLiquidCompatibleERC20Filterer{contract: contract}}, nil
}

type HyperLiquidCompatibleERC20 struct {
	address common.Address
	abi     abi.ABI
	HyperLiquidCompatibleERC20Caller
	HyperLiquidCompatibleERC20Transactor
	HyperLiquidCompatibleERC20Filterer
}

type HyperLiquidCompatibleERC20Caller struct {
	contract *bind.BoundContract
}

type HyperLiquidCompatibleERC20Transactor struct {
	contract *bind.BoundContract
}

type HyperLiquidCompatibleERC20Filterer struct {
	contract *bind.BoundContract
}

type HyperLiquidCompatibleERC20Session struct {
	Contract     *HyperLiquidCompatibleERC20
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type HyperLiquidCompatibleERC20CallerSession struct {
	Contract *HyperLiquidCompatibleERC20Caller
	CallOpts bind.CallOpts
}

type HyperLiquidCompatibleERC20TransactorSession struct {
	Contract     *HyperLiquidCompatibleERC20Transactor
	TransactOpts bind.TransactOpts
}

type HyperLiquidCompatibleERC20Raw struct {
	Contract *HyperLiquidCompatibleERC20
}

type HyperLiquidCompatibleERC20CallerRaw struct {
	Contract *HyperLiquidCompatibleERC20Caller
}

type HyperLiquidCompatibleERC20TransactorRaw struct {
	Contract *HyperLiquidCompatibleERC20Transactor
}

func NewHyperLiquidCompatibleERC20(address common.Address, backend bind.ContractBackend) (*HyperLiquidCompatibleERC20, error) {
	abi, err := abi.JSON(strings.NewReader(HyperLiquidCompatibleERC20ABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindHyperLiquidCompatibleERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20{address: address, abi: abi, HyperLiquidCompatibleERC20Caller: HyperLiquidCompatibleERC20Caller{contract: contract}, HyperLiquidCompatibleERC20Transactor: HyperLiquidCompatibleERC20Transactor{contract: contract}, HyperLiquidCompatibleERC20Filterer: HyperLiquidCompatibleERC20Filterer{contract: contract}}, nil
}

func NewHyperLiquidCompatibleERC20Caller(address common.Address, caller bind.ContractCaller) (*HyperLiquidCompatibleERC20Caller, error) {
	contract, err := bindHyperLiquidCompatibleERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20Caller{contract: contract}, nil
}

func NewHyperLiquidCompatibleERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*HyperLiquidCompatibleERC20Transactor, error) {
	contract, err := bindHyperLiquidCompatibleERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20Transactor{contract: contract}, nil
}

func NewHyperLiquidCompatibleERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*HyperLiquidCompatibleERC20Filterer, error) {
	contract, err := bindHyperLiquidCompatibleERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20Filterer{contract: contract}, nil
}

func bindHyperLiquidCompatibleERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := HyperLiquidCompatibleERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HyperLiquidCompatibleERC20.Contract.HyperLiquidCompatibleERC20Caller.contract.Call(opts, result, method, params...)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.HyperLiquidCompatibleERC20Transactor.contract.Transfer(opts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.HyperLiquidCompatibleERC20Transactor.contract.Transact(opts, method, params...)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _HyperLiquidCompatibleERC20.Contract.contract.Call(opts, result, method, params...)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.contract.Transfer(opts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.contract.Transact(opts, method, params...)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _HyperLiquidCompatibleERC20.Contract.Allowance(&_HyperLiquidCompatibleERC20.CallOpts, owner, spender)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _HyperLiquidCompatibleERC20.Contract.Allowance(&_HyperLiquidCompatibleERC20.CallOpts, owner, spender)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _HyperLiquidCompatibleERC20.Contract.BalanceOf(&_HyperLiquidCompatibleERC20.CallOpts, account)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _HyperLiquidCompatibleERC20.Contract.BalanceOf(&_HyperLiquidCompatibleERC20.CallOpts, account)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Decimals() (uint8, error) {
	return _HyperLiquidCompatibleERC20.Contract.Decimals(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) Decimals() (uint8, error) {
	return _HyperLiquidCompatibleERC20.Contract.Decimals(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) GetBurners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "getBurners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) GetBurners() ([]common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.GetBurners(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) GetBurners() ([]common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.GetBurners(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) GetCCIPAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "getCCIPAdmin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) GetCCIPAdmin() (common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.GetCCIPAdmin(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) GetCCIPAdmin() (common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.GetCCIPAdmin(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) GetHyperEVMLinker(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "getHyperEVMLinker")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) GetHyperEVMLinker() (common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.GetHyperEVMLinker(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) GetHyperEVMLinker() (common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.GetHyperEVMLinker(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) GetMinters(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "getMinters")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) GetMinters() ([]common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.GetMinters(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) GetMinters() ([]common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.GetMinters(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) IsBurner(opts *bind.CallOpts, burner common.Address) (bool, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "isBurner", burner)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) IsBurner(burner common.Address) (bool, error) {
	return _HyperLiquidCompatibleERC20.Contract.IsBurner(&_HyperLiquidCompatibleERC20.CallOpts, burner)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) IsBurner(burner common.Address) (bool, error) {
	return _HyperLiquidCompatibleERC20.Contract.IsBurner(&_HyperLiquidCompatibleERC20.CallOpts, burner)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) IsMinter(opts *bind.CallOpts, minter common.Address) (bool, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "isMinter", minter)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) IsMinter(minter common.Address) (bool, error) {
	return _HyperLiquidCompatibleERC20.Contract.IsMinter(&_HyperLiquidCompatibleERC20.CallOpts, minter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) IsMinter(minter common.Address) (bool, error) {
	return _HyperLiquidCompatibleERC20.Contract.IsMinter(&_HyperLiquidCompatibleERC20.CallOpts, minter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) MaxSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "maxSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) MaxSupply() (*big.Int, error) {
	return _HyperLiquidCompatibleERC20.Contract.MaxSupply(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) MaxSupply() (*big.Int, error) {
	return _HyperLiquidCompatibleERC20.Contract.MaxSupply(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Name() (string, error) {
	return _HyperLiquidCompatibleERC20.Contract.Name(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) Name() (string, error) {
	return _HyperLiquidCompatibleERC20.Contract.Name(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Owner() (common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.Owner(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) Owner() (common.Address, error) {
	return _HyperLiquidCompatibleERC20.Contract.Owner(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _HyperLiquidCompatibleERC20.Contract.SupportsInterface(&_HyperLiquidCompatibleERC20.CallOpts, interfaceId)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _HyperLiquidCompatibleERC20.Contract.SupportsInterface(&_HyperLiquidCompatibleERC20.CallOpts, interfaceId)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Symbol() (string, error) {
	return _HyperLiquidCompatibleERC20.Contract.Symbol(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) Symbol() (string, error) {
	return _HyperLiquidCompatibleERC20.Contract.Symbol(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) TotalSupply() (*big.Int, error) {
	return _HyperLiquidCompatibleERC20.Contract.TotalSupply(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _HyperLiquidCompatibleERC20.Contract.TotalSupply(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Caller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _HyperLiquidCompatibleERC20.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) TypeAndVersion() (string, error) {
	return _HyperLiquidCompatibleERC20.Contract.TypeAndVersion(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20CallerSession) TypeAndVersion() (string, error) {
	return _HyperLiquidCompatibleERC20.Contract.TypeAndVersion(&_HyperLiquidCompatibleERC20.CallOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "acceptOwnership")
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) AcceptOwnership() (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.AcceptOwnership(&_HyperLiquidCompatibleERC20.TransactOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.AcceptOwnership(&_HyperLiquidCompatibleERC20.TransactOpts)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "approve", spender, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Approve(&_HyperLiquidCompatibleERC20.TransactOpts, spender, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Approve(&_HyperLiquidCompatibleERC20.TransactOpts, spender, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "burn", amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Burn(amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Burn(&_HyperLiquidCompatibleERC20.TransactOpts, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Burn(&_HyperLiquidCompatibleERC20.TransactOpts, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) Burn0(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "burn0", account, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Burn0(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Burn0(&_HyperLiquidCompatibleERC20.TransactOpts, account, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) Burn0(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Burn0(&_HyperLiquidCompatibleERC20.TransactOpts, account, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "burnFrom", account, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.BurnFrom(&_HyperLiquidCompatibleERC20.TransactOpts, account, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.BurnFrom(&_HyperLiquidCompatibleERC20.TransactOpts, account, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.DecreaseAllowance(&_HyperLiquidCompatibleERC20.TransactOpts, spender, subtractedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.DecreaseAllowance(&_HyperLiquidCompatibleERC20.TransactOpts, spender, subtractedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) DecreaseApproval(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "decreaseApproval", spender, subtractedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) DecreaseApproval(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.DecreaseApproval(&_HyperLiquidCompatibleERC20.TransactOpts, spender, subtractedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) DecreaseApproval(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.DecreaseApproval(&_HyperLiquidCompatibleERC20.TransactOpts, spender, subtractedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) GrantBurnRole(opts *bind.TransactOpts, burner common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "grantBurnRole", burner)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) GrantBurnRole(burner common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.GrantBurnRole(&_HyperLiquidCompatibleERC20.TransactOpts, burner)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) GrantBurnRole(burner common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.GrantBurnRole(&_HyperLiquidCompatibleERC20.TransactOpts, burner)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) GrantMintAndBurnRoles(opts *bind.TransactOpts, burnAndMinter common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "grantMintAndBurnRoles", burnAndMinter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) GrantMintAndBurnRoles(burnAndMinter common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.GrantMintAndBurnRoles(&_HyperLiquidCompatibleERC20.TransactOpts, burnAndMinter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) GrantMintAndBurnRoles(burnAndMinter common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.GrantMintAndBurnRoles(&_HyperLiquidCompatibleERC20.TransactOpts, burnAndMinter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) GrantMintRole(opts *bind.TransactOpts, minter common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "grantMintRole", minter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) GrantMintRole(minter common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.GrantMintRole(&_HyperLiquidCompatibleERC20.TransactOpts, minter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) GrantMintRole(minter common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.GrantMintRole(&_HyperLiquidCompatibleERC20.TransactOpts, minter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.IncreaseAllowance(&_HyperLiquidCompatibleERC20.TransactOpts, spender, addedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.IncreaseAllowance(&_HyperLiquidCompatibleERC20.TransactOpts, spender, addedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) IncreaseApproval(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "increaseApproval", spender, addedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) IncreaseApproval(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.IncreaseApproval(&_HyperLiquidCompatibleERC20.TransactOpts, spender, addedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) IncreaseApproval(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.IncreaseApproval(&_HyperLiquidCompatibleERC20.TransactOpts, spender, addedValue)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) Mint(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "mint", account, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Mint(&_HyperLiquidCompatibleERC20.TransactOpts, account, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Mint(&_HyperLiquidCompatibleERC20.TransactOpts, account, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) RevokeBurnRole(opts *bind.TransactOpts, burner common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "revokeBurnRole", burner)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) RevokeBurnRole(burner common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.RevokeBurnRole(&_HyperLiquidCompatibleERC20.TransactOpts, burner)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) RevokeBurnRole(burner common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.RevokeBurnRole(&_HyperLiquidCompatibleERC20.TransactOpts, burner)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) RevokeMintRole(opts *bind.TransactOpts, minter common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "revokeMintRole", minter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) RevokeMintRole(minter common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.RevokeMintRole(&_HyperLiquidCompatibleERC20.TransactOpts, minter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) RevokeMintRole(minter common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.RevokeMintRole(&_HyperLiquidCompatibleERC20.TransactOpts, minter)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) SetCCIPAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "setCCIPAdmin", newAdmin)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) SetCCIPAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.SetCCIPAdmin(&_HyperLiquidCompatibleERC20.TransactOpts, newAdmin)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) SetCCIPAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.SetCCIPAdmin(&_HyperLiquidCompatibleERC20.TransactOpts, newAdmin)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) SetHyperEVMLinker(opts *bind.TransactOpts, newLinker common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "setHyperEVMLinker", newLinker)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) SetHyperEVMLinker(newLinker common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.SetHyperEVMLinker(&_HyperLiquidCompatibleERC20.TransactOpts, newLinker)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) SetHyperEVMLinker(newLinker common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.SetHyperEVMLinker(&_HyperLiquidCompatibleERC20.TransactOpts, newLinker)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) SetRemoteToken(opts *bind.TransactOpts, hipTokenId uint64, remoteTokenDecimals uint8) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "setRemoteToken", hipTokenId, remoteTokenDecimals)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) SetRemoteToken(hipTokenId uint64, remoteTokenDecimals uint8) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.SetRemoteToken(&_HyperLiquidCompatibleERC20.TransactOpts, hipTokenId, remoteTokenDecimals)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) SetRemoteToken(hipTokenId uint64, remoteTokenDecimals uint8) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.SetRemoteToken(&_HyperLiquidCompatibleERC20.TransactOpts, hipTokenId, remoteTokenDecimals)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "transfer", to, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Transfer(&_HyperLiquidCompatibleERC20.TransactOpts, to, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.Transfer(&_HyperLiquidCompatibleERC20.TransactOpts, to, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.TransferFrom(&_HyperLiquidCompatibleERC20.TransactOpts, from, to, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.TransferFrom(&_HyperLiquidCompatibleERC20.TransactOpts, from, to, amount)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Transactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.contract.Transact(opts, "transferOwnership", to)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Session) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.TransferOwnership(&_HyperLiquidCompatibleERC20.TransactOpts, to)
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20TransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _HyperLiquidCompatibleERC20.Contract.TransferOwnership(&_HyperLiquidCompatibleERC20.TransactOpts, to)
}

type HyperLiquidCompatibleERC20ApprovalIterator struct {
	Event *HyperLiquidCompatibleERC20Approval

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20ApprovalIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20ApprovalIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*HyperLiquidCompatibleERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20ApprovalIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20Approval)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseApproval(log types.Log) (*HyperLiquidCompatibleERC20Approval, error) {
	event := new(HyperLiquidCompatibleERC20Approval)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20BurnAccessGrantedIterator struct {
	Event *HyperLiquidCompatibleERC20BurnAccessGranted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20BurnAccessGrantedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20BurnAccessGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20BurnAccessGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20BurnAccessGrantedIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20BurnAccessGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20BurnAccessGranted struct {
	Burner common.Address
	Raw    types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterBurnAccessGranted(opts *bind.FilterOpts) (*HyperLiquidCompatibleERC20BurnAccessGrantedIterator, error) {

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "BurnAccessGranted")
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20BurnAccessGrantedIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "BurnAccessGranted", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchBurnAccessGranted(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20BurnAccessGranted) (event.Subscription, error) {

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "BurnAccessGranted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20BurnAccessGranted)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "BurnAccessGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseBurnAccessGranted(log types.Log) (*HyperLiquidCompatibleERC20BurnAccessGranted, error) {
	event := new(HyperLiquidCompatibleERC20BurnAccessGranted)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "BurnAccessGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20BurnAccessRevokedIterator struct {
	Event *HyperLiquidCompatibleERC20BurnAccessRevoked

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20BurnAccessRevokedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20BurnAccessRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20BurnAccessRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20BurnAccessRevokedIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20BurnAccessRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20BurnAccessRevoked struct {
	Burner common.Address
	Raw    types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterBurnAccessRevoked(opts *bind.FilterOpts) (*HyperLiquidCompatibleERC20BurnAccessRevokedIterator, error) {

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "BurnAccessRevoked")
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20BurnAccessRevokedIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "BurnAccessRevoked", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchBurnAccessRevoked(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20BurnAccessRevoked) (event.Subscription, error) {

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "BurnAccessRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20BurnAccessRevoked)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "BurnAccessRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseBurnAccessRevoked(log types.Log) (*HyperLiquidCompatibleERC20BurnAccessRevoked, error) {
	event := new(HyperLiquidCompatibleERC20BurnAccessRevoked)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "BurnAccessRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20CCIPAdminTransferredIterator struct {
	Event *HyperLiquidCompatibleERC20CCIPAdminTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20CCIPAdminTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20CCIPAdminTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20CCIPAdminTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20CCIPAdminTransferredIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20CCIPAdminTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20CCIPAdminTransferred struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterCCIPAdminTransferred(opts *bind.FilterOpts, previousAdmin []common.Address, newAdmin []common.Address) (*HyperLiquidCompatibleERC20CCIPAdminTransferredIterator, error) {

	var previousAdminRule []interface{}
	for _, previousAdminItem := range previousAdmin {
		previousAdminRule = append(previousAdminRule, previousAdminItem)
	}
	var newAdminRule []interface{}
	for _, newAdminItem := range newAdmin {
		newAdminRule = append(newAdminRule, newAdminItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "CCIPAdminTransferred", previousAdminRule, newAdminRule)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20CCIPAdminTransferredIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "CCIPAdminTransferred", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchCCIPAdminTransferred(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20CCIPAdminTransferred, previousAdmin []common.Address, newAdmin []common.Address) (event.Subscription, error) {

	var previousAdminRule []interface{}
	for _, previousAdminItem := range previousAdmin {
		previousAdminRule = append(previousAdminRule, previousAdminItem)
	}
	var newAdminRule []interface{}
	for _, newAdminItem := range newAdmin {
		newAdminRule = append(newAdminRule, newAdminItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "CCIPAdminTransferred", previousAdminRule, newAdminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20CCIPAdminTransferred)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "CCIPAdminTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseCCIPAdminTransferred(log types.Log) (*HyperLiquidCompatibleERC20CCIPAdminTransferred, error) {
	event := new(HyperLiquidCompatibleERC20CCIPAdminTransferred)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "CCIPAdminTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20HyperEVMLinkerSetIterator struct {
	Event *HyperLiquidCompatibleERC20HyperEVMLinkerSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20HyperEVMLinkerSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20HyperEVMLinkerSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20HyperEVMLinkerSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20HyperEVMLinkerSetIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20HyperEVMLinkerSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20HyperEVMLinkerSet struct {
	HyperEVMLinker common.Address
	Raw            types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterHyperEVMLinkerSet(opts *bind.FilterOpts, hyperEVMLinker []common.Address) (*HyperLiquidCompatibleERC20HyperEVMLinkerSetIterator, error) {

	var hyperEVMLinkerRule []interface{}
	for _, hyperEVMLinkerItem := range hyperEVMLinker {
		hyperEVMLinkerRule = append(hyperEVMLinkerRule, hyperEVMLinkerItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "HyperEVMLinkerSet", hyperEVMLinkerRule)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20HyperEVMLinkerSetIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "HyperEVMLinkerSet", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchHyperEVMLinkerSet(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20HyperEVMLinkerSet, hyperEVMLinker []common.Address) (event.Subscription, error) {

	var hyperEVMLinkerRule []interface{}
	for _, hyperEVMLinkerItem := range hyperEVMLinker {
		hyperEVMLinkerRule = append(hyperEVMLinkerRule, hyperEVMLinkerItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "HyperEVMLinkerSet", hyperEVMLinkerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20HyperEVMLinkerSet)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "HyperEVMLinkerSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseHyperEVMLinkerSet(log types.Log) (*HyperLiquidCompatibleERC20HyperEVMLinkerSet, error) {
	event := new(HyperLiquidCompatibleERC20HyperEVMLinkerSet)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "HyperEVMLinkerSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20MintAccessGrantedIterator struct {
	Event *HyperLiquidCompatibleERC20MintAccessGranted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20MintAccessGrantedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20MintAccessGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20MintAccessGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20MintAccessGrantedIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20MintAccessGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20MintAccessGranted struct {
	Minter common.Address
	Raw    types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterMintAccessGranted(opts *bind.FilterOpts) (*HyperLiquidCompatibleERC20MintAccessGrantedIterator, error) {

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "MintAccessGranted")
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20MintAccessGrantedIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "MintAccessGranted", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchMintAccessGranted(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20MintAccessGranted) (event.Subscription, error) {

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "MintAccessGranted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20MintAccessGranted)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "MintAccessGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseMintAccessGranted(log types.Log) (*HyperLiquidCompatibleERC20MintAccessGranted, error) {
	event := new(HyperLiquidCompatibleERC20MintAccessGranted)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "MintAccessGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20MintAccessRevokedIterator struct {
	Event *HyperLiquidCompatibleERC20MintAccessRevoked

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20MintAccessRevokedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20MintAccessRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20MintAccessRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20MintAccessRevokedIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20MintAccessRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20MintAccessRevoked struct {
	Minter common.Address
	Raw    types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterMintAccessRevoked(opts *bind.FilterOpts) (*HyperLiquidCompatibleERC20MintAccessRevokedIterator, error) {

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "MintAccessRevoked")
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20MintAccessRevokedIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "MintAccessRevoked", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchMintAccessRevoked(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20MintAccessRevoked) (event.Subscription, error) {

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "MintAccessRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20MintAccessRevoked)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "MintAccessRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseMintAccessRevoked(log types.Log) (*HyperLiquidCompatibleERC20MintAccessRevoked, error) {
	event := new(HyperLiquidCompatibleERC20MintAccessRevoked)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "MintAccessRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20OwnershipTransferRequestedIterator struct {
	Event *HyperLiquidCompatibleERC20OwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20OwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20OwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20OwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20OwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20OwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20OwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*HyperLiquidCompatibleERC20OwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20OwnershipTransferRequestedIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20OwnershipTransferRequested)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseOwnershipTransferRequested(log types.Log) (*HyperLiquidCompatibleERC20OwnershipTransferRequested, error) {
	event := new(HyperLiquidCompatibleERC20OwnershipTransferRequested)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20OwnershipTransferredIterator struct {
	Event *HyperLiquidCompatibleERC20OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20OwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*HyperLiquidCompatibleERC20OwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20OwnershipTransferredIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20OwnershipTransferred)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseOwnershipTransferred(log types.Log) (*HyperLiquidCompatibleERC20OwnershipTransferred, error) {
	event := new(HyperLiquidCompatibleERC20OwnershipTransferred)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20RemoteTokenSetIterator struct {
	Event *HyperLiquidCompatibleERC20RemoteTokenSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20RemoteTokenSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20RemoteTokenSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20RemoteTokenSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20RemoteTokenSetIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20RemoteTokenSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20RemoteTokenSet struct {
	RemoteTokenId       uint64
	RemoteToken         common.Address
	RemoteTokenDecimals uint8
	Raw                 types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterRemoteTokenSet(opts *bind.FilterOpts, remoteTokenId []uint64, remoteToken []common.Address, remoteTokenDecimals []uint8) (*HyperLiquidCompatibleERC20RemoteTokenSetIterator, error) {

	var remoteTokenIdRule []interface{}
	for _, remoteTokenIdItem := range remoteTokenId {
		remoteTokenIdRule = append(remoteTokenIdRule, remoteTokenIdItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var remoteTokenDecimalsRule []interface{}
	for _, remoteTokenDecimalsItem := range remoteTokenDecimals {
		remoteTokenDecimalsRule = append(remoteTokenDecimalsRule, remoteTokenDecimalsItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "RemoteTokenSet", remoteTokenIdRule, remoteTokenRule, remoteTokenDecimalsRule)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20RemoteTokenSetIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "RemoteTokenSet", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchRemoteTokenSet(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20RemoteTokenSet, remoteTokenId []uint64, remoteToken []common.Address, remoteTokenDecimals []uint8) (event.Subscription, error) {

	var remoteTokenIdRule []interface{}
	for _, remoteTokenIdItem := range remoteTokenId {
		remoteTokenIdRule = append(remoteTokenIdRule, remoteTokenIdItem)
	}
	var remoteTokenRule []interface{}
	for _, remoteTokenItem := range remoteToken {
		remoteTokenRule = append(remoteTokenRule, remoteTokenItem)
	}
	var remoteTokenDecimalsRule []interface{}
	for _, remoteTokenDecimalsItem := range remoteTokenDecimals {
		remoteTokenDecimalsRule = append(remoteTokenDecimalsRule, remoteTokenDecimalsItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "RemoteTokenSet", remoteTokenIdRule, remoteTokenRule, remoteTokenDecimalsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20RemoteTokenSet)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "RemoteTokenSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseRemoteTokenSet(log types.Log) (*HyperLiquidCompatibleERC20RemoteTokenSet, error) {
	event := new(HyperLiquidCompatibleERC20RemoteTokenSet)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "RemoteTokenSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type HyperLiquidCompatibleERC20TransferIterator struct {
	Event *HyperLiquidCompatibleERC20Transfer

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *HyperLiquidCompatibleERC20TransferIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HyperLiquidCompatibleERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(HyperLiquidCompatibleERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *HyperLiquidCompatibleERC20TransferIterator) Error() error {
	return it.fail
}

func (it *HyperLiquidCompatibleERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type HyperLiquidCompatibleERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*HyperLiquidCompatibleERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &HyperLiquidCompatibleERC20TransferIterator{contract: _HyperLiquidCompatibleERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _HyperLiquidCompatibleERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(HyperLiquidCompatibleERC20Transfer)
				if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20Filterer) ParseTransfer(log types.Log) (*HyperLiquidCompatibleERC20Transfer, error) {
	event := new(HyperLiquidCompatibleERC20Transfer)
	if err := _HyperLiquidCompatibleERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (HyperLiquidCompatibleERC20Approval) Topic() common.Hash {
	return common.HexToHash("0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925")
}

func (HyperLiquidCompatibleERC20BurnAccessGranted) Topic() common.Hash {
	return common.HexToHash("0x92308bb7573b2a3d17ddb868b39d8ebec433f3194421abc22d084f89658c9bad")
}

func (HyperLiquidCompatibleERC20BurnAccessRevoked) Topic() common.Hash {
	return common.HexToHash("0x0a675452746933cefe3d74182e78db7afe57ba60eaa4234b5d85e9aa41b0610c")
}

func (HyperLiquidCompatibleERC20CCIPAdminTransferred) Topic() common.Hash {
	return common.HexToHash("0x9524c9e4b0b61eb018dd58a1cd856e3e74009528328ab4a613b434fa631d7242")
}

func (HyperLiquidCompatibleERC20HyperEVMLinkerSet) Topic() common.Hash {
	return common.HexToHash("0x58dc48d21bdfdfd38a14ec5c284648779a185303f99274a36e229247ad554b00")
}

func (HyperLiquidCompatibleERC20MintAccessGranted) Topic() common.Hash {
	return common.HexToHash("0xe46fef8bbff1389d9010703cf8ebb363fb3daf5bf56edc27080b67bc8d9251ea")
}

func (HyperLiquidCompatibleERC20MintAccessRevoked) Topic() common.Hash {
	return common.HexToHash("0xed998b960f6340d045f620c119730f7aa7995e7425c2401d3a5b64ff998a59e9")
}

func (HyperLiquidCompatibleERC20OwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (HyperLiquidCompatibleERC20OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (HyperLiquidCompatibleERC20RemoteTokenSet) Topic() common.Hash {
	return common.HexToHash("0xdfe07d71cc59385f4636a8fcd2903aef349e9d53bef3f028b1417c16cd48c2be")
}

func (HyperLiquidCompatibleERC20Transfer) Topic() common.Hash {
	return common.HexToHash("0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef")
}

func (_HyperLiquidCompatibleERC20 *HyperLiquidCompatibleERC20) Address() common.Address {
	return _HyperLiquidCompatibleERC20.address
}

type HyperLiquidCompatibleERC20Interface interface {
	Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error)

	BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error)

	Decimals(opts *bind.CallOpts) (uint8, error)

	GetBurners(opts *bind.CallOpts) ([]common.Address, error)

	GetCCIPAdmin(opts *bind.CallOpts) (common.Address, error)

	GetHyperEVMLinker(opts *bind.CallOpts) (common.Address, error)

	GetMinters(opts *bind.CallOpts) ([]common.Address, error)

	IsBurner(opts *bind.CallOpts, burner common.Address) (bool, error)

	IsMinter(opts *bind.CallOpts, minter common.Address) (bool, error)

	MaxSupply(opts *bind.CallOpts) (*big.Int, error)

	Name(opts *bind.CallOpts) (string, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error)

	Symbol(opts *bind.CallOpts) (string, error)

	TotalSupply(opts *bind.CallOpts) (*big.Int, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error)

	Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error)

	Burn0(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error)

	BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error)

	DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error)

	DecreaseApproval(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error)

	GrantBurnRole(opts *bind.TransactOpts, burner common.Address) (*types.Transaction, error)

	GrantMintAndBurnRoles(opts *bind.TransactOpts, burnAndMinter common.Address) (*types.Transaction, error)

	GrantMintRole(opts *bind.TransactOpts, minter common.Address) (*types.Transaction, error)

	IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error)

	IncreaseApproval(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error)

	Mint(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error)

	RevokeBurnRole(opts *bind.TransactOpts, burner common.Address) (*types.Transaction, error)

	RevokeMintRole(opts *bind.TransactOpts, minter common.Address) (*types.Transaction, error)

	SetCCIPAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error)

	SetHyperEVMLinker(opts *bind.TransactOpts, newLinker common.Address) (*types.Transaction, error)

	SetRemoteToken(opts *bind.TransactOpts, hipTokenId uint64, remoteTokenDecimals uint8) (*types.Transaction, error)

	Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error)

	TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*HyperLiquidCompatibleERC20ApprovalIterator, error)

	WatchApproval(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error)

	ParseApproval(log types.Log) (*HyperLiquidCompatibleERC20Approval, error)

	FilterBurnAccessGranted(opts *bind.FilterOpts) (*HyperLiquidCompatibleERC20BurnAccessGrantedIterator, error)

	WatchBurnAccessGranted(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20BurnAccessGranted) (event.Subscription, error)

	ParseBurnAccessGranted(log types.Log) (*HyperLiquidCompatibleERC20BurnAccessGranted, error)

	FilterBurnAccessRevoked(opts *bind.FilterOpts) (*HyperLiquidCompatibleERC20BurnAccessRevokedIterator, error)

	WatchBurnAccessRevoked(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20BurnAccessRevoked) (event.Subscription, error)

	ParseBurnAccessRevoked(log types.Log) (*HyperLiquidCompatibleERC20BurnAccessRevoked, error)

	FilterCCIPAdminTransferred(opts *bind.FilterOpts, previousAdmin []common.Address, newAdmin []common.Address) (*HyperLiquidCompatibleERC20CCIPAdminTransferredIterator, error)

	WatchCCIPAdminTransferred(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20CCIPAdminTransferred, previousAdmin []common.Address, newAdmin []common.Address) (event.Subscription, error)

	ParseCCIPAdminTransferred(log types.Log) (*HyperLiquidCompatibleERC20CCIPAdminTransferred, error)

	FilterHyperEVMLinkerSet(opts *bind.FilterOpts, hyperEVMLinker []common.Address) (*HyperLiquidCompatibleERC20HyperEVMLinkerSetIterator, error)

	WatchHyperEVMLinkerSet(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20HyperEVMLinkerSet, hyperEVMLinker []common.Address) (event.Subscription, error)

	ParseHyperEVMLinkerSet(log types.Log) (*HyperLiquidCompatibleERC20HyperEVMLinkerSet, error)

	FilterMintAccessGranted(opts *bind.FilterOpts) (*HyperLiquidCompatibleERC20MintAccessGrantedIterator, error)

	WatchMintAccessGranted(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20MintAccessGranted) (event.Subscription, error)

	ParseMintAccessGranted(log types.Log) (*HyperLiquidCompatibleERC20MintAccessGranted, error)

	FilterMintAccessRevoked(opts *bind.FilterOpts) (*HyperLiquidCompatibleERC20MintAccessRevokedIterator, error)

	WatchMintAccessRevoked(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20MintAccessRevoked) (event.Subscription, error)

	ParseMintAccessRevoked(log types.Log) (*HyperLiquidCompatibleERC20MintAccessRevoked, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*HyperLiquidCompatibleERC20OwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20OwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*HyperLiquidCompatibleERC20OwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*HyperLiquidCompatibleERC20OwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20OwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*HyperLiquidCompatibleERC20OwnershipTransferred, error)

	FilterRemoteTokenSet(opts *bind.FilterOpts, remoteTokenId []uint64, remoteToken []common.Address, remoteTokenDecimals []uint8) (*HyperLiquidCompatibleERC20RemoteTokenSetIterator, error)

	WatchRemoteTokenSet(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20RemoteTokenSet, remoteTokenId []uint64, remoteToken []common.Address, remoteTokenDecimals []uint8) (event.Subscription, error)

	ParseRemoteTokenSet(log types.Log) (*HyperLiquidCompatibleERC20RemoteTokenSet, error)

	FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*HyperLiquidCompatibleERC20TransferIterator, error)

	WatchTransfer(opts *bind.WatchOpts, sink chan<- *HyperLiquidCompatibleERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseTransfer(log types.Log) (*HyperLiquidCompatibleERC20Transfer, error)

	Address() common.Address
}
