// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.



package ether_sender_receiver

var Metadata = "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"type\":\"error\",\"name\":\"InvalidRouter\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gotToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedToken\",\"type\":\"address\"}],\"type\":\"error\",\"name\":\"InvalidToken\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gotAmounts\",\"type\":\"uint256\"}],\"type\":\"error\",\"name\":\"InvalidTokenAmounts\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gotAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"type\":\"error\",\"name\":\"TokenAmountNotEqualToMsgValue\"},{\"inputs\":[{\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ccipReceive\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"struct Client.EVM2AnyMessage\",\"name\":\"message\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}]},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"ccipSend\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}]},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"struct Client.EVM2AnyMessage\",\"name\":\"message\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\",\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}]},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"i_weth\",\"outputs\":[{\"internalType\":\"contract IWrappedNative\",\"name\":\"\",\"type\":\"address\"}]},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}]},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter.\",\"params\":{\"message\":\"CCIP Message.\"}},\"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"params\":{\"destinationChainSelector\":\"The destination chain selector.\",\"message\":\"The CCIP message with the following fields correctly set: - bytes receiver: The _contract_ address on the destination chain that will receive the wrapped ether. The caller must ensure that this contract address is correct, otherwise funds may be lost forever. - address feeToken: The fee token address. Must be address(0) for native tokens, or a supported CCIP fee token otherwise (i.e, LINK token). In the event a feeToken is set, we will transferFrom the caller the fee amount before sending the message, in order to forward them to the router. - EVMTokenAmount[] tokenAmounts: The tokenAmounts array must contain a single element with the following fields:   - uint256 amount: The amount of ether to send. There are a couple of cases here that depend on the fee token specified: 1. If feeToken == address(0), the fee must be included in msg.value. Therefore tokenAmounts[0].amount must be less than msg.value,    and the difference will be used as the fee. 2. If feeToken != address(0), the fee is not included in msg.value, and tokenAmounts[0].amount must be equal to msg.value.    these fees to the CCIP router.\"},\"returns\":{\"_0\":\"messageId The CCIP message ID.\"}},\"constructor\":{\"params\":{\"router\":\"The CCIP router address.\"}},\"getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"details\":\"Reverts with appropriate reason upon invalid message.\",\"params\":{\"destinationChainSelector\":\"The destination chainSelector.\",\"message\":\"The cross-chain CCIP message including data and/or tokens.\"},\"returns\":{\"fee\":\"returns execution fee for the message delivery to destination chain, denominated  in the feeToken specified in the message.\"}},\"getRouter()\":{\"returns\":{\"_0\":\"CCIP router address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver. e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. - If this returns false or reverts, only tokens are transferred to the receiver. - If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check.\"},\"returns\":{\"_0\":\"true if the interfaceId is supported.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"notice\":\"Send raw native tokens cross-chain.\"},\"getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"notice\":\"Get the fee for sending a message to a destination chain. This is mirrored from the router for convenience, construct the appropriate message and get it's fee.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"i_weth()\":{\"notice\":\"The wrapped native token address.\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId.\"}},\"version\":1}},\"settings\":{\"remappings\":[\"@chainlink/=node_modules/@chainlink/contracts/src/v0.8/\",\"forge-std/=node_modules/@chainlink/contracts/src/v0.8/vendor/forge-std/src/\"],\"optimizer\":{\"enabled\":true,\"runs\":80000},\"metadata\":{\"bytecodeHash\":\"none\"},\"compilationTarget\":{\"contracts/applications/EtherSenderReceiver.sol\":\"EtherSenderReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"viaIR\":true},\"sources\":{\"contracts/applications/CCIPReceiver.sol\":{\"keccak256\":\"0x1de77fd2dbc9d60cc6d2c0f9f61aa3be6c598b006224ab395788f7d8218f5f18\",\"urls\":[\"bzz-raw://0d1c34ade396c078f69585de40b4cabf21df03c402205ca0e01357dee53b1b2b\",\"dweb:/ipfs/QmWFYyDDkznto55L8if5HWuFuKujDm9CiKPS337aYv6dJA\"],\"license\":\"MIT\"},\"contracts/applications/EtherSenderReceiver.sol\":{\"keccak256\":\"0xdbdc6d80b8eabbab204dab766662610600f68aad48254957c8083233e0a7e967\",\"urls\":[\"bzz-raw://933b91453c1385b058bbe37a1ea90adc1e177bc97f3c4ce3fd36aa9c2b7f176f\",\"dweb:/ipfs/QmYFx5YQikciuCV1WEK3BpA3q7D8MfMo3y8i5jFiXc53py\"],\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAny2EVMMessageReceiver.sol\":{\"keccak256\":\"0x8f67554db88baee2d8facee3320fb85fd566f843b9e4bdb6870eafe1637d7919\",\"urls\":[\"bzz-raw://4fb75a68a7a53c0d2d444f996b60b77f329c6e25e96d695f6b6219eb92baebc5\",\"dweb:/ipfs/QmWCaGFSHSx17TgDou3EX2yuofPQnmkiuGX3isUmfHe3mb\"],\"license\":\"MIT\"},\"contracts/interfaces/IRouterClient.sol\":{\"keccak256\":\"0x21280104a988eb7022f8968b1672bafba80a74e59f5512415009dff9a37be46a\",\"urls\":[\"bzz-raw://1bbcde3e9cd0c60f540ec0f2bbd70724cd6c9650428a1fade8c0589ef163d6ca\",\"dweb:/ipfs/QmajfuurMHa1SKWVVXsydeKuPCGzXkKtRUi2HW5EA7p6gr\"],\"license\":\"MIT\"},\"contracts/interfaces/IWrappedNative.sol\":{\"keccak256\":\"0x8a4c6ca35185fad0ff43888f2444babccf0a352e8eae87a0908d4e403068f618\",\"urls\":[\"bzz-raw://2a13f30c12a05c04a94598241f6962bbe0c4e01a51f92e3abc33e2c8ec0d1541\",\"dweb:/ipfs/QmYnhj8Khg8NC5NLuHe6Ssh7QaipzMd7VrPuXa9B2PxTiU\"],\"license\":\"MIT\"},\"contracts/libraries/Client.sol\":{\"keccak256\":\"0x1c9d389d76ac9f1a959858d4c48b94f3b4c8a955cd7fbb95532597947438cafc\",\"urls\":[\"bzz-raw://6c203e9b1ebee843b1878d52e80fa28041cf85763e6cd71d58f6110157c571c1\",\"dweb:/ipfs/QmRhBicPMVyi4iCpZVE5Zn2sZuAgEPKjWPerXe6ZLNSUcG\"],\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/shared/interfaces/ITypeAndVersion.sol\":{\"keccak256\":\"0xf5827cb463c01d055021684d04f9186391c2d9ac850e0d0819f76140e4fc84ed\",\"urls\":[\"bzz-raw://a19c7bae07330e6d7904a0a21cf0ab0067ef096b66c1653a2e012801a931c5b9\",\"dweb:/ipfs/QmckpvSuLx8UL8zfVzAtN6ZRxyXHUSVqqz2JwYZ2jrK58h\"],\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"urls\":[\"bzz-raw://6828dfa867eaff18f383aad4ca4b5aaedb93109023d74aaf418fee6c06e556c2\",\"dweb:/ipfs/QmXSQ9WnaJ6Ba9gvKvgNxDY7sa7ATJ9V55uwGSGCpBuJKu\"],\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0x28d267ba89cbaca4a86577add59f1a18842ca6e7d80a05f3dbf52127928a5e2c\",\"urls\":[\"bzz-raw://67a26777e88ae78952713f4479ca3126db804dc9ce1a85f079ec067393a6275d\",\"dweb:/ipfs/QmNLxBkkA6os8W9vUeCsjcFsMkGhtqAZrGjPuoACTqVhbh\"],\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x19d64e8f5fa895ab2625917111fd9f316d4f9314239f0712fd6dc2f5bff9d0c9\",\"urls\":[\"bzz-raw://14de158ff9e64ebeac381bba59fe3500b48853063cfb27343090a3f710795fee\",\"dweb:/ipfs/QmQJE5SfDfgy8aKENnsjW4t9P4bmTSnujotFmnXnrwpfzQ\"],\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Address.sol\":{\"keccak256\":\"0x172a09a55d730f20a9bb309086a4ad06b17c612151f58bab2b44efe78d583d4e\",\"urls\":[\"bzz-raw://1f812456ddd112f09606bfc5965c6e643558d740264273017ad556122502b4e2\",\"dweb:/ipfs/QmdWE4wncanz9Lhu5ESgSo14jAR74Ss5puCM5zUGonATLw\"],\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"],\"license\":\"MIT\"}},\"version\":1}"
