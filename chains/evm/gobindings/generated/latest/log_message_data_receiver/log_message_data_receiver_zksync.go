// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.
package log_message_data_receiver

import (
	"context"
	"crypto/rand"
	"fmt"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/zksync-sdk/zksync2-go/accounts"
	"github.com/zksync-sdk/zksync2-go/clients"
	"github.com/zksync-sdk/zksync2-go/types"
)

func DeployLogMessageDataReceiverZk(deployOpts *accounts.TransactOpts, client *clients.Client, wallet *accounts.Wallet, backend bind.ContractBackend, args ...interface{}) (common.Address, *types.Receipt, *LogMessageDataReceiver, error) {
	var calldata []byte
	if len(args) > 0 {
		abi, err := LogMessageDataReceiverMetaData.GetAbi()
		if err != nil {
			return common.Address{}, nil, nil, err
		}
		calldata, err = abi.Pack("", args...)
		if err != nil {
			return common.Address{}, nil, nil, err
		}
	}

	salt := make([]byte, 32)
	n, err := rand.Read(salt)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if n != len(salt) {
		return common.Address{}, nil, nil, fmt.Errorf("failed to read random bytes: expected %d, got %d", len(salt), n)
	}

	txHash, err := wallet.Deploy(deployOpts, accounts.Create2Transaction{
		Bytecode: ZkBytecode,
		Calldata: calldata,
		Salt:     salt,
	})
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	receipt, err := client.WaitMined(context.Background(), txHash)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address := receipt.ContractAddress
	contract, err := NewLogMessageDataReceiver(address, backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	return address, receipt, contract, nil
}

var ZkBytecode = common.Hex2Bytes("0000008003000039000000400030043f0000000100200190000000210000c13d00000060021002700000002a02200197000000040020008c0000009e0000413d000000000301043b000000e0033002700000002c0030009c000000290000613d0000002d0030009c0000008e0000613d0000002e0030009c0000009e0000c13d000000240020008c0000009e0000413d0000000002000416000000000002004b0000009e0000c13d0000000401100370000000000101043b00000038001001980000009e0000c13d000000390010009c000000000200003900000001020060390000003a0010009c00000001022061bf000000800020043f0000003b01000041000000a60001042e0000000001000416000000000001004b0000009e0000c13d0000002001000039000001000010044300000120000004430000002b01000041000000a60001042e000000240020008c0000009e0000413d0000000003000416000000000003004b0000009e0000c13d0000000403100370000000000303043b0000002f0030009c0000009e0000213d0000000005320049000000300050009c0000009e0000213d000000a40050008c0000009e0000413d0000006404300039000000000441034f000000000404043b000000230550008a00000031064001970000003107500197000000000876013f000000000076004b00000000060000190000003106004041000000000054004b00000000050000190000003105008041000000310080009c000000000605c019000000000006004b0000009e0000c13d00000000053400190000000404500039000000000341034f000000000303043b0000002f0030009c0000009e0000213d00000000023200490000002405500039000000000025004b0000000006000019000000310600204100000031022001970000003105500197000000000725013f000000000025004b00000000020000190000003102004041000000310070009c000000000206c019000000000002004b0000009e0000c13d0000002002000039000000800020043f0000002002400039000000000421034f000000a00030043f0000003c053001980000001f0630018f000000c0025000390000006c0000613d000000c007000039000000000804034f000000008908043c0000000007970436000000000027004b000000680000c13d000000000006004b000000790000613d000000000454034f0000000305600210000000000602043300000000065601cf000000000656022f000000000404043b0000010005500089000000000454022f00000000045401cf000000000464019f0000000000420435000000c00230003900000000000204350000001f023000390000003c012001970000006002100210000000320220009a000000330010009c000000340200804100000000010004140000002a0010009c0000002a01008041000000c00110021000000000012100190000800d020000390000000103000039000000350400004100a500a00000040f00000001002001900000009e0000613d0000000001000019000000a60001042e0000000001000416000000000001004b0000009e0000c13d000000c001000039000000400010043f0000001c01000039000000800010043f0000003602000041000000a00020043f0000002003000039000000c00030043f000000e00010043f000001000020043f0000011c0000043f0000003701000041000000a60001042e0000000001000019000000a700010430000000a3002104210000000102000039000000000001042d0000000002000019000000000001042d000000a500000432000000a60001042e000000a70001043000000000000000000000000000000000000000000000000000000000ffffffff00000002000000000000000000000000000000400000010000000000000000000000000000000000000000000000000000000000000000000000000085572ffb00000000000000000000000000000000000000000000000000000000181f5a770000000000000000000000000000000000000000000000000000000001ffc9a7000000000000000000000000000000000000000000000000ffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000fdffffffffffffffffffffffffffffffffffffbfffffff80000000000000000000000000000000000000000000000000000000000000000000000000ffffffc002000000000000000000000000000000ffffffff0000008000000000000000004b3be2c5d6fcecc68e42c0268adeed4f145b0b4a6cbd5960dcdd39867bef682f4c6f674d65737361676544617461526563656976657220312e302e30000000000000000000000000000000000000000000000060000000c0000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff01ffc9a70000000000000000000000000000000000000000000000000000000085572ffb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000800000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00000000000000000000000000000000000000000000000000000000000000000dfee630b7d7d15c6a344d6f875470a16e42bce69655b87c14593c3177d68fbe3")
