package contracts

import (
	agbinary "github.com/gagliardetto/binary"
)

// This Errors should be automatically generated by Anchor-Go but they only support one error per program
type McmError agbinary.BorshEnum

const (
	WrongMultiSigMcmError McmError = iota
	WrongChainIDMcmError
	UnauthorizedMcmError
	InvalidInputsMcmError
	OverflowMcmError
	InvalidSignatureMcmError
	FailedEcdsaRecoverMcmError
	InvalidRootLenMcmError
	MismatchedInputSignerVectorsLengthMcmError
	OutOfBoundsNumOfSignersMcmError
	MismatchedInputGroupArraysLengthMcmError
	GroupTreeNotWellFormedMcmError
	SignerInDisabledGroupMcmError
	OutOfBoundsGroupQuorumMcmError
	SignersAddressesMustBeStrictlyIncreasingMcmError
	SignedHashAlreadySeenMcmError
	InvalidSignerMcmError
	MissingConfigMcmError
	InsufficientSignersMcmError
	ValidUntilHasAlreadyPassedMcmError
	ProofCannotBeVerifiedMcmError
	PendingOpsMcmError
	WrongPreOpCountMcmError
	WrongPostOpCountMcmError
	PostOpCountReachedMcmError
	RootExpiredMcmError
	WrongNonceMcmError
)

func (value McmError) String() string {
	switch value {
	case WrongMultiSigMcmError:
		return "WrongMultiSig"
	case WrongChainIDMcmError:
		return "WrongChainID"
	case UnauthorizedMcmError:
		return "Unauthorized"
	case InvalidInputsMcmError:
		return "InvalidInputs"
	case OverflowMcmError:
		return "Overflow"
	case InvalidSignatureMcmError:
		return "InvalidSignature"
	case FailedEcdsaRecoverMcmError:
		return "FailedEcdsaRecover"
	case InvalidRootLenMcmError:
		return "InvalidRootLen"
	case MismatchedInputSignerVectorsLengthMcmError:
		return "MismatchedInputSignerVectorsLength"
	case OutOfBoundsNumOfSignersMcmError:
		return "OutOfBoundsNumOfSigners"
	case MismatchedInputGroupArraysLengthMcmError:
		return "MismatchedInputGroupArraysLength"
	case GroupTreeNotWellFormedMcmError:
		return "GroupTreeNotWellFormed"
	case SignerInDisabledGroupMcmError:
		return "SignerInDisabledGroup"
	case OutOfBoundsGroupQuorumMcmError:
		return "OutOfBoundsGroupQuorum"
	case SignersAddressesMustBeStrictlyIncreasingMcmError:
		return "SignersAddressesMustBeStrictlyIncreasing"
	case SignedHashAlreadySeenMcmError:
		return "SignedHashAlreadySeen"
	case InvalidSignerMcmError:
		return "InvalidSigner"
	case MissingConfigMcmError:
		return "MissingConfig"
	case InsufficientSignersMcmError:
		return "InsufficientSigners"
	case ValidUntilHasAlreadyPassedMcmError:
		return "ValidUntilHasAlreadyPassed"
	case ProofCannotBeVerifiedMcmError:
		return "ProofCannotBeVerified"
	case PendingOpsMcmError:
		return "PendingOps"
	case WrongPreOpCountMcmError:
		return "WrongPreOpCount"
	case WrongPostOpCountMcmError:
		return "WrongPostOpCount"
	case PostOpCountReachedMcmError:
		return "PostOpCountReached"
	case RootExpiredMcmError:
		return "RootExpired"
	case WrongNonceMcmError:
		return "WrongNonce"
	default:
		return ""
	}
}
