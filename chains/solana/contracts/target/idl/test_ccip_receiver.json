{
  "address": "CtEVnHsQzhTNWav8skikiV2oF6Xx7r7uGGa8eCDQtTjH",
  "metadata": {
    "name": "test_ccip_receiver",
    "version": "0.1.0-dev",
    "spec": "0.1.0",
    "description": "Created with Anchor"
  },
  "docs": [
    "This program an example of a CCIP Receiver Program.",
    "Used to test CCIP Router execute."
  ],
  "instructions": [
    {
      "name": "ccip_receive",
      "docs": [
        "This function is called by the CCIP Router to execute the CCIP message.",
        "The method name needs to be ccip_receive with Anchor encoding,",
        "if not using Anchor the discriminator needs to be [0x0b, 0xf4, 0x09, 0xf9, 0x2c, 0x53, 0x2f, 0xf5]",
        "You can send as many accounts as you need, specifying if mutable or not.",
        "But none of them could be an init, realloc or close.",
        "In this case, it increments the counter value by 1 and logs the parsed message."
      ],
      "discriminator": [
        11,
        244,
        9,
        249,
        44,
        83,
        47,
        245
      ],
      "accounts": [
        {
          "name": "authority",
          "signer": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  101,
                  120,
                  116,
                  101,
                  114,
                  110,
                  97,
                  108,
                  95,
                  101,
                  120,
                  101,
                  99,
                  117,
                  116,
                  105,
                  111,
                  110,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              }
            ],
            "program": {
              "kind": "account",
              "path": "offramp_program"
            }
          }
        },
        {
          "name": "offramp_program",
          "docs": [
            "CHECK offramp program: exists only to derive the allowed offramp PDA",
            "and the authority PDA. Must be second."
          ]
        },
        {
          "name": "allowed_offramp",
          "docs": [
            "CHECK PDA of the router program verifying the signer is an allowed offramp.",
            "If PDA does not exist, the router doesn't allow this offramp"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  108,
                  108,
                  111,
                  119,
                  101,
                  100,
                  95,
                  111,
                  102,
                  102,
                  114,
                  97,
                  109,
                  112
                ]
              },
              {
                "kind": "arg",
                "path": "message.source_chain_selector"
              },
              {
                "kind": "account",
                "path": "offramp_program"
              }
            ]
          }
        },
        {
          "name": "external_execution_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  101,
                  120,
                  116,
                  101,
                  114,
                  110,
                  97,
                  108,
                  95,
                  101,
                  120,
                  101,
                  99,
                  117,
                  116,
                  105,
                  111,
                  110,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              }
            ]
          }
        },
        {
          "name": "counter",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  99,
                  111,
                  117,
                  110,
                  116,
                  101,
                  114
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "message",
          "type": {
            "defined": {
              "name": "Any2SVMMessage"
            }
          }
        }
      ]
    },
    {
      "name": "ccip_token_lock_burn",
      "discriminator": [
        200,
        14,
        50,
        9,
        44,
        91,
        121,
        37
      ],
      "accounts": [
        {
          "name": "authority",
          "signer": true
        },
        {
          "name": "pool_token_account",
          "writable": true
        },
        {
          "name": "mint"
        },
        {
          "name": "token_program"
        }
      ],
      "args": [
        {
          "name": "input",
          "type": {
            "defined": {
              "name": "LockOrBurnInV1"
            }
          }
        }
      ]
    },
    {
      "name": "ccip_token_release_mint",
      "discriminator": [
        20,
        148,
        113,
        198,
        229,
        170,
        71,
        48
      ],
      "accounts": [
        {
          "name": "authority",
          "signer": true
        },
        {
          "name": "pool_token_account",
          "writable": true
        },
        {
          "name": "mint"
        },
        {
          "name": "token_program"
        }
      ],
      "args": [
        {
          "name": "input",
          "type": {
            "defined": {
              "name": "ReleaseOrMintInV1"
            }
          }
        }
      ]
    },
    {
      "name": "initialize",
      "docs": [
        "The initialization is responsibility of the External User, CCIP is not handling initialization of Accounts"
      ],
      "discriminator": [
        175,
        175,
        109,
        31,
        13,
        152,
        155,
        237
      ],
      "accounts": [
        {
          "name": "counter",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  99,
                  111,
                  117,
                  110,
                  116,
                  101,
                  114
                ]
              }
            ]
          }
        },
        {
          "name": "external_execution_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  101,
                  120,
                  116,
                  101,
                  114,
                  110,
                  97,
                  108,
                  95,
                  101,
                  120,
                  101,
                  99,
                  117,
                  116,
                  105,
                  111,
                  110,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              }
            ]
          }
        },
        {
          "name": "authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "router",
          "type": "pubkey"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "Counter",
      "discriminator": [
        255,
        176,
        4,
        245,
        188,
        253,
        124,
        25
      ]
    },
    {
      "name": "ExternalExecutionConfig",
      "discriminator": [
        159,
        157,
        150,
        212,
        168,
        103,
        117,
        39
      ]
    }
  ],
  "types": [
    {
      "name": "Any2SVMMessage",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "message_id",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "source_chain_selector",
            "type": "u64"
          },
          {
            "name": "sender",
            "type": "bytes"
          },
          {
            "name": "data",
            "type": "bytes"
          },
          {
            "name": "token_amounts",
            "type": {
              "vec": {
                "defined": {
                  "name": "SVMTokenAmount"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "BaseState",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "proposed_owner",
            "type": "pubkey"
          },
          {
            "name": "router",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "Counter",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "value",
            "type": "u8"
          },
          {
            "name": "state",
            "type": {
              "defined": {
                "name": "BaseState"
              }
            }
          }
        ]
      }
    },
    {
      "name": "ExternalExecutionConfig",
      "type": {
        "kind": "struct",
        "fields": []
      }
    },
    {
      "name": "LockOrBurnInV1",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "receiver",
            "type": "bytes"
          },
          {
            "name": "remote_chain_selector",
            "type": "u64"
          },
          {
            "name": "original_sender",
            "type": "pubkey"
          },
          {
            "name": "amount",
            "type": "u64"
          },
          {
            "name": "local_token",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "ReleaseOrMintInV1",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "original_sender",
            "type": "bytes"
          },
          {
            "name": "remote_chain_selector",
            "type": "u64"
          },
          {
            "name": "receiver",
            "type": "pubkey"
          },
          {
            "name": "amount",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "local_token",
            "type": "pubkey"
          },
          {
            "name": "source_pool_address",
            "docs": [
              "@dev WARNING: sourcePoolAddress should be checked prior to any processing of funds. Make sure it matches the",
              "expected pool address for the given remoteChainSelector."
            ],
            "type": "bytes"
          },
          {
            "name": "source_pool_data",
            "type": "bytes"
          },
          {
            "name": "offchain_token_data",
            "docs": [
              "@dev WARNING: offchainTokenData is untrusted data."
            ],
            "type": "bytes"
          }
        ]
      }
    },
    {
      "name": "SVMTokenAmount",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "token",
            "type": "pubkey"
          },
          {
            "name": "amount",
            "type": "u64"
          }
        ]
      }
    }
  ]
}