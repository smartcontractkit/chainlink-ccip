// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ping_pong_demo

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type Initialize struct {
	Router                   *ag_solanago.PublicKey
	CounterpartChainSelector *uint64
	CounterpartAddress       *[64]uint8
	IsPaused                 *bool
	DefaultGasLimit          *uint64
	OutOfOrderExecution      *ag_solanago.PublicKey

	// [0] = [WRITE] config
	//
	// [1] = [WRITE] nameVersion
	//
	// [2] = [] routerFeeBillingSigner
	// ··········· CHECK
	//
	// [3] = [] feeTokenProgram
	//
	// [4] = [] feeTokenMint
	//
	// [5] = [WRITE] feeTokenAta
	//
	// [6] = [] ccipSendSigner
	// ··········· CHECK
	//
	// [7] = [WRITE, SIGNER] authority
	//
	// [8] = [] associatedTokenProgram
	//
	// [9] = [] systemProgram
	//
	// [10] = [] program
	//
	// [11] = [] programData
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetRouter sets the "router" parameter.
func (inst *Initialize) SetRouter(router ag_solanago.PublicKey) *Initialize {
	inst.Router = &router
	return inst
}

// SetCounterpartChainSelector sets the "counterpartChainSelector" parameter.
func (inst *Initialize) SetCounterpartChainSelector(counterpartChainSelector uint64) *Initialize {
	inst.CounterpartChainSelector = &counterpartChainSelector
	return inst
}

// SetCounterpartAddress sets the "counterpartAddress" parameter.
func (inst *Initialize) SetCounterpartAddress(counterpartAddress [64]uint8) *Initialize {
	inst.CounterpartAddress = &counterpartAddress
	return inst
}

// SetIsPaused sets the "isPaused" parameter.
func (inst *Initialize) SetIsPaused(isPaused bool) *Initialize {
	inst.IsPaused = &isPaused
	return inst
}

// SetDefaultGasLimit sets the "defaultGasLimit" parameter.
func (inst *Initialize) SetDefaultGasLimit(defaultGasLimit uint64) *Initialize {
	inst.DefaultGasLimit = &defaultGasLimit
	return inst
}

// SetOutOfOrderExecution sets the "outOfOrderExecution" parameter.
func (inst *Initialize) SetOutOfOrderExecution(outOfOrderExecution ag_solanago.PublicKey) *Initialize {
	inst.OutOfOrderExecution = &outOfOrderExecution
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *Initialize) SetConfigAccount(config ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *Initialize) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetNameVersionAccount sets the "nameVersion" account.
func (inst *Initialize) SetNameVersionAccount(nameVersion ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(nameVersion).WRITE()
	return inst
}

// GetNameVersionAccount gets the "nameVersion" account.
func (inst *Initialize) GetNameVersionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetRouterFeeBillingSignerAccount sets the "routerFeeBillingSigner" account.
// CHECK
func (inst *Initialize) SetRouterFeeBillingSignerAccount(routerFeeBillingSigner ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(routerFeeBillingSigner)
	return inst
}

// GetRouterFeeBillingSignerAccount gets the "routerFeeBillingSigner" account.
// CHECK
func (inst *Initialize) GetRouterFeeBillingSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetFeeTokenProgramAccount sets the "feeTokenProgram" account.
func (inst *Initialize) SetFeeTokenProgramAccount(feeTokenProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(feeTokenProgram)
	return inst
}

// GetFeeTokenProgramAccount gets the "feeTokenProgram" account.
func (inst *Initialize) GetFeeTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetFeeTokenMintAccount sets the "feeTokenMint" account.
func (inst *Initialize) SetFeeTokenMintAccount(feeTokenMint ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(feeTokenMint)
	return inst
}

// GetFeeTokenMintAccount gets the "feeTokenMint" account.
func (inst *Initialize) GetFeeTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetFeeTokenAtaAccount sets the "feeTokenAta" account.
func (inst *Initialize) SetFeeTokenAtaAccount(feeTokenAta ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feeTokenAta).WRITE()
	return inst
}

// GetFeeTokenAtaAccount gets the "feeTokenAta" account.
func (inst *Initialize) GetFeeTokenAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetCcipSendSignerAccount sets the "ccipSendSigner" account.
// CHECK
func (inst *Initialize) SetCcipSendSignerAccount(ccipSendSigner ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(ccipSendSigner)
	return inst
}

// GetCcipSendSignerAccount gets the "ccipSendSigner" account.
// CHECK
func (inst *Initialize) GetCcipSendSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Initialize) SetAuthorityAccount(authority ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Initialize) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *Initialize) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *Initialize) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Initialize) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Initialize) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetProgramAccount sets the "program" account.
func (inst *Initialize) SetProgramAccount(program ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Initialize) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetProgramDataAccount sets the "programData" account.
func (inst *Initialize) SetProgramDataAccount(programData ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(programData)
	return inst
}

// GetProgramDataAccount gets the "programData" account.
func (inst *Initialize) GetProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Router == nil {
			return errors.New("Router parameter is not set")
		}
		if inst.CounterpartChainSelector == nil {
			return errors.New("CounterpartChainSelector parameter is not set")
		}
		if inst.CounterpartAddress == nil {
			return errors.New("CounterpartAddress parameter is not set")
		}
		if inst.IsPaused == nil {
			return errors.New("IsPaused parameter is not set")
		}
		if inst.DefaultGasLimit == nil {
			return errors.New("DefaultGasLimit parameter is not set")
		}
		if inst.OutOfOrderExecution == nil {
			return errors.New("OutOfOrderExecution parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.NameVersion is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RouterFeeBillingSigner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FeeTokenProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FeeTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeeTokenAta is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CcipSendSigner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.ProgramData is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                  Router", *inst.Router))
						paramsBranch.Child(ag_format.Param("CounterpartChainSelector", *inst.CounterpartChainSelector))
						paramsBranch.Child(ag_format.Param("      CounterpartAddress", *inst.CounterpartAddress))
						paramsBranch.Child(ag_format.Param("                IsPaused", *inst.IsPaused))
						paramsBranch.Child(ag_format.Param("         DefaultGasLimit", *inst.DefaultGasLimit))
						paramsBranch.Child(ag_format.Param("     OutOfOrderExecution", *inst.OutOfOrderExecution))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                config", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("           nameVersion", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("routerFeeBillingSigner", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("       feeTokenProgram", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("          feeTokenMint", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("           feeTokenAta", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("        ccipSendSigner", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("             authority", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("               program", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("           programData", inst.AccountMetaSlice[11]))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Router` param:
	err = encoder.Encode(obj.Router)
	if err != nil {
		return err
	}
	// Serialize `CounterpartChainSelector` param:
	err = encoder.Encode(obj.CounterpartChainSelector)
	if err != nil {
		return err
	}
	// Serialize `CounterpartAddress` param:
	err = encoder.Encode(obj.CounterpartAddress)
	if err != nil {
		return err
	}
	// Serialize `IsPaused` param:
	err = encoder.Encode(obj.IsPaused)
	if err != nil {
		return err
	}
	// Serialize `DefaultGasLimit` param:
	err = encoder.Encode(obj.DefaultGasLimit)
	if err != nil {
		return err
	}
	// Serialize `OutOfOrderExecution` param:
	err = encoder.Encode(obj.OutOfOrderExecution)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Router`:
	err = decoder.Decode(&obj.Router)
	if err != nil {
		return err
	}
	// Deserialize `CounterpartChainSelector`:
	err = decoder.Decode(&obj.CounterpartChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `CounterpartAddress`:
	err = decoder.Decode(&obj.CounterpartAddress)
	if err != nil {
		return err
	}
	// Deserialize `IsPaused`:
	err = decoder.Decode(&obj.IsPaused)
	if err != nil {
		return err
	}
	// Deserialize `DefaultGasLimit`:
	err = decoder.Decode(&obj.DefaultGasLimit)
	if err != nil {
		return err
	}
	// Deserialize `OutOfOrderExecution`:
	err = decoder.Decode(&obj.OutOfOrderExecution)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	router ag_solanago.PublicKey,
	counterpartChainSelector uint64,
	counterpartAddress [64]uint8,
	isPaused bool,
	defaultGasLimit uint64,
	outOfOrderExecution ag_solanago.PublicKey,
	// Accounts:
	config ag_solanago.PublicKey,
	nameVersion ag_solanago.PublicKey,
	routerFeeBillingSigner ag_solanago.PublicKey,
	feeTokenProgram ag_solanago.PublicKey,
	feeTokenMint ag_solanago.PublicKey,
	feeTokenAta ag_solanago.PublicKey,
	ccipSendSigner ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	program ag_solanago.PublicKey,
	programData ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetRouter(router).
		SetCounterpartChainSelector(counterpartChainSelector).
		SetCounterpartAddress(counterpartAddress).
		SetIsPaused(isPaused).
		SetDefaultGasLimit(defaultGasLimit).
		SetOutOfOrderExecution(outOfOrderExecution).
		SetConfigAccount(config).
		SetNameVersionAccount(nameVersion).
		SetRouterFeeBillingSignerAccount(routerFeeBillingSigner).
		SetFeeTokenProgramAccount(feeTokenProgram).
		SetFeeTokenMintAccount(feeTokenMint).
		SetFeeTokenAtaAccount(feeTokenAta).
		SetCcipSendSignerAccount(ccipSendSigner).
		SetAuthorityAccount(authority).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetProgramAccount(program).
		SetProgramDataAccount(programData)
}
