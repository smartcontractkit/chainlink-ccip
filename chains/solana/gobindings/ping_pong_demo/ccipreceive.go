// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ping_pong_demo

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CcipReceive is the `ccip_receive` instruction.
type CcipReceiveInstruction struct {
	Message *Any2SVMMessage

	// [0] = [SIGNER] authority
	//
	// [1] = [] offramp_program
	// ··········· CHECK offramp program: exists only to derive the allowed offramp PDA
	// ··········· and the authority PDA. Must be second.
	//
	// [2] = [] allowed_offramp
	// ··········· CHECK PDA of the router program verifying the signer is an allowed offramp.
	// ··········· If PDA does not exist, the router doesn't allow this offramp
	//
	// [3] = [] config
	//
	// [4] = [WRITE] ccip_send_signer
	// ··········· CHECK
	//
	// [5] = [] fee_token_program
	//
	// [6] = [] fee_token_mint
	//
	// [7] = [WRITE] fee_token_ata
	//
	// [8] = [] ccip_router_program
	// ··········· CHECK
	//
	// [9] = [] ccip_router_config
	// ··········· CHECK
	//
	// [10] = [WRITE] ccip_router_dest_chain_state
	// ··········· CHECK
	//
	// [11] = [WRITE] ccip_router_nonce
	// ··········· CHECK
	//
	// [12] = [WRITE] ccip_router_fee_receiver
	// ··········· CHECK
	//
	// [13] = [] ccip_router_fee_billing_signer
	// ··········· CHECK
	//
	// [14] = [] fee_quoter
	// ··········· CHECK
	//
	// [15] = [] fee_quoter_config
	// ··········· CHECK
	//
	// [16] = [] fee_quoter_dest_chain
	// ··········· CHECK
	//
	// [17] = [] fee_quoter_billing_token_config
	// ··········· CHECK
	//
	// [18] = [] fee_quoter_link_token_config
	// ··········· CHECK
	//
	// [19] = [] rmn_remote
	// ··········· CHECK
	//
	// [20] = [] rmn_remote_curses
	// ··········· CHECK
	//
	// [21] = [] rmn_remote_config
	// ··········· CHECK
	//
	// [22] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCcipReceiveInstructionBuilder creates a new `CcipReceiveInstruction` instruction builder.
func NewCcipReceiveInstructionBuilder() *CcipReceiveInstruction {
	nd := &CcipReceiveInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 23),
	}
	return nd
}

// SetMessage sets the "message" parameter.
func (inst *CcipReceiveInstruction) SetMessage(message Any2SVMMessage) *CcipReceiveInstruction {
	inst.Message = &message
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CcipReceiveInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CcipReceiveInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOfframpProgramAccount sets the "offramp_program" account.
// CHECK offramp program: exists only to derive the allowed offramp PDA
// and the authority PDA. Must be second.
func (inst *CcipReceiveInstruction) SetOfframpProgramAccount(offrampProgram ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(offrampProgram)
	return inst
}

// GetOfframpProgramAccount gets the "offramp_program" account.
// CHECK offramp program: exists only to derive the allowed offramp PDA
// and the authority PDA. Must be second.
func (inst *CcipReceiveInstruction) GetOfframpProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAllowedOfframpAccount sets the "allowed_offramp" account.
// CHECK PDA of the router program verifying the signer is an allowed offramp.
// If PDA does not exist, the router doesn't allow this offramp
func (inst *CcipReceiveInstruction) SetAllowedOfframpAccount(allowedOfframp ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(allowedOfframp)
	return inst
}

// GetAllowedOfframpAccount gets the "allowed_offramp" account.
// CHECK PDA of the router program verifying the signer is an allowed offramp.
// If PDA does not exist, the router doesn't allow this offramp
func (inst *CcipReceiveInstruction) GetAllowedOfframpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetConfigAccount sets the "config" account.
func (inst *CcipReceiveInstruction) SetConfigAccount(config ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *CcipReceiveInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCcipSendSignerAccount sets the "ccip_send_signer" account.
// CHECK
func (inst *CcipReceiveInstruction) SetCcipSendSignerAccount(ccipSendSigner ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(ccipSendSigner).WRITE()
	return inst
}

// GetCcipSendSignerAccount gets the "ccip_send_signer" account.
// CHECK
func (inst *CcipReceiveInstruction) GetCcipSendSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeeTokenProgramAccount sets the "fee_token_program" account.
func (inst *CcipReceiveInstruction) SetFeeTokenProgramAccount(feeTokenProgram ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feeTokenProgram)
	return inst
}

// GetFeeTokenProgramAccount gets the "fee_token_program" account.
func (inst *CcipReceiveInstruction) GetFeeTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetFeeTokenMintAccount sets the "fee_token_mint" account.
func (inst *CcipReceiveInstruction) SetFeeTokenMintAccount(feeTokenMint ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(feeTokenMint)
	return inst
}

// GetFeeTokenMintAccount gets the "fee_token_mint" account.
func (inst *CcipReceiveInstruction) GetFeeTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetFeeTokenAtaAccount sets the "fee_token_ata" account.
func (inst *CcipReceiveInstruction) SetFeeTokenAtaAccount(feeTokenAta ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(feeTokenAta).WRITE()
	return inst
}

// GetFeeTokenAtaAccount gets the "fee_token_ata" account.
func (inst *CcipReceiveInstruction) GetFeeTokenAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCcipRouterProgramAccount sets the "ccip_router_program" account.
// CHECK
func (inst *CcipReceiveInstruction) SetCcipRouterProgramAccount(ccipRouterProgram ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(ccipRouterProgram)
	return inst
}

// GetCcipRouterProgramAccount gets the "ccip_router_program" account.
// CHECK
func (inst *CcipReceiveInstruction) GetCcipRouterProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetCcipRouterConfigAccount sets the "ccip_router_config" account.
// CHECK
func (inst *CcipReceiveInstruction) SetCcipRouterConfigAccount(ccipRouterConfig ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(ccipRouterConfig)
	return inst
}

// GetCcipRouterConfigAccount gets the "ccip_router_config" account.
// CHECK
func (inst *CcipReceiveInstruction) GetCcipRouterConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetCcipRouterDestChainStateAccount sets the "ccip_router_dest_chain_state" account.
// CHECK
func (inst *CcipReceiveInstruction) SetCcipRouterDestChainStateAccount(ccipRouterDestChainState ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(ccipRouterDestChainState).WRITE()
	return inst
}

// GetCcipRouterDestChainStateAccount gets the "ccip_router_dest_chain_state" account.
// CHECK
func (inst *CcipReceiveInstruction) GetCcipRouterDestChainStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetCcipRouterNonceAccount sets the "ccip_router_nonce" account.
// CHECK
func (inst *CcipReceiveInstruction) SetCcipRouterNonceAccount(ccipRouterNonce ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(ccipRouterNonce).WRITE()
	return inst
}

// GetCcipRouterNonceAccount gets the "ccip_router_nonce" account.
// CHECK
func (inst *CcipReceiveInstruction) GetCcipRouterNonceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetCcipRouterFeeReceiverAccount sets the "ccip_router_fee_receiver" account.
// CHECK
func (inst *CcipReceiveInstruction) SetCcipRouterFeeReceiverAccount(ccipRouterFeeReceiver ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(ccipRouterFeeReceiver).WRITE()
	return inst
}

// GetCcipRouterFeeReceiverAccount gets the "ccip_router_fee_receiver" account.
// CHECK
func (inst *CcipReceiveInstruction) GetCcipRouterFeeReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetCcipRouterFeeBillingSignerAccount sets the "ccip_router_fee_billing_signer" account.
// CHECK
func (inst *CcipReceiveInstruction) SetCcipRouterFeeBillingSignerAccount(ccipRouterFeeBillingSigner ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(ccipRouterFeeBillingSigner)
	return inst
}

// GetCcipRouterFeeBillingSignerAccount gets the "ccip_router_fee_billing_signer" account.
// CHECK
func (inst *CcipReceiveInstruction) GetCcipRouterFeeBillingSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetFeeQuoterAccount sets the "fee_quoter" account.
// CHECK
func (inst *CcipReceiveInstruction) SetFeeQuoterAccount(feeQuoter ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(feeQuoter)
	return inst
}

// GetFeeQuoterAccount gets the "fee_quoter" account.
// CHECK
func (inst *CcipReceiveInstruction) GetFeeQuoterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetFeeQuoterConfigAccount sets the "fee_quoter_config" account.
// CHECK
func (inst *CcipReceiveInstruction) SetFeeQuoterConfigAccount(feeQuoterConfig ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(feeQuoterConfig)
	return inst
}

// GetFeeQuoterConfigAccount gets the "fee_quoter_config" account.
// CHECK
func (inst *CcipReceiveInstruction) GetFeeQuoterConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetFeeQuoterDestChainAccount sets the "fee_quoter_dest_chain" account.
// CHECK
func (inst *CcipReceiveInstruction) SetFeeQuoterDestChainAccount(feeQuoterDestChain ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(feeQuoterDestChain)
	return inst
}

// GetFeeQuoterDestChainAccount gets the "fee_quoter_dest_chain" account.
// CHECK
func (inst *CcipReceiveInstruction) GetFeeQuoterDestChainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetFeeQuoterBillingTokenConfigAccount sets the "fee_quoter_billing_token_config" account.
// CHECK
func (inst *CcipReceiveInstruction) SetFeeQuoterBillingTokenConfigAccount(feeQuoterBillingTokenConfig ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(feeQuoterBillingTokenConfig)
	return inst
}

// GetFeeQuoterBillingTokenConfigAccount gets the "fee_quoter_billing_token_config" account.
// CHECK
func (inst *CcipReceiveInstruction) GetFeeQuoterBillingTokenConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetFeeQuoterLinkTokenConfigAccount sets the "fee_quoter_link_token_config" account.
// CHECK
func (inst *CcipReceiveInstruction) SetFeeQuoterLinkTokenConfigAccount(feeQuoterLinkTokenConfig ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(feeQuoterLinkTokenConfig)
	return inst
}

// GetFeeQuoterLinkTokenConfigAccount gets the "fee_quoter_link_token_config" account.
// CHECK
func (inst *CcipReceiveInstruction) GetFeeQuoterLinkTokenConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetRmnRemoteAccount sets the "rmn_remote" account.
// CHECK
func (inst *CcipReceiveInstruction) SetRmnRemoteAccount(rmnRemote ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(rmnRemote)
	return inst
}

// GetRmnRemoteAccount gets the "rmn_remote" account.
// CHECK
func (inst *CcipReceiveInstruction) GetRmnRemoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetRmnRemoteCursesAccount sets the "rmn_remote_curses" account.
// CHECK
func (inst *CcipReceiveInstruction) SetRmnRemoteCursesAccount(rmnRemoteCurses ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(rmnRemoteCurses)
	return inst
}

// GetRmnRemoteCursesAccount gets the "rmn_remote_curses" account.
// CHECK
func (inst *CcipReceiveInstruction) GetRmnRemoteCursesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetRmnRemoteConfigAccount sets the "rmn_remote_config" account.
// CHECK
func (inst *CcipReceiveInstruction) SetRmnRemoteConfigAccount(rmnRemoteConfig ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(rmnRemoteConfig)
	return inst
}

// GetRmnRemoteConfigAccount gets the "rmn_remote_config" account.
// CHECK
func (inst *CcipReceiveInstruction) GetRmnRemoteConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CcipReceiveInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CcipReceiveInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

func (inst CcipReceiveInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CcipReceive,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CcipReceiveInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CcipReceiveInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Message == nil {
			return errors.New("Message parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OfframpProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AllowedOfframp is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CcipSendSigner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeeTokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.FeeTokenMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.FeeTokenAta is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CcipRouterProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CcipRouterConfig is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CcipRouterDestChainState is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.CcipRouterNonce is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.CcipRouterFeeReceiver is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.CcipRouterFeeBillingSigner is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.FeeQuoter is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.FeeQuoterConfig is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.FeeQuoterDestChain is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.FeeQuoterBillingTokenConfig is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.FeeQuoterLinkTokenConfig is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.RmnRemote is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.RmnRemoteCurses is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.RmnRemoteConfig is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CcipReceiveInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CcipReceive")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Message", *inst.Message))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=23]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                      authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                offramp_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                allowed_offramp", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                         config", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               ccip_send_signer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              fee_token_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                 fee_token_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                  fee_token_ata", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            ccip_router_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("             ccip_router_config", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("   ccip_router_dest_chain_state", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("              ccip_router_nonce", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("       ccip_router_fee_receiver", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta(" ccip_router_fee_billing_signer", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                     fee_quoter", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("              fee_quoter_config", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("          fee_quoter_dest_chain", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("fee_quoter_billing_token_config", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("   fee_quoter_link_token_config", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("                     rmn_remote", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("              rmn_remote_curses", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("              rmn_remote_config", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("                 system_program", inst.AccountMetaSlice.Get(22)))
					})
				})
		})
}

func (obj CcipReceiveInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CcipReceiveInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	return nil
}

// NewCcipReceiveInstruction declares a new CcipReceive instruction with the provided parameters and accounts.
func NewCcipReceiveInstruction(
	// Parameters:
	message Any2SVMMessage,
	// Accounts:
	authority ag_solanago.PublicKey,
	offrampProgram ag_solanago.PublicKey,
	allowedOfframp ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	ccipSendSigner ag_solanago.PublicKey,
	feeTokenProgram ag_solanago.PublicKey,
	feeTokenMint ag_solanago.PublicKey,
	feeTokenAta ag_solanago.PublicKey,
	ccipRouterProgram ag_solanago.PublicKey,
	ccipRouterConfig ag_solanago.PublicKey,
	ccipRouterDestChainState ag_solanago.PublicKey,
	ccipRouterNonce ag_solanago.PublicKey,
	ccipRouterFeeReceiver ag_solanago.PublicKey,
	ccipRouterFeeBillingSigner ag_solanago.PublicKey,
	feeQuoter ag_solanago.PublicKey,
	feeQuoterConfig ag_solanago.PublicKey,
	feeQuoterDestChain ag_solanago.PublicKey,
	feeQuoterBillingTokenConfig ag_solanago.PublicKey,
	feeQuoterLinkTokenConfig ag_solanago.PublicKey,
	rmnRemote ag_solanago.PublicKey,
	rmnRemoteCurses ag_solanago.PublicKey,
	rmnRemoteConfig ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CcipReceiveInstruction {
	return NewCcipReceiveInstructionBuilder().
		SetMessage(message).
		SetAuthorityAccount(authority).
		SetOfframpProgramAccount(offrampProgram).
		SetAllowedOfframpAccount(allowedOfframp).
		SetConfigAccount(config).
		SetCcipSendSignerAccount(ccipSendSigner).
		SetFeeTokenProgramAccount(feeTokenProgram).
		SetFeeTokenMintAccount(feeTokenMint).
		SetFeeTokenAtaAccount(feeTokenAta).
		SetCcipRouterProgramAccount(ccipRouterProgram).
		SetCcipRouterConfigAccount(ccipRouterConfig).
		SetCcipRouterDestChainStateAccount(ccipRouterDestChainState).
		SetCcipRouterNonceAccount(ccipRouterNonce).
		SetCcipRouterFeeReceiverAccount(ccipRouterFeeReceiver).
		SetCcipRouterFeeBillingSignerAccount(ccipRouterFeeBillingSigner).
		SetFeeQuoterAccount(feeQuoter).
		SetFeeQuoterConfigAccount(feeQuoterConfig).
		SetFeeQuoterDestChainAccount(feeQuoterDestChain).
		SetFeeQuoterBillingTokenConfigAccount(feeQuoterBillingTokenConfig).
		SetFeeQuoterLinkTokenConfigAccount(feeQuoterLinkTokenConfig).
		SetRmnRemoteAccount(rmnRemote).
		SetRmnRemoteCursesAccount(rmnRemoteCurses).
		SetRmnRemoteConfigAccount(rmnRemoteConfig).
		SetSystemProgramAccount(systemProgram)
}
