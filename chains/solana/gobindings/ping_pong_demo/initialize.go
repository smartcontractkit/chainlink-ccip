// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ping_pong_demo

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type InitializeInstruction struct {

	// [0] = [] config
	//
	// [1] = [WRITE] name_version
	//
	// [2] = [] router_fee_billing_signer
	// ··········· CHECK
	//
	// [3] = [] fee_token_program
	//
	// [4] = [] fee_token_mint
	//
	// [5] = [WRITE] fee_token_ata
	//
	// [6] = [] ccip_send_signer
	// ··········· CHECK
	//
	// [7] = [WRITE, SIGNER] authority
	//
	// [8] = [] associated_token_program
	//
	// [9] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `InitializeInstruction` instruction builder.
func NewInitializeInstructionBuilder() *InitializeInstruction {
	nd := &InitializeInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetConfigAccount sets the "config" account.
func (inst *InitializeInstruction) SetConfigAccount(config ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *InitializeInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNameVersionAccount sets the "name_version" account.
func (inst *InitializeInstruction) SetNameVersionAccount(nameVersion ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(nameVersion).WRITE()
	return inst
}

// GetNameVersionAccount gets the "name_version" account.
func (inst *InitializeInstruction) GetNameVersionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRouterFeeBillingSignerAccount sets the "router_fee_billing_signer" account.
// CHECK
func (inst *InitializeInstruction) SetRouterFeeBillingSignerAccount(routerFeeBillingSigner ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(routerFeeBillingSigner)
	return inst
}

// GetRouterFeeBillingSignerAccount gets the "router_fee_billing_signer" account.
// CHECK
func (inst *InitializeInstruction) GetRouterFeeBillingSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFeeTokenProgramAccount sets the "fee_token_program" account.
func (inst *InitializeInstruction) SetFeeTokenProgramAccount(feeTokenProgram ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(feeTokenProgram)
	return inst
}

// GetFeeTokenProgramAccount gets the "fee_token_program" account.
func (inst *InitializeInstruction) GetFeeTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFeeTokenMintAccount sets the "fee_token_mint" account.
func (inst *InitializeInstruction) SetFeeTokenMintAccount(feeTokenMint ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(feeTokenMint)
	return inst
}

// GetFeeTokenMintAccount gets the "fee_token_mint" account.
func (inst *InitializeInstruction) GetFeeTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeeTokenAtaAccount sets the "fee_token_ata" account.
func (inst *InitializeInstruction) SetFeeTokenAtaAccount(feeTokenAta ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feeTokenAta).WRITE()
	return inst
}

// GetFeeTokenAtaAccount gets the "fee_token_ata" account.
func (inst *InitializeInstruction) GetFeeTokenAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCcipSendSignerAccount sets the "ccip_send_signer" account.
// CHECK
func (inst *InitializeInstruction) SetCcipSendSignerAccount(ccipSendSigner ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(ccipSendSigner)
	return inst
}

// GetCcipSendSignerAccount gets the "ccip_send_signer" account.
// CHECK
func (inst *InitializeInstruction) GetCcipSendSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *InitializeInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *InitializeInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *InitializeInstruction) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *InitializeInstruction) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst InitializeInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.NameVersion is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RouterFeeBillingSigner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FeeTokenProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FeeTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeeTokenAta is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CcipSendSigner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             name_version", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("router_fee_billing_signer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        fee_token_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           fee_token_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            fee_token_ata", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         ccip_send_signer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                authority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" associated_token_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           system_program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj InitializeInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *InitializeInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Accounts:
	config ag_solanago.PublicKey,
	nameVersion ag_solanago.PublicKey,
	routerFeeBillingSigner ag_solanago.PublicKey,
	feeTokenProgram ag_solanago.PublicKey,
	feeTokenMint ag_solanago.PublicKey,
	feeTokenAta ag_solanago.PublicKey,
	ccipSendSigner ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeInstruction {
	return NewInitializeInstructionBuilder().
		SetConfigAccount(config).
		SetNameVersionAccount(nameVersion).
		SetRouterFeeBillingSignerAccount(routerFeeBillingSigner).
		SetFeeTokenProgramAccount(feeTokenProgram).
		SetFeeTokenMintAccount(feeTokenMint).
		SetFeeTokenAtaAccount(feeTokenAta).
		SetCcipSendSignerAccount(ccipSendSigner).
		SetAuthorityAccount(authority).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
