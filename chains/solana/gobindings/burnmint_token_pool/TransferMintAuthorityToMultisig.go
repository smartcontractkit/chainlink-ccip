// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package burnmint_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferMintAuthorityToMultisig is the `transferMintAuthorityToMultisig` instruction.
type TransferMintAuthorityToMultisig struct {

	// [0] = [WRITE] state
	//
	// [1] = [WRITE] mint
	//
	// [2] = [] tokenProgram
	//
	// [3] = [] poolSigner
	//
	// [4] = [SIGNER] authority
	//
	// [5] = [] newMultisigMintAuthority
	//
	// [6] = [] program
	//
	// [7] = [] programData
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewTransferMintAuthorityToMultisigInstructionBuilder creates a new `TransferMintAuthorityToMultisig` instruction builder.
func NewTransferMintAuthorityToMultisigInstructionBuilder() *TransferMintAuthorityToMultisig {
	nd := &TransferMintAuthorityToMultisig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *TransferMintAuthorityToMultisig) SetStateAccount(state ag_solanago.PublicKey) *TransferMintAuthorityToMultisig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *TransferMintAuthorityToMultisig) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetMintAccount sets the "mint" account.
func (inst *TransferMintAuthorityToMultisig) SetMintAccount(mint ag_solanago.PublicKey) *TransferMintAuthorityToMultisig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *TransferMintAuthorityToMultisig) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *TransferMintAuthorityToMultisig) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TransferMintAuthorityToMultisig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *TransferMintAuthorityToMultisig) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetPoolSignerAccount sets the "poolSigner" account.
func (inst *TransferMintAuthorityToMultisig) SetPoolSignerAccount(poolSigner ag_solanago.PublicKey) *TransferMintAuthorityToMultisig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolSigner)
	return inst
}

// GetPoolSignerAccount gets the "poolSigner" account.
func (inst *TransferMintAuthorityToMultisig) GetPoolSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *TransferMintAuthorityToMultisig) SetAuthorityAccount(authority ag_solanago.PublicKey) *TransferMintAuthorityToMultisig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *TransferMintAuthorityToMultisig) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetNewMultisigMintAuthorityAccount sets the "newMultisigMintAuthority" account.
func (inst *TransferMintAuthorityToMultisig) SetNewMultisigMintAuthorityAccount(newMultisigMintAuthority ag_solanago.PublicKey) *TransferMintAuthorityToMultisig {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(newMultisigMintAuthority)
	return inst
}

// GetNewMultisigMintAuthorityAccount gets the "newMultisigMintAuthority" account.
func (inst *TransferMintAuthorityToMultisig) GetNewMultisigMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetProgramAccount sets the "program" account.
func (inst *TransferMintAuthorityToMultisig) SetProgramAccount(program ag_solanago.PublicKey) *TransferMintAuthorityToMultisig {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *TransferMintAuthorityToMultisig) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetProgramDataAccount sets the "programData" account.
func (inst *TransferMintAuthorityToMultisig) SetProgramDataAccount(programData ag_solanago.PublicKey) *TransferMintAuthorityToMultisig {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(programData)
	return inst
}

// GetProgramDataAccount gets the "programData" account.
func (inst *TransferMintAuthorityToMultisig) GetProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

func (inst TransferMintAuthorityToMultisig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferMintAuthorityToMultisig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferMintAuthorityToMultisig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferMintAuthorityToMultisig) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolSigner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.NewMultisigMintAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ProgramData is not set")
		}
	}
	return nil
}

func (inst *TransferMintAuthorityToMultisig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferMintAuthorityToMultisig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   state", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("                    mint", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("            tokenProgram", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("              poolSigner", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("               authority", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("newMultisigMintAuthority", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("                 program", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("             programData", inst.AccountMetaSlice[7]))
					})
				})
		})
}

func (obj TransferMintAuthorityToMultisig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *TransferMintAuthorityToMultisig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewTransferMintAuthorityToMultisigInstruction declares a new TransferMintAuthorityToMultisig instruction with the provided parameters and accounts.
func NewTransferMintAuthorityToMultisigInstruction(
	// Accounts:
	state ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	poolSigner ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	newMultisigMintAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey,
	programData ag_solanago.PublicKey) *TransferMintAuthorityToMultisig {
	return NewTransferMintAuthorityToMultisigInstructionBuilder().
		SetStateAccount(state).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetPoolSignerAccount(poolSigner).
		SetAuthorityAccount(authority).
		SetNewMultisigMintAuthorityAccount(newMultisigMintAuthority).
		SetProgramAccount(program).
		SetProgramDataAccount(programData)
}
