// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package burnmint_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferMintAuthority is the `transferMintAuthority` instruction.
type TransferMintAuthority struct {
	NewMintAuthority *ag_solanago.PublicKey

	// [0] = [WRITE] state
	//
	// [1] = [WRITE] mint
	//
	// [2] = [] tokenProgram
	//
	// [3] = [] poolSigner
	//
	// [4] = [SIGNER] authority
	//
	// [5] = [] program
	//
	// [6] = [] programData
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewTransferMintAuthorityInstructionBuilder creates a new `TransferMintAuthority` instruction builder.
func NewTransferMintAuthorityInstructionBuilder() *TransferMintAuthority {
	nd := &TransferMintAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetNewMintAuthority sets the "newMintAuthority" parameter.
func (inst *TransferMintAuthority) SetNewMintAuthority(newMintAuthority ag_solanago.PublicKey) *TransferMintAuthority {
	inst.NewMintAuthority = &newMintAuthority
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *TransferMintAuthority) SetStateAccount(state ag_solanago.PublicKey) *TransferMintAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *TransferMintAuthority) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetMintAccount sets the "mint" account.
func (inst *TransferMintAuthority) SetMintAccount(mint ag_solanago.PublicKey) *TransferMintAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *TransferMintAuthority) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *TransferMintAuthority) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TransferMintAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *TransferMintAuthority) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetPoolSignerAccount sets the "poolSigner" account.
func (inst *TransferMintAuthority) SetPoolSignerAccount(poolSigner ag_solanago.PublicKey) *TransferMintAuthority {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolSigner)
	return inst
}

// GetPoolSignerAccount gets the "poolSigner" account.
func (inst *TransferMintAuthority) GetPoolSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *TransferMintAuthority) SetAuthorityAccount(authority ag_solanago.PublicKey) *TransferMintAuthority {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *TransferMintAuthority) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetProgramAccount sets the "program" account.
func (inst *TransferMintAuthority) SetProgramAccount(program ag_solanago.PublicKey) *TransferMintAuthority {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *TransferMintAuthority) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetProgramDataAccount sets the "programData" account.
func (inst *TransferMintAuthority) SetProgramDataAccount(programData ag_solanago.PublicKey) *TransferMintAuthority {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(programData)
	return inst
}

// GetProgramDataAccount gets the "programData" account.
func (inst *TransferMintAuthority) GetProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

func (inst TransferMintAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferMintAuthority,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferMintAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferMintAuthority) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewMintAuthority == nil {
			return errors.New("NewMintAuthority parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolSigner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ProgramData is not set")
		}
	}
	return nil
}

func (inst *TransferMintAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferMintAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("NewMintAuthority", *inst.NewMintAuthority))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       state", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("        mint", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("  poolSigner", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("     program", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta(" programData", inst.AccountMetaSlice[6]))
					})
				})
		})
}

func (obj TransferMintAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewMintAuthority` param:
	err = encoder.Encode(obj.NewMintAuthority)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TransferMintAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewMintAuthority`:
	err = decoder.Decode(&obj.NewMintAuthority)
	if err != nil {
		return err
	}
	return nil
}

// NewTransferMintAuthorityInstruction declares a new TransferMintAuthority instruction with the provided parameters and accounts.
func NewTransferMintAuthorityInstruction(
	// Parameters:
	newMintAuthority ag_solanago.PublicKey,
	// Accounts:
	state ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	poolSigner ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	program ag_solanago.PublicKey,
	programData ag_solanago.PublicKey) *TransferMintAuthority {
	return NewTransferMintAuthorityInstructionBuilder().
		SetNewMintAuthority(newMintAuthority).
		SetStateAccount(state).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetPoolSignerAccount(poolSigner).
		SetAuthorityAccount(authority).
		SetProgramAccount(program).
		SetProgramDataAccount(programData)
}
