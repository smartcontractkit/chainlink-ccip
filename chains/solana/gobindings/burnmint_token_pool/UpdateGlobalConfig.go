// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package burnmint_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateGlobalConfig is the `updateGlobalConfig` instruction.
type UpdateGlobalConfig struct {
	SelfServedAllowed *bool

	// [0] = [WRITE] config
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [] program
	//
	// [3] = [] programData
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewUpdateGlobalConfigInstructionBuilder creates a new `UpdateGlobalConfig` instruction builder.
func NewUpdateGlobalConfigInstructionBuilder() *UpdateGlobalConfig {
	nd := &UpdateGlobalConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetSelfServedAllowed sets the "selfServedAllowed" parameter.
func (inst *UpdateGlobalConfig) SetSelfServedAllowed(selfServedAllowed bool) *UpdateGlobalConfig {
	inst.SelfServedAllowed = &selfServedAllowed
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *UpdateGlobalConfig) SetConfigAccount(config ag_solanago.PublicKey) *UpdateGlobalConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *UpdateGlobalConfig) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UpdateGlobalConfig) SetAuthorityAccount(authority ag_solanago.PublicKey) *UpdateGlobalConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UpdateGlobalConfig) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetProgramAccount sets the "program" account.
func (inst *UpdateGlobalConfig) SetProgramAccount(program ag_solanago.PublicKey) *UpdateGlobalConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *UpdateGlobalConfig) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetProgramDataAccount sets the "programData" account.
func (inst *UpdateGlobalConfig) SetProgramDataAccount(programData ag_solanago.PublicKey) *UpdateGlobalConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(programData)
	return inst
}

// GetProgramDataAccount gets the "programData" account.
func (inst *UpdateGlobalConfig) GetProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

func (inst UpdateGlobalConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateGlobalConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateGlobalConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateGlobalConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SelfServedAllowed == nil {
			return errors.New("SelfServedAllowed parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProgramData is not set")
		}
	}
	return nil
}

func (inst *UpdateGlobalConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateGlobalConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("SelfServedAllowed", *inst.SelfServedAllowed))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     config", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("  authority", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("    program", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("programData", inst.AccountMetaSlice[3]))
					})
				})
		})
}

func (obj UpdateGlobalConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SelfServedAllowed` param:
	err = encoder.Encode(obj.SelfServedAllowed)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateGlobalConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SelfServedAllowed`:
	err = decoder.Decode(&obj.SelfServedAllowed)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateGlobalConfigInstruction declares a new UpdateGlobalConfig instruction with the provided parameters and accounts.
func NewUpdateGlobalConfigInstruction(
	// Parameters:
	selfServedAllowed bool,
	// Accounts:
	config ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	program ag_solanago.PublicKey,
	programData ag_solanago.PublicKey) *UpdateGlobalConfig {
	return NewUpdateGlobalConfigInstructionBuilder().
		SetSelfServedAllowed(selfServedAllowed).
		SetConfigAccount(config).
		SetAuthorityAccount(authority).
		SetProgramAccount(program).
		SetProgramDataAccount(programData)
}
