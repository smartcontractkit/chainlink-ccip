// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package cctp_token_pool

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "CctpTokenPool"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitGlobalConfig = ag_binary.TypeID([8]byte{140, 136, 214, 48, 87, 0, 120, 255})

	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	// Returns the program type (name) and version.
	// Used by offchain code to easily determine which program & version is being interacted with.
	//
	// # Arguments
	// * `ctx` - The context
	Instruction_TypeVersion = ag_binary.TypeID([8]byte{129, 251, 8, 243, 122, 229, 252, 164})

	Instruction_TransferOwnership = ag_binary.TypeID([8]byte{65, 177, 215, 73, 53, 45, 99, 47})

	Instruction_AcceptOwnership = ag_binary.TypeID([8]byte{172, 23, 43, 13, 238, 213, 85, 150})

	Instruction_SetFundManager = ag_binary.TypeID([8]byte{120, 5, 18, 143, 165, 103, 181, 139})

	Instruction_SetMinimumSignerFunds = ag_binary.TypeID([8]byte{142, 36, 82, 253, 191, 111, 114, 53})

	Instruction_SetFundReclaimDestination = ag_binary.TypeID([8]byte{81, 6, 71, 218, 85, 141, 95, 162})

	Instruction_SetRouter = ag_binary.TypeID([8]byte{236, 248, 107, 200, 151, 160, 44, 250})

	Instruction_SetRmn = ag_binary.TypeID([8]byte{252, 89, 60, 179, 198, 54, 169, 120})

	Instruction_InitChainRemoteConfig = ag_binary.TypeID([8]byte{21, 150, 133, 36, 2, 116, 199, 129})

	Instruction_EditChainRemoteConfig = ag_binary.TypeID([8]byte{149, 112, 186, 72, 116, 217, 159, 175})

	Instruction_EditChainRemoteConfigCctp = ag_binary.TypeID([8]byte{5, 215, 79, 193, 234, 35, 15, 87})

	Instruction_AppendRemotePoolAddresses = ag_binary.TypeID([8]byte{172, 57, 83, 55, 70, 112, 26, 197})

	Instruction_SetChainRateLimit = ag_binary.TypeID([8]byte{188, 188, 161, 37, 100, 249, 123, 170})

	Instruction_SetRateLimitAdmin = ag_binary.TypeID([8]byte{21, 182, 126, 128, 31, 241, 37, 34})

	Instruction_DeleteChainConfig = ag_binary.TypeID([8]byte{241, 159, 142, 210, 64, 173, 77, 179})

	Instruction_ConfigureAllowList = ag_binary.TypeID([8]byte{18, 180, 102, 187, 209, 0, 130, 191})

	Instruction_RemoveFromAllowList = ag_binary.TypeID([8]byte{44, 46, 123, 213, 40, 11, 107, 18})

	Instruction_ReleaseOrMintTokens = ag_binary.TypeID([8]byte{92, 100, 150, 198, 252, 63, 164, 228})

	Instruction_LockOrBurnTokens = ag_binary.TypeID([8]byte{114, 161, 94, 29, 147, 25, 232, 191})

	Instruction_ReclaimEventAccount = ag_binary.TypeID([8]byte{94, 198, 180, 159, 131, 236, 15, 174})

	// Returns an amount of SOL from the pool signer account to the designated
	// fund reclaimer. There are three entities involved:
	//
	// * `owner`: can configure the reclaimer and fund manager.
	// * `fund_manager`: can execute this instruction.
	// * `fund_reclaim_destination`: receives the funds.
	//
	// The resulting funds on the PDA cannot drop below `minimum_signer_funds`.
	Instruction_ReclaimFunds = ag_binary.TypeID([8]byte{38, 246, 147, 248, 43, 41, 43, 198})

	Instruction_DeriveAccountsReleaseOrMintTokens = ag_binary.TypeID([8]byte{40, 91, 244, 228, 0, 2, 51, 238})

	Instruction_DeriveAccountsLockOrBurnTokens = ag_binary.TypeID([8]byte{20, 237, 184, 4, 166, 153, 108, 174})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitGlobalConfig:
		return "InitGlobalConfig"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_TypeVersion:
		return "TypeVersion"
	case Instruction_TransferOwnership:
		return "TransferOwnership"
	case Instruction_AcceptOwnership:
		return "AcceptOwnership"
	case Instruction_SetFundManager:
		return "SetFundManager"
	case Instruction_SetMinimumSignerFunds:
		return "SetMinimumSignerFunds"
	case Instruction_SetFundReclaimDestination:
		return "SetFundReclaimDestination"
	case Instruction_SetRouter:
		return "SetRouter"
	case Instruction_SetRmn:
		return "SetRmn"
	case Instruction_InitChainRemoteConfig:
		return "InitChainRemoteConfig"
	case Instruction_EditChainRemoteConfig:
		return "EditChainRemoteConfig"
	case Instruction_EditChainRemoteConfigCctp:
		return "EditChainRemoteConfigCctp"
	case Instruction_AppendRemotePoolAddresses:
		return "AppendRemotePoolAddresses"
	case Instruction_SetChainRateLimit:
		return "SetChainRateLimit"
	case Instruction_SetRateLimitAdmin:
		return "SetRateLimitAdmin"
	case Instruction_DeleteChainConfig:
		return "DeleteChainConfig"
	case Instruction_ConfigureAllowList:
		return "ConfigureAllowList"
	case Instruction_RemoveFromAllowList:
		return "RemoveFromAllowList"
	case Instruction_ReleaseOrMintTokens:
		return "ReleaseOrMintTokens"
	case Instruction_LockOrBurnTokens:
		return "LockOrBurnTokens"
	case Instruction_ReclaimEventAccount:
		return "ReclaimEventAccount"
	case Instruction_ReclaimFunds:
		return "ReclaimFunds"
	case Instruction_DeriveAccountsReleaseOrMintTokens:
		return "DeriveAccountsReleaseOrMintTokens"
	case Instruction_DeriveAccountsLockOrBurnTokens:
		return "DeriveAccountsLockOrBurnTokens"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"init_global_config", (*InitGlobalConfig)(nil),
		},
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"type_version", (*TypeVersion)(nil),
		},
		{
			"transfer_ownership", (*TransferOwnership)(nil),
		},
		{
			"accept_ownership", (*AcceptOwnership)(nil),
		},
		{
			"set_fund_manager", (*SetFundManager)(nil),
		},
		{
			"set_minimum_signer_funds", (*SetMinimumSignerFunds)(nil),
		},
		{
			"set_fund_reclaim_destination", (*SetFundReclaimDestination)(nil),
		},
		{
			"set_router", (*SetRouter)(nil),
		},
		{
			"set_rmn", (*SetRmn)(nil),
		},
		{
			"init_chain_remote_config", (*InitChainRemoteConfig)(nil),
		},
		{
			"edit_chain_remote_config", (*EditChainRemoteConfig)(nil),
		},
		{
			"edit_chain_remote_config_cctp", (*EditChainRemoteConfigCctp)(nil),
		},
		{
			"append_remote_pool_addresses", (*AppendRemotePoolAddresses)(nil),
		},
		{
			"set_chain_rate_limit", (*SetChainRateLimit)(nil),
		},
		{
			"set_rate_limit_admin", (*SetRateLimitAdmin)(nil),
		},
		{
			"delete_chain_config", (*DeleteChainConfig)(nil),
		},
		{
			"configure_allow_list", (*ConfigureAllowList)(nil),
		},
		{
			"remove_from_allow_list", (*RemoveFromAllowList)(nil),
		},
		{
			"release_or_mint_tokens", (*ReleaseOrMintTokens)(nil),
		},
		{
			"lock_or_burn_tokens", (*LockOrBurnTokens)(nil),
		},
		{
			"reclaim_event_account", (*ReclaimEventAccount)(nil),
		},
		{
			"reclaim_funds", (*ReclaimFunds)(nil),
		},
		{
			"derive_accounts_release_or_mint_tokens", (*DeriveAccountsReleaseOrMintTokens)(nil),
		},
		{
			"derive_accounts_lock_or_burn_tokens", (*DeriveAccountsLockOrBurnTokens)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
