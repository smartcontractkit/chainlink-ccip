// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Edits the pool config flags for a given token mint.
//
// The administrator of the token admin registry is the only one allowed to invoke this.
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for setting the pool.
// * `mint` - The mint of the pool to be edited.
// * `supports_auto_derivation` - A boolean flag indicating whether the pool supports auto-derivation of accounts.
type SetPoolSupportsAutoDerivation struct {
	Mint                   *ag_solanago.PublicKey
	SupportsAutoDerivation *bool

	// [0] = [] config
	//
	// [1] = [WRITE] tokenAdminRegistry
	//
	// [2] = [WRITE, SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewSetPoolSupportsAutoDerivationInstructionBuilder creates a new `SetPoolSupportsAutoDerivation` instruction builder.
func NewSetPoolSupportsAutoDerivationInstructionBuilder() *SetPoolSupportsAutoDerivation {
	nd := &SetPoolSupportsAutoDerivation{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetMint sets the "mint" parameter.
func (inst *SetPoolSupportsAutoDerivation) SetMint(mint ag_solanago.PublicKey) *SetPoolSupportsAutoDerivation {
	inst.Mint = &mint
	return inst
}

// SetSupportsAutoDerivation sets the "supportsAutoDerivation" parameter.
func (inst *SetPoolSupportsAutoDerivation) SetSupportsAutoDerivation(supportsAutoDerivation bool) *SetPoolSupportsAutoDerivation {
	inst.SupportsAutoDerivation = &supportsAutoDerivation
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *SetPoolSupportsAutoDerivation) SetConfigAccount(config ag_solanago.PublicKey) *SetPoolSupportsAutoDerivation {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *SetPoolSupportsAutoDerivation) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetTokenAdminRegistryAccount sets the "tokenAdminRegistry" account.
func (inst *SetPoolSupportsAutoDerivation) SetTokenAdminRegistryAccount(tokenAdminRegistry ag_solanago.PublicKey) *SetPoolSupportsAutoDerivation {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenAdminRegistry).WRITE()
	return inst
}

// GetTokenAdminRegistryAccount gets the "tokenAdminRegistry" account.
func (inst *SetPoolSupportsAutoDerivation) GetTokenAdminRegistryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SetPoolSupportsAutoDerivation) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetPoolSupportsAutoDerivation {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SetPoolSupportsAutoDerivation) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

func (inst SetPoolSupportsAutoDerivation) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetPoolSupportsAutoDerivation,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetPoolSupportsAutoDerivation) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetPoolSupportsAutoDerivation) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Mint == nil {
			return errors.New("Mint parameter is not set")
		}
		if inst.SupportsAutoDerivation == nil {
			return errors.New("SupportsAutoDerivation parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenAdminRegistry is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *SetPoolSupportsAutoDerivation) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetPoolSupportsAutoDerivation")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                  Mint", *inst.Mint))
						paramsBranch.Child(ag_format.Param("SupportsAutoDerivation", *inst.SupportsAutoDerivation))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            config", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("tokenAdminRegistry", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("         authority", inst.AccountMetaSlice[2]))
					})
				})
		})
}

func (obj SetPoolSupportsAutoDerivation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `SupportsAutoDerivation` param:
	err = encoder.Encode(obj.SupportsAutoDerivation)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetPoolSupportsAutoDerivation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `SupportsAutoDerivation`:
	err = decoder.Decode(&obj.SupportsAutoDerivation)
	if err != nil {
		return err
	}
	return nil
}

// NewSetPoolSupportsAutoDerivationInstruction declares a new SetPoolSupportsAutoDerivation instruction with the provided parameters and accounts.
func NewSetPoolSupportsAutoDerivationInstruction(
	// Parameters:
	mint ag_solanago.PublicKey,
	supportsAutoDerivation bool,
	// Accounts:
	config ag_solanago.PublicKey,
	tokenAdminRegistry ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *SetPoolSupportsAutoDerivation {
	return NewSetPoolSupportsAutoDerivationInstructionBuilder().
		SetMint(mint).
		SetSupportsAutoDerivation(supportsAutoDerivation).
		SetConfigAccount(config).
		SetTokenAdminRegistryAccount(tokenAdminRegistry).
		SetAuthorityAccount(authority)
}
