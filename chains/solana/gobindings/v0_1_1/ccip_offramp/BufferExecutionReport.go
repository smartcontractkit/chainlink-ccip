// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_offramp

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initializes and/or inserts a chunk of report data to an execution report buffer.
//
// When execution reports are too large to fit in a single transaction, they can be chopped
// up in chunks first (as a special case, one chunk is also acceptable), and pre-buffered
// via multiple calls to this instruction.
//
// There's no need to pre-initialize the buffer: all chunks can be sent concurrently, and the
// first one to arrive will initialize the buffer.
//
// To benefit from buffering, the eventual call to `execute` or `manually_execute` must
// include an additional `remaining_account` with the PDA derived from
// ["execution_report_buffer", <buffer_id>, <caller_pubkey>].
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for buffering.
// * `buffer_id` - An arbitrary buffer id defined by the caller (could be the message_id).
// * `report_length` - Total length in bytes of the execution report.
// * `chunk` - The specific chunk to add to the buffer. Chunk must have a consistent size, except
// the last one in the buffer, which may be smaller.
// * `chunk_index` - The index of this chunk.
// * `num_chunks` - The total number of chunks in the report.
type BufferExecutionReport struct {
	BufferId     *[]byte
	ReportLength *uint32
	Chunk        *[]byte
	ChunkIndex   *uint8
	NumChunks    *uint8

	// [0] = [WRITE] executionReportBuffer
	//
	// [1] = [] config
	//
	// [2] = [WRITE, SIGNER] authority
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewBufferExecutionReportInstructionBuilder creates a new `BufferExecutionReport` instruction builder.
func NewBufferExecutionReportInstructionBuilder() *BufferExecutionReport {
	nd := &BufferExecutionReport{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetBufferId sets the "bufferId" parameter.
func (inst *BufferExecutionReport) SetBufferId(bufferId []byte) *BufferExecutionReport {
	inst.BufferId = &bufferId
	return inst
}

// SetReportLength sets the "reportLength" parameter.
func (inst *BufferExecutionReport) SetReportLength(reportLength uint32) *BufferExecutionReport {
	inst.ReportLength = &reportLength
	return inst
}

// SetChunk sets the "chunk" parameter.
func (inst *BufferExecutionReport) SetChunk(chunk []byte) *BufferExecutionReport {
	inst.Chunk = &chunk
	return inst
}

// SetChunkIndex sets the "chunkIndex" parameter.
func (inst *BufferExecutionReport) SetChunkIndex(chunkIndex uint8) *BufferExecutionReport {
	inst.ChunkIndex = &chunkIndex
	return inst
}

// SetNumChunks sets the "numChunks" parameter.
func (inst *BufferExecutionReport) SetNumChunks(numChunks uint8) *BufferExecutionReport {
	inst.NumChunks = &numChunks
	return inst
}

// SetExecutionReportBufferAccount sets the "executionReportBuffer" account.
func (inst *BufferExecutionReport) SetExecutionReportBufferAccount(executionReportBuffer ag_solanago.PublicKey) *BufferExecutionReport {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(executionReportBuffer).WRITE()
	return inst
}

// GetExecutionReportBufferAccount gets the "executionReportBuffer" account.
func (inst *BufferExecutionReport) GetExecutionReportBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetConfigAccount sets the "config" account.
func (inst *BufferExecutionReport) SetConfigAccount(config ag_solanago.PublicKey) *BufferExecutionReport {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *BufferExecutionReport) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *BufferExecutionReport) SetAuthorityAccount(authority ag_solanago.PublicKey) *BufferExecutionReport {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *BufferExecutionReport) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *BufferExecutionReport) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *BufferExecutionReport {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *BufferExecutionReport) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

func (inst BufferExecutionReport) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BufferExecutionReport,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BufferExecutionReport) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BufferExecutionReport) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BufferId == nil {
			return errors.New("BufferId parameter is not set")
		}
		if inst.ReportLength == nil {
			return errors.New("ReportLength parameter is not set")
		}
		if inst.Chunk == nil {
			return errors.New("Chunk parameter is not set")
		}
		if inst.ChunkIndex == nil {
			return errors.New("ChunkIndex parameter is not set")
		}
		if inst.NumChunks == nil {
			return errors.New("NumChunks parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ExecutionReportBuffer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *BufferExecutionReport) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BufferExecutionReport")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    BufferId", *inst.BufferId))
						paramsBranch.Child(ag_format.Param("ReportLength", *inst.ReportLength))
						paramsBranch.Child(ag_format.Param("       Chunk", *inst.Chunk))
						paramsBranch.Child(ag_format.Param("  ChunkIndex", *inst.ChunkIndex))
						paramsBranch.Child(ag_format.Param("   NumChunks", *inst.NumChunks))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("executionReportBuffer", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("               config", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("            authority", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("        systemProgram", inst.AccountMetaSlice[3]))
					})
				})
		})
}

func (obj BufferExecutionReport) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BufferId` param:
	err = encoder.Encode(obj.BufferId)
	if err != nil {
		return err
	}
	// Serialize `ReportLength` param:
	err = encoder.Encode(obj.ReportLength)
	if err != nil {
		return err
	}
	// Serialize `Chunk` param:
	err = encoder.Encode(obj.Chunk)
	if err != nil {
		return err
	}
	// Serialize `ChunkIndex` param:
	err = encoder.Encode(obj.ChunkIndex)
	if err != nil {
		return err
	}
	// Serialize `NumChunks` param:
	err = encoder.Encode(obj.NumChunks)
	if err != nil {
		return err
	}
	return nil
}
func (obj *BufferExecutionReport) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BufferId`:
	err = decoder.Decode(&obj.BufferId)
	if err != nil {
		return err
	}
	// Deserialize `ReportLength`:
	err = decoder.Decode(&obj.ReportLength)
	if err != nil {
		return err
	}
	// Deserialize `Chunk`:
	err = decoder.Decode(&obj.Chunk)
	if err != nil {
		return err
	}
	// Deserialize `ChunkIndex`:
	err = decoder.Decode(&obj.ChunkIndex)
	if err != nil {
		return err
	}
	// Deserialize `NumChunks`:
	err = decoder.Decode(&obj.NumChunks)
	if err != nil {
		return err
	}
	return nil
}

// NewBufferExecutionReportInstruction declares a new BufferExecutionReport instruction with the provided parameters and accounts.
func NewBufferExecutionReportInstruction(
	// Parameters:
	bufferId []byte,
	reportLength uint32,
	chunk []byte,
	chunkIndex uint8,
	numChunks uint8,
	// Accounts:
	executionReportBuffer ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *BufferExecutionReport {
	return NewBufferExecutionReportInstructionBuilder().
		SetBufferId(bufferId).
		SetReportLength(reportLength).
		SetChunk(chunk).
		SetChunkIndex(chunkIndex).
		SetNumChunks(numChunks).
		SetExecutionReportBufferAccount(executionReportBuffer).
		SetConfigAccount(config).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
