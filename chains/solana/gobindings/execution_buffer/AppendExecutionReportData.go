// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package execution_buffer

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AppendExecutionReportData is the `appendExecutionReportData` instruction.
type AppendExecutionReportData struct {
	BufferId *BufferId
	Data     *[]byte

	// [0] = [WRITE] bufferedReport
	//
	// [1] = [WRITE, SIGNER] authority
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewAppendExecutionReportDataInstructionBuilder creates a new `AppendExecutionReportData` instruction builder.
func NewAppendExecutionReportDataInstructionBuilder() *AppendExecutionReportData {
	nd := &AppendExecutionReportData{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetBufferId sets the "bufferId" parameter.
func (inst *AppendExecutionReportData) SetBufferId(bufferId BufferId) *AppendExecutionReportData {
	inst.BufferId = &bufferId
	return inst
}

// SetData sets the "data" parameter.
func (inst *AppendExecutionReportData) SetData(data []byte) *AppendExecutionReportData {
	inst.Data = &data
	return inst
}

// SetBufferedReportAccount sets the "bufferedReport" account.
func (inst *AppendExecutionReportData) SetBufferedReportAccount(bufferedReport ag_solanago.PublicKey) *AppendExecutionReportData {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(bufferedReport).WRITE()
	return inst
}

// GetBufferedReportAccount gets the "bufferedReport" account.
func (inst *AppendExecutionReportData) GetBufferedReportAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *AppendExecutionReportData) SetAuthorityAccount(authority ag_solanago.PublicKey) *AppendExecutionReportData {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *AppendExecutionReportData) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AppendExecutionReportData) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AppendExecutionReportData {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AppendExecutionReportData) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

func (inst AppendExecutionReportData) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AppendExecutionReportData,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AppendExecutionReportData) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AppendExecutionReportData) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BufferId == nil {
			return errors.New("BufferId parameter is not set")
		}
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.BufferedReport is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AppendExecutionReportData) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AppendExecutionReportData")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("BufferId", *inst.BufferId))
						paramsBranch.Child(ag_format.Param("    Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("bufferedReport", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice[2]))
					})
				})
		})
}

func (obj AppendExecutionReportData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BufferId` param:
	err = encoder.Encode(obj.BufferId)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AppendExecutionReportData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BufferId`:
	err = decoder.Decode(&obj.BufferId)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewAppendExecutionReportDataInstruction declares a new AppendExecutionReportData instruction with the provided parameters and accounts.
func NewAppendExecutionReportDataInstruction(
	// Parameters:
	bufferId BufferId,
	data []byte,
	// Accounts:
	bufferedReport ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AppendExecutionReportData {
	return NewAppendExecutionReportDataInstructionBuilder().
		SetBufferId(bufferId).
		SetData(data).
		SetBufferedReportAccount(bufferedReport).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
