// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package execution_buffer

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
)

type BufferedReport struct {
	RawReportData []byte
}

var BufferedReportDiscriminator = [8]byte{254, 62, 88, 45, 181, 195, 160, 253}

func (obj BufferedReport) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BufferedReportDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `RawReportData` param:
	err = encoder.Encode(obj.RawReportData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BufferedReport) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BufferedReportDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[254 62 88 45 181 195 160 253]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `RawReportData`:
	err = decoder.Decode(&obj.RawReportData)
	if err != nil {
		return err
	}
	return nil
}
