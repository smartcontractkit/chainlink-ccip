// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mcm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Finalize the signer configuration.
//
// Marks the signer list as complete and ready for incorporation into the multisig configuration.
//
// # Parameters
//
// - `ctx`: The context containing required accounts.
// - `multisig_id`: The multisig instance identifier.
type FinalizeSignersInstruction struct {
	MultisigId *[32]uint8

	// [0] = [] multisig_config
	//
	// [1] = [WRITE] config_signers
	//
	// [2] = [WRITE, SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFinalizeSignersInstructionBuilder creates a new `FinalizeSignersInstruction` instruction builder.
func NewFinalizeSignersInstructionBuilder() *FinalizeSignersInstruction {
	nd := &FinalizeSignersInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetMultisigId sets the "multisig_id" parameter.
func (inst *FinalizeSignersInstruction) SetMultisigId(multisig_id [32]uint8) *FinalizeSignersInstruction {
	inst.MultisigId = &multisig_id
	return inst
}

// SetMultisigConfigAccount sets the "multisig_config" account.
func (inst *FinalizeSignersInstruction) SetMultisigConfigAccount(multisigConfig ag_solanago.PublicKey) *FinalizeSignersInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisigConfig)
	return inst
}

// GetMultisigConfigAccount gets the "multisig_config" account.
func (inst *FinalizeSignersInstruction) GetMultisigConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigSignersAccount sets the "config_signers" account.
func (inst *FinalizeSignersInstruction) SetConfigSignersAccount(configSigners ag_solanago.PublicKey) *FinalizeSignersInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(configSigners).WRITE()
	return inst
}

// GetConfigSignersAccount gets the "config_signers" account.
func (inst *FinalizeSignersInstruction) GetConfigSignersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *FinalizeSignersInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *FinalizeSignersInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *FinalizeSignersInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst FinalizeSignersInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FinalizeSigners,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FinalizeSignersInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FinalizeSignersInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MultisigId == nil {
			return errors.New("MultisigId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MultisigConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ConfigSigners is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *FinalizeSignersInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FinalizeSigners")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" MultisigId", *inst.MultisigId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("multisig_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" config_signers", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj FinalizeSignersInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MultisigId` param:
	err = encoder.Encode(obj.MultisigId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *FinalizeSignersInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MultisigId`:
	err = decoder.Decode(&obj.MultisigId)
	if err != nil {
		return err
	}
	return nil
}

// NewFinalizeSignersInstruction declares a new FinalizeSigners instruction with the provided parameters and accounts.
func NewFinalizeSignersInstruction(
	// Parameters:
	multisig_id [32]uint8,
	// Accounts:
	multisigConfig ag_solanago.PublicKey,
	configSigners ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *FinalizeSignersInstruction {
	return NewFinalizeSignersInstructionBuilder().
		SetMultisigId(multisig_id).
		SetMultisigConfigAccount(multisigConfig).
		SetConfigSignersAccount(configSigners).
		SetAuthorityAccount(authority)
}
