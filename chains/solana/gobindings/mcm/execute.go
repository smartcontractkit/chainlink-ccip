// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mcm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Execute is the `execute` instruction.
type Execute struct {
	MultisigId *[32]uint8
	ChainId    *uint64
	Nonce      *uint64
	Data       *[]byte
	Proof      *[][32]uint8

	// [0] = [WRITE] multisig_config
	//
	// [1] = [] root_metadata
	//
	// [2] = [WRITE] expiring_root_and_op_count
	//
	// [3] = [] to
	//
	// [4] = [] multisig_signer
	//
	// [5] = [WRITE, SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExecuteInstructionBuilder creates a new `Execute` instruction builder.
func NewExecuteInstructionBuilder() *Execute {
	nd := &Execute{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetMultisigId sets the "multisig_id" parameter.
func (inst *Execute) SetMultisigId(multisig_id [32]uint8) *Execute {
	inst.MultisigId = &multisig_id
	return inst
}

// SetChainId sets the "chain_id" parameter.
func (inst *Execute) SetChainId(chain_id uint64) *Execute {
	inst.ChainId = &chain_id
	return inst
}

// SetNonce sets the "nonce" parameter.
func (inst *Execute) SetNonce(nonce uint64) *Execute {
	inst.Nonce = &nonce
	return inst
}

// SetData sets the "data" parameter.
func (inst *Execute) SetData(data []byte) *Execute {
	inst.Data = &data
	return inst
}

// SetProof sets the "proof" parameter.
func (inst *Execute) SetProof(proof [][32]uint8) *Execute {
	inst.Proof = &proof
	return inst
}

// SetMultisigConfigAccount sets the "multisig_config" account.
func (inst *Execute) SetMultisigConfigAccount(multisigConfig ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisigConfig).WRITE()
	return inst
}

// GetMultisigConfigAccount gets the "multisig_config" account.
func (inst *Execute) GetMultisigConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRootMetadataAccount sets the "root_metadata" account.
func (inst *Execute) SetRootMetadataAccount(rootMetadata ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(rootMetadata)
	return inst
}

// GetRootMetadataAccount gets the "root_metadata" account.
func (inst *Execute) GetRootMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetExpiringRootAndOpCountAccount sets the "expiring_root_and_op_count" account.
func (inst *Execute) SetExpiringRootAndOpCountAccount(expiringRootAndOpCount ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(expiringRootAndOpCount).WRITE()
	return inst
}

// GetExpiringRootAndOpCountAccount gets the "expiring_root_and_op_count" account.
func (inst *Execute) GetExpiringRootAndOpCountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetToAccount sets the "to" account.
func (inst *Execute) SetToAccount(to ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(to)
	return inst
}

// GetToAccount gets the "to" account.
func (inst *Execute) GetToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMultisigSignerAccount sets the "multisig_signer" account.
func (inst *Execute) SetMultisigSignerAccount(multisigSigner ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(multisigSigner)
	return inst
}

// GetMultisigSignerAccount gets the "multisig_signer" account.
func (inst *Execute) GetMultisigSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Execute) SetAuthorityAccount(authority ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Execute) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst Execute) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Execute,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Execute) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Execute) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MultisigId == nil {
			return errors.New("MultisigId parameter is not set")
		}
		if inst.ChainId == nil {
			return errors.New("ChainId parameter is not set")
		}
		if inst.Nonce == nil {
			return errors.New("Nonce parameter is not set")
		}
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
		if inst.Proof == nil {
			return errors.New("Proof parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MultisigConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RootMetadata is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ExpiringRootAndOpCount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.To is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MultisigSigner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *Execute) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Execute")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" MultisigId", *inst.MultisigId))
						paramsBranch.Child(ag_format.Param("    ChainId", *inst.ChainId))
						paramsBranch.Child(ag_format.Param("      Nonce", *inst.Nonce))
						paramsBranch.Child(ag_format.Param("       Data", *inst.Data))
						paramsBranch.Child(ag_format.Param("      Proof", *inst.Proof))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           multisig_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             root_metadata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("expiring_root_and_op_count", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                        to", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           multisig_signer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 authority", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj Execute) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MultisigId` param:
	err = encoder.Encode(obj.MultisigId)
	if err != nil {
		return err
	}
	// Serialize `ChainId` param:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Proof` param:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Execute) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MultisigId`:
	err = decoder.Decode(&obj.MultisigId)
	if err != nil {
		return err
	}
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return err
	}
	return nil
}

// NewExecuteInstruction declares a new Execute instruction with the provided parameters and accounts.
func NewExecuteInstruction(
	// Parameters:
	multisig_id [32]uint8,
	chain_id uint64,
	nonce uint64,
	data []byte,
	proof [][32]uint8,
	// Accounts:
	multisigConfig ag_solanago.PublicKey,
	rootMetadata ag_solanago.PublicKey,
	expiringRootAndOpCount ag_solanago.PublicKey,
	to ag_solanago.PublicKey,
	multisigSigner ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *Execute {
	return NewExecuteInstructionBuilder().
		SetMultisigId(multisig_id).
		SetChainId(chain_id).
		SetNonce(nonce).
		SetData(data).
		SetProof(proof).
		SetMultisigConfigAccount(multisigConfig).
		SetRootMetadataAccount(rootMetadata).
		SetExpiringRootAndOpCountAccount(expiringRootAndOpCount).
		SetToAccount(to).
		SetMultisigSignerAccount(multisigSigner).
		SetAuthorityAccount(authority)
}
