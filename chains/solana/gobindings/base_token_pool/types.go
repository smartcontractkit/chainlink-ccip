// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package base_token_pool

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Burned struct {
	Sender ag_solanago.PublicKey
	Amount uint64
	Mint   ag_solanago.PublicKey
}

func (obj Burned) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Burned) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type ConfigChanged struct {
	Config RateLimitConfig
}

func (obj ConfigChanged) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigChanged) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

type GlobalConfigUpdated struct {
	SelfServedAllowed bool
}

func (obj GlobalConfigUpdated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SelfServedAllowed` param:
	err = encoder.Encode(obj.SelfServedAllowed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GlobalConfigUpdated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SelfServedAllowed`:
	err = decoder.Decode(&obj.SelfServedAllowed)
	if err != nil {
		return err
	}
	return nil
}

type Locked struct {
	Sender ag_solanago.PublicKey
	Amount uint64
	Mint   ag_solanago.PublicKey
}

func (obj Locked) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Locked) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type MintAuthorityTransferred struct {
	Mint             ag_solanago.PublicKey
	OldMintAuthority ag_solanago.PublicKey
	NewMintAuthority ag_solanago.PublicKey
}

func (obj MintAuthorityTransferred) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `OldMintAuthority` param:
	err = encoder.Encode(obj.OldMintAuthority)
	if err != nil {
		return err
	}
	// Serialize `NewMintAuthority` param:
	err = encoder.Encode(obj.NewMintAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MintAuthorityTransferred) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `OldMintAuthority`:
	err = decoder.Decode(&obj.OldMintAuthority)
	if err != nil {
		return err
	}
	// Deserialize `NewMintAuthority`:
	err = decoder.Decode(&obj.NewMintAuthority)
	if err != nil {
		return err
	}
	return nil
}

type Minted struct {
	Sender    ag_solanago.PublicKey
	Recipient ag_solanago.PublicKey
	Amount    uint64
	Mint      ag_solanago.PublicKey
}

func (obj Minted) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Recipient` param:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Minted) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type OwnershipTransferRequested struct {
	From ag_solanago.PublicKey
	To   ag_solanago.PublicKey
	Mint ag_solanago.PublicKey
}

func (obj OwnershipTransferRequested) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OwnershipTransferRequested) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type OwnershipTransferred struct {
	From ag_solanago.PublicKey
	To   ag_solanago.PublicKey
	Mint ag_solanago.PublicKey
}

func (obj OwnershipTransferred) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OwnershipTransferred) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type RateLimitConfig struct {
	Enabled  bool
	Capacity uint64
	Rate     uint64
}

func (obj RateLimitConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Capacity` param:
	err = encoder.Encode(obj.Capacity)
	if err != nil {
		return err
	}
	// Serialize `Rate` param:
	err = encoder.Encode(obj.Rate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RateLimitConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Capacity`:
	err = decoder.Decode(&obj.Capacity)
	if err != nil {
		return err
	}
	// Deserialize `Rate`:
	err = decoder.Decode(&obj.Rate)
	if err != nil {
		return err
	}
	return nil
}

type RateLimitConfigured struct {
	ChainSelector     uint64
	OutboundRateLimit RateLimitConfig
	InboundRateLimit  RateLimitConfig
	Mint              ag_solanago.PublicKey
}

func (obj RateLimitConfigured) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `OutboundRateLimit` param:
	err = encoder.Encode(obj.OutboundRateLimit)
	if err != nil {
		return err
	}
	// Serialize `InboundRateLimit` param:
	err = encoder.Encode(obj.InboundRateLimit)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RateLimitConfigured) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `OutboundRateLimit`:
	err = decoder.Decode(&obj.OutboundRateLimit)
	if err != nil {
		return err
	}
	// Deserialize `InboundRateLimit`:
	err = decoder.Decode(&obj.InboundRateLimit)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type Released struct {
	Sender    ag_solanago.PublicKey
	Recipient ag_solanago.PublicKey
	Amount    uint64
	Mint      ag_solanago.PublicKey
}

func (obj Released) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Recipient` param:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Released) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type RemoteAddress struct {
	Address []byte
}

func (obj RemoteAddress) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoteAddress) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

type RemoteChainConfigured struct {
	ChainSelector         uint64
	Token                 RemoteAddress
	PreviousToken         RemoteAddress
	PoolAddresses         []RemoteAddress
	PreviousPoolAddresses []RemoteAddress
	Mint                  ag_solanago.PublicKey
}

func (obj RemoteChainConfigured) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `PreviousToken` param:
	err = encoder.Encode(obj.PreviousToken)
	if err != nil {
		return err
	}
	// Serialize `PoolAddresses` param:
	err = encoder.Encode(obj.PoolAddresses)
	if err != nil {
		return err
	}
	// Serialize `PreviousPoolAddresses` param:
	err = encoder.Encode(obj.PreviousPoolAddresses)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoteChainConfigured) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `PreviousToken`:
	err = decoder.Decode(&obj.PreviousToken)
	if err != nil {
		return err
	}
	// Deserialize `PoolAddresses`:
	err = decoder.Decode(&obj.PoolAddresses)
	if err != nil {
		return err
	}
	// Deserialize `PreviousPoolAddresses`:
	err = decoder.Decode(&obj.PreviousPoolAddresses)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type RemoteChainRemoved struct {
	ChainSelector uint64
	Mint          ag_solanago.PublicKey
}

func (obj RemoteChainRemoved) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoteChainRemoved) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type RemotePoolsAppended struct {
	ChainSelector         uint64
	PoolAddresses         []RemoteAddress
	PreviousPoolAddresses []RemoteAddress
	Mint                  ag_solanago.PublicKey
}

func (obj RemotePoolsAppended) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `PoolAddresses` param:
	err = encoder.Encode(obj.PoolAddresses)
	if err != nil {
		return err
	}
	// Serialize `PreviousPoolAddresses` param:
	err = encoder.Encode(obj.PreviousPoolAddresses)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemotePoolsAppended) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `PoolAddresses`:
	err = decoder.Decode(&obj.PoolAddresses)
	if err != nil {
		return err
	}
	// Deserialize `PreviousPoolAddresses`:
	err = decoder.Decode(&obj.PreviousPoolAddresses)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type RouterUpdated struct {
	OldRouter ag_solanago.PublicKey
	NewRouter ag_solanago.PublicKey
	Mint      ag_solanago.PublicKey
}

func (obj RouterUpdated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OldRouter` param:
	err = encoder.Encode(obj.OldRouter)
	if err != nil {
		return err
	}
	// Serialize `NewRouter` param:
	err = encoder.Encode(obj.NewRouter)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RouterUpdated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OldRouter`:
	err = decoder.Decode(&obj.OldRouter)
	if err != nil {
		return err
	}
	// Deserialize `NewRouter`:
	err = decoder.Decode(&obj.NewRouter)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type TokensConsumed struct {
	Tokens uint64
}

func (obj TokensConsumed) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Tokens` param:
	err = encoder.Encode(obj.Tokens)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokensConsumed) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Tokens`:
	err = decoder.Decode(&obj.Tokens)
	if err != nil {
		return err
	}
	return nil
}
