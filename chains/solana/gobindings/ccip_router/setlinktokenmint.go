// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sets the address of the LINK token mint.
// The Admin is the only one able to set it.
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for updating the configuration.
// * `link_token_mint` - The new address of the LINK token mint.
type SetLinkTokenMintInstruction struct {
	LinkTokenMint *ag_solanago.PublicKey

	// [0] = [WRITE] config
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetLinkTokenMintInstructionBuilder creates a new `SetLinkTokenMintInstruction` instruction builder.
func NewSetLinkTokenMintInstructionBuilder() *SetLinkTokenMintInstruction {
	nd := &SetLinkTokenMintInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetLinkTokenMint sets the "link_token_mint" parameter.
func (inst *SetLinkTokenMintInstruction) SetLinkTokenMint(link_token_mint ag_solanago.PublicKey) *SetLinkTokenMintInstruction {
	inst.LinkTokenMint = &link_token_mint
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *SetLinkTokenMintInstruction) SetConfigAccount(config ag_solanago.PublicKey) *SetLinkTokenMintInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *SetLinkTokenMintInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SetLinkTokenMintInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetLinkTokenMintInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SetLinkTokenMintInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *SetLinkTokenMintInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SetLinkTokenMintInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *SetLinkTokenMintInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst SetLinkTokenMintInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetLinkTokenMint,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetLinkTokenMintInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetLinkTokenMintInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LinkTokenMint == nil {
			return errors.New("LinkTokenMint parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *SetLinkTokenMintInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetLinkTokenMint")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  LinkTokenMint", *inst.LinkTokenMint))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj SetLinkTokenMintInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LinkTokenMint` param:
	err = encoder.Encode(obj.LinkTokenMint)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetLinkTokenMintInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LinkTokenMint`:
	err = decoder.Decode(&obj.LinkTokenMint)
	if err != nil {
		return err
	}
	return nil
}

// NewSetLinkTokenMintInstruction declares a new SetLinkTokenMint instruction with the provided parameters and accounts.
func NewSetLinkTokenMintInstruction(
	// Parameters:
	link_token_mint ag_solanago.PublicKey,
	// Accounts:
	config ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *SetLinkTokenMintInstruction {
	return NewSetLinkTokenMintInstructionBuilder().
		SetLinkTokenMint(link_token_mint).
		SetConfigAccount(config).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
