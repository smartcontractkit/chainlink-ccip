// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OFF RAMP FLOW
// Commits a report to the router.
//
// The method name needs to be commit with Anchor encoding.
//
// This function is called by the OffChain when committing one Report to the SVM Router.
// In this Flow only one report is sent, the Commit Report. This is different as EVM does,
// this is because here all the chain state is stored in one account per Merkle Tree Root.
// So, to avoid having to send a dynamic size array of accounts, in this message only one Commit Report Account is sent.
// This message validates the signatures of the report and stores the Merkle Root in the Commit Report Account.
// The Report must contain an interval of messages, and the min of them must be the next sequence number expected.
// The max size of the interval is 64.
// This message emits two events: CommitReportAccepted and Transmitted.
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for the commit.
// * `report_context_byte_words` - consists of:
// * report_context_byte_words[0]: ConfigDigest
// * report_context_byte_words[1]: 24 byte padding, 8 byte sequence number
// * report_context_byte_words[2]: ExtraHash
// * `report` - The commit input report, single merkle root with RMN signatures and price updates
// * `signatures` - The list of signatures. v0.29.0 - anchor idl does not build with ocr3base::SIGNATURE_LENGTH
type Commit struct {
	ReportContextByteWords *[3][32]uint8
	Report                 *CommitInput
	Signatures             *[][65]uint8

	// [0] = [] config
	//
	// [1] = [WRITE] sourceChainState
	//
	// [2] = [WRITE] commitReport
	//
	// [3] = [WRITE, SIGNER] authority
	//
	// [4] = [] systemProgram
	//
	// [5] = [] sysvarInstructions
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewCommitInstructionBuilder creates a new `Commit` instruction builder.
func NewCommitInstructionBuilder() *Commit {
	nd := &Commit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetReportContextByteWords sets the "reportContextByteWords" parameter.
func (inst *Commit) SetReportContextByteWords(reportContextByteWords [3][32]uint8) *Commit {
	inst.ReportContextByteWords = &reportContextByteWords
	return inst
}

// SetReport sets the "report" parameter.
func (inst *Commit) SetReport(report CommitInput) *Commit {
	inst.Report = &report
	return inst
}

// SetSignatures sets the "signatures" parameter.
func (inst *Commit) SetSignatures(signatures [][65]uint8) *Commit {
	inst.Signatures = &signatures
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *Commit) SetConfigAccount(config ag_solanago.PublicKey) *Commit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *Commit) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetSourceChainStateAccount sets the "sourceChainState" account.
func (inst *Commit) SetSourceChainStateAccount(sourceChainState ag_solanago.PublicKey) *Commit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(sourceChainState).WRITE()
	return inst
}

// GetSourceChainStateAccount gets the "sourceChainState" account.
func (inst *Commit) GetSourceChainStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetCommitReportAccount sets the "commitReport" account.
func (inst *Commit) SetCommitReportAccount(commitReport ag_solanago.PublicKey) *Commit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(commitReport).WRITE()
	return inst
}

// GetCommitReportAccount gets the "commitReport" account.
func (inst *Commit) GetCommitReportAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Commit) SetAuthorityAccount(authority ag_solanago.PublicKey) *Commit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Commit) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Commit) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Commit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Commit) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
func (inst *Commit) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *Commit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
func (inst *Commit) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

func (inst Commit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Commit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Commit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Commit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ReportContextByteWords == nil {
			return errors.New("ReportContextByteWords parameter is not set")
		}
		if inst.Report == nil {
			return errors.New("Report parameter is not set")
		}
		if inst.Signatures == nil {
			return errors.New("Signatures parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SourceChainState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CommitReport is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
	}
	return nil
}

func (inst *Commit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Commit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ReportContextByteWords", *inst.ReportContextByteWords))
						paramsBranch.Child(ag_format.Param("                Report", *inst.Report))
						paramsBranch.Child(ag_format.Param("            Signatures", *inst.Signatures))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            config", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("  sourceChainState", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("      commitReport", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("         authority", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("sysvarInstructions", inst.AccountMetaSlice[5]))
					})
				})
		})
}

func (obj Commit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReportContextByteWords` param:
	err = encoder.Encode(obj.ReportContextByteWords)
	if err != nil {
		return err
	}
	// Serialize `Report` param:
	err = encoder.Encode(obj.Report)
	if err != nil {
		return err
	}
	// Serialize `Signatures` param:
	err = encoder.Encode(obj.Signatures)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Commit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReportContextByteWords`:
	err = decoder.Decode(&obj.ReportContextByteWords)
	if err != nil {
		return err
	}
	// Deserialize `Report`:
	err = decoder.Decode(&obj.Report)
	if err != nil {
		return err
	}
	// Deserialize `Signatures`:
	err = decoder.Decode(&obj.Signatures)
	if err != nil {
		return err
	}
	return nil
}

// NewCommitInstruction declares a new Commit instruction with the provided parameters and accounts.
func NewCommitInstruction(
	// Parameters:
	reportContextByteWords [3][32]uint8,
	report CommitInput,
	signatures [][65]uint8,
	// Accounts:
	config ag_solanago.PublicKey,
	sourceChainState ag_solanago.PublicKey,
	commitReport ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey) *Commit {
	return NewCommitInstructionBuilder().
		SetReportContextByteWords(reportContextByteWords).
		SetReport(report).
		SetSignatures(signatures).
		SetConfigAccount(config).
		SetSourceChainStateAccount(sourceChainState).
		SetCommitReportAccount(commitReport).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions)
}
