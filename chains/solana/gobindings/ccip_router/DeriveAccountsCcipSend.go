// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeriveAccountsCcipSend is the `deriveAccountsCcipSend` instruction.
type DeriveAccountsCcipSend struct {
	Params *DeriveAccountsCcipSendParams
	Stage  *string

	// [0] = [] config
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewDeriveAccountsCcipSendInstructionBuilder creates a new `DeriveAccountsCcipSend` instruction builder.
func NewDeriveAccountsCcipSendInstructionBuilder() *DeriveAccountsCcipSend {
	nd := &DeriveAccountsCcipSend{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *DeriveAccountsCcipSend) SetParams(params DeriveAccountsCcipSendParams) *DeriveAccountsCcipSend {
	inst.Params = &params
	return inst
}

// SetStage sets the "stage" parameter.
func (inst *DeriveAccountsCcipSend) SetStage(stage string) *DeriveAccountsCcipSend {
	inst.Stage = &stage
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *DeriveAccountsCcipSend) SetConfigAccount(config ag_solanago.PublicKey) *DeriveAccountsCcipSend {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *DeriveAccountsCcipSend) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

func (inst DeriveAccountsCcipSend) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeriveAccountsCcipSend,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeriveAccountsCcipSend) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeriveAccountsCcipSend) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
		if inst.Stage == nil {
			return errors.New("Stage parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
	}
	return nil
}

func (inst *DeriveAccountsCcipSend) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeriveAccountsCcipSend")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
						paramsBranch.Child(ag_format.Param(" Stage", *inst.Stage))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("config", inst.AccountMetaSlice[0]))
					})
				})
		})
}

func (obj DeriveAccountsCcipSend) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	// Serialize `Stage` param:
	err = encoder.Encode(obj.Stage)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DeriveAccountsCcipSend) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	// Deserialize `Stage`:
	err = decoder.Decode(&obj.Stage)
	if err != nil {
		return err
	}
	return nil
}

// NewDeriveAccountsCcipSendInstruction declares a new DeriveAccountsCcipSend instruction with the provided parameters and accounts.
func NewDeriveAccountsCcipSendInstruction(
	// Parameters:
	params DeriveAccountsCcipSendParams,
	stage string,
	// Accounts:
	config ag_solanago.PublicKey) *DeriveAccountsCcipSend {
	return NewDeriveAccountsCcipSendInstructionBuilder().
		SetParams(params).
		SetStage(stage).
		SetConfigAccount(config)
}
