// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_rpc "github.com/gagliardetto/solana-go/rpc"
	ag_base58 "github.com/mr-tron/base58"
	"reflect"
	"strings"
)

type AdministratorTransferRequestedEventData struct {
	Token        ag_solanago.PublicKey
	CurrentAdmin ag_solanago.PublicKey
	NewAdmin     ag_solanago.PublicKey
}

var AdministratorTransferRequestedEventDataDiscriminator = [8]byte{159, 30, 110, 86, 22, 35, 70, 125}

func (obj AdministratorTransferRequestedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AdministratorTransferRequestedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `CurrentAdmin` param:
	err = encoder.Encode(obj.CurrentAdmin)
	if err != nil {
		return err
	}
	// Serialize `NewAdmin` param:
	err = encoder.Encode(obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdministratorTransferRequestedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AdministratorTransferRequestedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[159 30 110 86 22 35 70 125]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `CurrentAdmin`:
	err = decoder.Decode(&obj.CurrentAdmin)
	if err != nil {
		return err
	}
	// Deserialize `NewAdmin`:
	err = decoder.Decode(&obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

func (*AdministratorTransferRequestedEventData) isEventData() {}
func (obj *AdministratorTransferRequestedEventData) Self() any {
	return obj
}

type AdministratorTransferredEventData struct {
	Token    ag_solanago.PublicKey
	NewAdmin ag_solanago.PublicKey
}

var AdministratorTransferredEventDataDiscriminator = [8]byte{103, 127, 255, 114, 168, 163, 159, 124}

func (obj AdministratorTransferredEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AdministratorTransferredEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `NewAdmin` param:
	err = encoder.Encode(obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdministratorTransferredEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AdministratorTransferredEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[103 127 255 114 168 163 159 124]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `NewAdmin`:
	err = decoder.Decode(&obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

func (*AdministratorTransferredEventData) isEventData() {}
func (obj *AdministratorTransferredEventData) Self() any {
	return obj
}

type CCIPMessageSentEventData struct {
	DestChainSelector uint64
	SequenceNumber    uint64
	Message           SVM2AnyRampMessage
}

var CCIPMessageSentEventDataDiscriminator = [8]byte{23, 77, 73, 183, 123, 185, 115, 57}

func (obj CCIPMessageSentEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CCIPMessageSentEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CCIPMessageSentEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CCIPMessageSentEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[23 77 73 183 123 185 115 57]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	return nil
}

func (*CCIPMessageSentEventData) isEventData() {}
func (obj *CCIPMessageSentEventData) Self() any {
	return obj
}

type CcipVersionForDestChainVersionBumpedEventData struct {
	DestChainSelector      uint64
	PreviousSequenceNumber uint64
	NewSequenceNumber      uint64
}

var CcipVersionForDestChainVersionBumpedEventDataDiscriminator = [8]byte{81, 97, 90, 70, 154, 163, 255, 78}

func (obj CcipVersionForDestChainVersionBumpedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CcipVersionForDestChainVersionBumpedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `PreviousSequenceNumber` param:
	err = encoder.Encode(obj.PreviousSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `NewSequenceNumber` param:
	err = encoder.Encode(obj.NewSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CcipVersionForDestChainVersionBumpedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CcipVersionForDestChainVersionBumpedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[81 97 90 70 154 163 255 78]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `PreviousSequenceNumber`:
	err = decoder.Decode(&obj.PreviousSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `NewSequenceNumber`:
	err = decoder.Decode(&obj.NewSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (*CcipVersionForDestChainVersionBumpedEventData) isEventData() {}
func (obj *CcipVersionForDestChainVersionBumpedEventData) Self() any {
	return obj
}

type CcipVersionForDestChainVersionRolledBackEventData struct {
	DestChainSelector      uint64
	PreviousSequenceNumber uint64
	NewSequenceNumber      uint64
}

var CcipVersionForDestChainVersionRolledBackEventDataDiscriminator = [8]byte{50, 79, 44, 175, 232, 241, 225, 171}

func (obj CcipVersionForDestChainVersionRolledBackEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CcipVersionForDestChainVersionRolledBackEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `PreviousSequenceNumber` param:
	err = encoder.Encode(obj.PreviousSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `NewSequenceNumber` param:
	err = encoder.Encode(obj.NewSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CcipVersionForDestChainVersionRolledBackEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CcipVersionForDestChainVersionRolledBackEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[50 79 44 175 232 241 225 171]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `PreviousSequenceNumber`:
	err = decoder.Decode(&obj.PreviousSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `NewSequenceNumber`:
	err = decoder.Decode(&obj.NewSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (*CcipVersionForDestChainVersionRolledBackEventData) isEventData() {}
func (obj *CcipVersionForDestChainVersionRolledBackEventData) Self() any {
	return obj
}

type ConfigSetEventData struct {
	SvmChainSelector uint64
	FeeQuoter        ag_solanago.PublicKey
	RmnRemote        ag_solanago.PublicKey
	LinkTokenMint    ag_solanago.PublicKey
	FeeAggregator    ag_solanago.PublicKey
}

var ConfigSetEventDataDiscriminator = [8]byte{15, 104, 59, 16, 236, 241, 8, 6}

func (obj ConfigSetEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ConfigSetEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SvmChainSelector` param:
	err = encoder.Encode(obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Serialize `FeeQuoter` param:
	err = encoder.Encode(obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Serialize `RmnRemote` param:
	err = encoder.Encode(obj.RmnRemote)
	if err != nil {
		return err
	}
	// Serialize `LinkTokenMint` param:
	err = encoder.Encode(obj.LinkTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FeeAggregator` param:
	err = encoder.Encode(obj.FeeAggregator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigSetEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ConfigSetEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[15 104 59 16 236 241 8 6]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SvmChainSelector`:
	err = decoder.Decode(&obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `FeeQuoter`:
	err = decoder.Decode(&obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Deserialize `RmnRemote`:
	err = decoder.Decode(&obj.RmnRemote)
	if err != nil {
		return err
	}
	// Deserialize `LinkTokenMint`:
	err = decoder.Decode(&obj.LinkTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeAggregator`:
	err = decoder.Decode(&obj.FeeAggregator)
	if err != nil {
		return err
	}
	return nil
}

func (*ConfigSetEventData) isEventData() {}
func (obj *ConfigSetEventData) Self() any {
	return obj
}

type DestChainAddedEventData struct {
	DestChainSelector uint64
	DestChainConfig   DestChainConfig
}

var DestChainAddedEventDataDiscriminator = [8]byte{59, 154, 48, 81, 230, 41, 80, 200}

func (obj DestChainAddedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DestChainAddedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `DestChainConfig` param:
	err = encoder.Encode(obj.DestChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainAddedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DestChainAddedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[59 154 48 81 230 41 80 200]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `DestChainConfig`:
	err = decoder.Decode(&obj.DestChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (*DestChainAddedEventData) isEventData() {}
func (obj *DestChainAddedEventData) Self() any {
	return obj
}

type DestChainConfigUpdatedEventData struct {
	DestChainSelector uint64
	DestChainConfig   DestChainConfig
}

var DestChainConfigUpdatedEventDataDiscriminator = [8]byte{3, 141, 73, 190, 73, 231, 51, 80}

func (obj DestChainConfigUpdatedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DestChainConfigUpdatedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `DestChainConfig` param:
	err = encoder.Encode(obj.DestChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainConfigUpdatedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DestChainConfigUpdatedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[3 141 73 190 73 231 51 80]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `DestChainConfig`:
	err = decoder.Decode(&obj.DestChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (*DestChainConfigUpdatedEventData) isEventData() {}
func (obj *DestChainConfigUpdatedEventData) Self() any {
	return obj
}

type FeeTokenAddedEventData struct {
	FeeToken ag_solanago.PublicKey
	Enabled  bool
}

var FeeTokenAddedEventDataDiscriminator = [8]byte{181, 180, 252, 21, 215, 79, 93, 237}

func (obj FeeTokenAddedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FeeTokenAddedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTokenAddedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FeeTokenAddedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[181 180 252 21 215 79 93 237]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

func (*FeeTokenAddedEventData) isEventData() {}
func (obj *FeeTokenAddedEventData) Self() any {
	return obj
}

type FeeTokenDisabledEventData struct {
	FeeToken ag_solanago.PublicKey
}

var FeeTokenDisabledEventDataDiscriminator = [8]byte{34, 139, 66, 75, 30, 17, 45, 151}

func (obj FeeTokenDisabledEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FeeTokenDisabledEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTokenDisabledEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FeeTokenDisabledEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[34 139 66 75 30 17 45 151]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

func (*FeeTokenDisabledEventData) isEventData() {}
func (obj *FeeTokenDisabledEventData) Self() any {
	return obj
}

type FeeTokenEnabledEventData struct {
	FeeToken ag_solanago.PublicKey
}

var FeeTokenEnabledEventDataDiscriminator = [8]byte{106, 180, 145, 189, 113, 180, 21, 15}

func (obj FeeTokenEnabledEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FeeTokenEnabledEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTokenEnabledEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FeeTokenEnabledEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[106 180 145 189 113 180 21 15]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

func (*FeeTokenEnabledEventData) isEventData() {}
func (obj *FeeTokenEnabledEventData) Self() any {
	return obj
}

type FeeTokenRemovedEventData struct {
	FeeToken ag_solanago.PublicKey
}

var FeeTokenRemovedEventDataDiscriminator = [8]byte{40, 31, 230, 252, 183, 150, 147, 201}

func (obj FeeTokenRemovedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FeeTokenRemovedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTokenRemovedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FeeTokenRemovedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[40 31 230 252 183 150 147 201]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

func (*FeeTokenRemovedEventData) isEventData() {}
func (obj *FeeTokenRemovedEventData) Self() any {
	return obj
}

type OfframpAddedEventData struct {
	SourceChainSelector uint64
	Offramp             ag_solanago.PublicKey
}

var OfframpAddedEventDataDiscriminator = [8]byte{158, 77, 52, 73, 113, 247, 76, 150}

func (obj OfframpAddedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OfframpAddedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Offramp` param:
	err = encoder.Encode(obj.Offramp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OfframpAddedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OfframpAddedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[158 77 52 73 113 247 76 150]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Offramp`:
	err = decoder.Decode(&obj.Offramp)
	if err != nil {
		return err
	}
	return nil
}

func (*OfframpAddedEventData) isEventData() {}
func (obj *OfframpAddedEventData) Self() any {
	return obj
}

type OfframpRemovedEventData struct {
	SourceChainSelector uint64
	Offramp             ag_solanago.PublicKey
}

var OfframpRemovedEventDataDiscriminator = [8]byte{231, 81, 202, 9, 89, 193, 154, 37}

func (obj OfframpRemovedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OfframpRemovedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Offramp` param:
	err = encoder.Encode(obj.Offramp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OfframpRemovedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OfframpRemovedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[231 81 202 9 89 193 154 37]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Offramp`:
	err = decoder.Decode(&obj.Offramp)
	if err != nil {
		return err
	}
	return nil
}

func (*OfframpRemovedEventData) isEventData() {}
func (obj *OfframpRemovedEventData) Self() any {
	return obj
}

type OwnershipTransferRequestedEventData struct {
	From ag_solanago.PublicKey
	To   ag_solanago.PublicKey
}

var OwnershipTransferRequestedEventDataDiscriminator = [8]byte{79, 54, 99, 123, 57, 244, 134, 35}

func (obj OwnershipTransferRequestedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OwnershipTransferRequestedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OwnershipTransferRequestedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OwnershipTransferRequestedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[79 54 99 123 57 244 134 35]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (*OwnershipTransferRequestedEventData) isEventData() {}
func (obj *OwnershipTransferRequestedEventData) Self() any {
	return obj
}

type OwnershipTransferredEventData struct {
	From ag_solanago.PublicKey
	To   ag_solanago.PublicKey
}

var OwnershipTransferredEventDataDiscriminator = [8]byte{172, 61, 205, 183, 250, 50, 38, 98}

func (obj OwnershipTransferredEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OwnershipTransferredEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OwnershipTransferredEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OwnershipTransferredEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[172 61 205 183 250 50 38 98]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (*OwnershipTransferredEventData) isEventData() {}
func (obj *OwnershipTransferredEventData) Self() any {
	return obj
}

type PoolSetEventData struct {
	Token                   ag_solanago.PublicKey
	PreviousPoolLookupTable ag_solanago.PublicKey
	NewPoolLookupTable      ag_solanago.PublicKey
}

var PoolSetEventDataDiscriminator = [8]byte{135, 203, 185, 106, 113, 87, 177, 32}

func (obj PoolSetEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PoolSetEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `PreviousPoolLookupTable` param:
	err = encoder.Encode(obj.PreviousPoolLookupTable)
	if err != nil {
		return err
	}
	// Serialize `NewPoolLookupTable` param:
	err = encoder.Encode(obj.NewPoolLookupTable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolSetEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PoolSetEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[135 203 185 106 113 87 177 32]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `PreviousPoolLookupTable`:
	err = decoder.Decode(&obj.PreviousPoolLookupTable)
	if err != nil {
		return err
	}
	// Deserialize `NewPoolLookupTable`:
	err = decoder.Decode(&obj.NewPoolLookupTable)
	if err != nil {
		return err
	}
	return nil
}

func (*PoolSetEventData) isEventData() {}
func (obj *PoolSetEventData) Self() any {
	return obj
}

var eventTypes = map[[8]byte]reflect.Type{
	AdministratorTransferRequestedEventDataDiscriminator:           reflect.TypeOf(AdministratorTransferRequestedEventData{}),
	AdministratorTransferredEventDataDiscriminator:                 reflect.TypeOf(AdministratorTransferredEventData{}),
	CCIPMessageSentEventDataDiscriminator:                          reflect.TypeOf(CCIPMessageSentEventData{}),
	CcipVersionForDestChainVersionBumpedEventDataDiscriminator:     reflect.TypeOf(CcipVersionForDestChainVersionBumpedEventData{}),
	CcipVersionForDestChainVersionRolledBackEventDataDiscriminator: reflect.TypeOf(CcipVersionForDestChainVersionRolledBackEventData{}),
	ConfigSetEventDataDiscriminator:                                reflect.TypeOf(ConfigSetEventData{}),
	DestChainAddedEventDataDiscriminator:                           reflect.TypeOf(DestChainAddedEventData{}),
	DestChainConfigUpdatedEventDataDiscriminator:                   reflect.TypeOf(DestChainConfigUpdatedEventData{}),
	FeeTokenAddedEventDataDiscriminator:                            reflect.TypeOf(FeeTokenAddedEventData{}),
	FeeTokenDisabledEventDataDiscriminator:                         reflect.TypeOf(FeeTokenDisabledEventData{}),
	FeeTokenEnabledEventDataDiscriminator:                          reflect.TypeOf(FeeTokenEnabledEventData{}),
	FeeTokenRemovedEventDataDiscriminator:                          reflect.TypeOf(FeeTokenRemovedEventData{}),
	OfframpAddedEventDataDiscriminator:                             reflect.TypeOf(OfframpAddedEventData{}),
	OfframpRemovedEventDataDiscriminator:                           reflect.TypeOf(OfframpRemovedEventData{}),
	OwnershipTransferRequestedEventDataDiscriminator:               reflect.TypeOf(OwnershipTransferRequestedEventData{}),
	OwnershipTransferredEventDataDiscriminator:                     reflect.TypeOf(OwnershipTransferredEventData{}),
	PoolSetEventDataDiscriminator:                                  reflect.TypeOf(PoolSetEventData{}),
}
var eventNames = map[[8]byte]string{
	AdministratorTransferRequestedEventDataDiscriminator:           "AdministratorTransferRequested",
	AdministratorTransferredEventDataDiscriminator:                 "AdministratorTransferred",
	CCIPMessageSentEventDataDiscriminator:                          "CCIPMessageSent",
	CcipVersionForDestChainVersionBumpedEventDataDiscriminator:     "CcipVersionForDestChainVersionBumped",
	CcipVersionForDestChainVersionRolledBackEventDataDiscriminator: "CcipVersionForDestChainVersionRolledBack",
	ConfigSetEventDataDiscriminator:                                "ConfigSet",
	DestChainAddedEventDataDiscriminator:                           "DestChainAdded",
	DestChainConfigUpdatedEventDataDiscriminator:                   "DestChainConfigUpdated",
	FeeTokenAddedEventDataDiscriminator:                            "FeeTokenAdded",
	FeeTokenDisabledEventDataDiscriminator:                         "FeeTokenDisabled",
	FeeTokenEnabledEventDataDiscriminator:                          "FeeTokenEnabled",
	FeeTokenRemovedEventDataDiscriminator:                          "FeeTokenRemoved",
	OfframpAddedEventDataDiscriminator:                             "OfframpAdded",
	OfframpRemovedEventDataDiscriminator:                           "OfframpRemoved",
	OwnershipTransferRequestedEventDataDiscriminator:               "OwnershipTransferRequested",
	OwnershipTransferredEventDataDiscriminator:                     "OwnershipTransferred",
	PoolSetEventDataDiscriminator:                                  "PoolSet",
}
var (
	_ fmt.Formatter = nil
)
var (
	_ *ag_solanago.Transaction = nil
)
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)
var (
	_ *ag_rpc.GetTransactionResult = nil
)
var (
	_ *ag_base58.Alphabet = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
	Self() any
}

const eventLogPrefix = "Program data: "

func DecodeEvents(txData *ag_rpc.GetTransactionResult, targetProgramId ag_solanago.PublicKey, getAddressTables func(altAddresses []ag_solanago.PublicKey) (tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice, err error)) (evts []*Event, err error) {
	var tx *ag_solanago.Transaction
	if tx, err = txData.Transaction.GetTransaction(); err != nil {
		return
	}

	altAddresses := make([]ag_solanago.PublicKey, len(tx.Message.AddressTableLookups))
	for i, alt := range tx.Message.AddressTableLookups {
		altAddresses[i] = alt.AccountKey
	}
	if len(altAddresses) > 0 {
		var tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice
		if tables, err = getAddressTables(altAddresses); err != nil {
			return
		}
		tx.Message.SetAddressTables(tables)
		if err = tx.Message.ResolveLookups(); err != nil {
			return
		}
	}

	var base64Binaries [][]byte
	logMessageEventBinaries, err := decodeEventsFromLogMessage(txData.Meta.LogMessages)
	if err != nil {
		return
	}

	emitedCPIEventBinaries, err := decodeEventsFromEmitCPI(txData.Meta.InnerInstructions, tx.Message.AccountKeys, targetProgramId)
	if err != nil {
		return
	}

	base64Binaries = append(base64Binaries, logMessageEventBinaries...)
	base64Binaries = append(base64Binaries, emitedCPIEventBinaries...)
	evts, err = parseEvents(base64Binaries)
	return
}

func decodeEventsFromLogMessage(logMessages []string) (eventBinaries [][]byte, err error) {
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode logMessage event: %s", eventBase64)
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func decodeEventsFromEmitCPI(InnerInstructions []ag_rpc.InnerInstruction, accountKeys ag_solanago.PublicKeySlice, targetProgramId ag_solanago.PublicKey) (eventBinaries [][]byte, err error) {
	for _, parsedIx := range InnerInstructions {
		for _, ix := range parsedIx.Instructions {
			if accountKeys[ix.ProgramIDIndex] != targetProgramId {
				continue
			}

			var ixData []byte
			if ixData, err = ag_base58.Decode(ix.Data.String()); err != nil {
				return
			}
			if len(ixData) < 8 {
				continue
			}

			eventBase64 := base64.StdEncoding.EncodeToString(ixData[8:])
			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func parseEvents(base64Binaries [][]byte) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)

	for _, eventBinary := range base64Binaries {
		if len(eventBinary) < 8 {
			continue
		}
		eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
		if eventType, ok := eventTypes[eventDiscriminator]; ok {
			eventData := reflect.New(eventType).Interface().(EventData)
			decoder.Reset(eventBinary)
			if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
				err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
				return
			}
			evts = append(evts, &Event{
				Name: eventNames[eventDiscriminator],
				Data: eventData,
			})
		}
	}
	return
}
