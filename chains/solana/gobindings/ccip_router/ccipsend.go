// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// On Ramp Flow //
// Sends a message to the destination chain.
//
// Request a message to be sent to the destination chain.
// The method name needs to be ccip_send with Anchor encoding.
// This function is called by the CCIP Sender Contract (or final user) to send a message to the CCIP Router.
// The message will be sent to the receiver on the destination chain selector.
// This message emits the event CCIPMessageSent with all the necessary data to be retrieved by the OffChain Code
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for sending the message.
// * `dest_chain_selector` - The chain selector for the destination chain.
// * `message` - The message to be sent. The size limit of data is 256 bytes.
// * `token_indexes` - Indices into the remaining accounts vector where the subslice for a token begins.
type CcipSendInstruction struct {
	DestChainSelector *uint64
	Message           *SVM2AnyMessage
	TokenIndexes      *[]byte

	// [0] = [] config
	//
	// [1] = [WRITE] dest_chain_state
	//
	// [2] = [WRITE] nonce
	//
	// [3] = [WRITE, SIGNER] authority
	//
	// [4] = [] system_program
	//
	// [5] = [] fee_token_program
	//
	// [6] = [] fee_token_mint
	//
	// [7] = [] fee_token_user_associated_account
	// ··········· If paying with native SOL, this must be the zero address.
	//
	// [8] = [WRITE] fee_token_receiver
	//
	// [9] = [] fee_billing_signer
	//
	// [10] = [] fee_quoter
	//
	// [11] = [] fee_quoter_config
	//
	// [12] = [] fee_quoter_dest_chain
	//
	// [13] = [] fee_quoter_billing_token_config
	//
	// [14] = [] fee_quoter_link_token_config
	//
	// [15] = [] rmn_remote
	//
	// [16] = [] rmn_remote_curses
	//
	// [17] = [] rmn_remote_config
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCcipSendInstructionBuilder creates a new `CcipSendInstruction` instruction builder.
func NewCcipSendInstructionBuilder() *CcipSendInstruction {
	nd := &CcipSendInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	return nd
}

// SetDestChainSelector sets the "dest_chain_selector" parameter.
func (inst *CcipSendInstruction) SetDestChainSelector(dest_chain_selector uint64) *CcipSendInstruction {
	inst.DestChainSelector = &dest_chain_selector
	return inst
}

// SetMessage sets the "message" parameter.
func (inst *CcipSendInstruction) SetMessage(message SVM2AnyMessage) *CcipSendInstruction {
	inst.Message = &message
	return inst
}

// SetTokenIndexes sets the "token_indexes" parameter.
func (inst *CcipSendInstruction) SetTokenIndexes(token_indexes []byte) *CcipSendInstruction {
	inst.TokenIndexes = &token_indexes
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *CcipSendInstruction) SetConfigAccount(config ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *CcipSendInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDestChainStateAccount sets the "dest_chain_state" account.
func (inst *CcipSendInstruction) SetDestChainStateAccount(destChainState ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(destChainState).WRITE()
	return inst
}

// GetDestChainStateAccount gets the "dest_chain_state" account.
func (inst *CcipSendInstruction) GetDestChainStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetNonceAccount sets the "nonce" account.
func (inst *CcipSendInstruction) SetNonceAccount(nonce ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(nonce).WRITE()
	return inst
}

// GetNonceAccount gets the "nonce" account.
func (inst *CcipSendInstruction) GetNonceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CcipSendInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CcipSendInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CcipSendInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CcipSendInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeeTokenProgramAccount sets the "fee_token_program" account.
func (inst *CcipSendInstruction) SetFeeTokenProgramAccount(feeTokenProgram ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feeTokenProgram)
	return inst
}

// GetFeeTokenProgramAccount gets the "fee_token_program" account.
func (inst *CcipSendInstruction) GetFeeTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetFeeTokenMintAccount sets the "fee_token_mint" account.
func (inst *CcipSendInstruction) SetFeeTokenMintAccount(feeTokenMint ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(feeTokenMint)
	return inst
}

// GetFeeTokenMintAccount gets the "fee_token_mint" account.
func (inst *CcipSendInstruction) GetFeeTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetFeeTokenUserAssociatedAccountAccount sets the "fee_token_user_associated_account" account.
// If paying with native SOL, this must be the zero address.
func (inst *CcipSendInstruction) SetFeeTokenUserAssociatedAccountAccount(feeTokenUserAssociatedAccount ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(feeTokenUserAssociatedAccount)
	return inst
}

// GetFeeTokenUserAssociatedAccountAccount gets the "fee_token_user_associated_account" account.
// If paying with native SOL, this must be the zero address.
func (inst *CcipSendInstruction) GetFeeTokenUserAssociatedAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetFeeTokenReceiverAccount sets the "fee_token_receiver" account.
func (inst *CcipSendInstruction) SetFeeTokenReceiverAccount(feeTokenReceiver ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(feeTokenReceiver).WRITE()
	return inst
}

// GetFeeTokenReceiverAccount gets the "fee_token_receiver" account.
func (inst *CcipSendInstruction) GetFeeTokenReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetFeeBillingSignerAccount sets the "fee_billing_signer" account.
func (inst *CcipSendInstruction) SetFeeBillingSignerAccount(feeBillingSigner ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(feeBillingSigner)
	return inst
}

// GetFeeBillingSignerAccount gets the "fee_billing_signer" account.
func (inst *CcipSendInstruction) GetFeeBillingSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetFeeQuoterAccount sets the "fee_quoter" account.
func (inst *CcipSendInstruction) SetFeeQuoterAccount(feeQuoter ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(feeQuoter)
	return inst
}

// GetFeeQuoterAccount gets the "fee_quoter" account.
func (inst *CcipSendInstruction) GetFeeQuoterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetFeeQuoterConfigAccount sets the "fee_quoter_config" account.
func (inst *CcipSendInstruction) SetFeeQuoterConfigAccount(feeQuoterConfig ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(feeQuoterConfig)
	return inst
}

// GetFeeQuoterConfigAccount gets the "fee_quoter_config" account.
func (inst *CcipSendInstruction) GetFeeQuoterConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetFeeQuoterDestChainAccount sets the "fee_quoter_dest_chain" account.
func (inst *CcipSendInstruction) SetFeeQuoterDestChainAccount(feeQuoterDestChain ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(feeQuoterDestChain)
	return inst
}

// GetFeeQuoterDestChainAccount gets the "fee_quoter_dest_chain" account.
func (inst *CcipSendInstruction) GetFeeQuoterDestChainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetFeeQuoterBillingTokenConfigAccount sets the "fee_quoter_billing_token_config" account.
func (inst *CcipSendInstruction) SetFeeQuoterBillingTokenConfigAccount(feeQuoterBillingTokenConfig ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(feeQuoterBillingTokenConfig)
	return inst
}

// GetFeeQuoterBillingTokenConfigAccount gets the "fee_quoter_billing_token_config" account.
func (inst *CcipSendInstruction) GetFeeQuoterBillingTokenConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetFeeQuoterLinkTokenConfigAccount sets the "fee_quoter_link_token_config" account.
func (inst *CcipSendInstruction) SetFeeQuoterLinkTokenConfigAccount(feeQuoterLinkTokenConfig ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(feeQuoterLinkTokenConfig)
	return inst
}

// GetFeeQuoterLinkTokenConfigAccount gets the "fee_quoter_link_token_config" account.
func (inst *CcipSendInstruction) GetFeeQuoterLinkTokenConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetRmnRemoteAccount sets the "rmn_remote" account.
func (inst *CcipSendInstruction) SetRmnRemoteAccount(rmnRemote ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(rmnRemote)
	return inst
}

// GetRmnRemoteAccount gets the "rmn_remote" account.
func (inst *CcipSendInstruction) GetRmnRemoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetRmnRemoteCursesAccount sets the "rmn_remote_curses" account.
func (inst *CcipSendInstruction) SetRmnRemoteCursesAccount(rmnRemoteCurses ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(rmnRemoteCurses)
	return inst
}

// GetRmnRemoteCursesAccount gets the "rmn_remote_curses" account.
func (inst *CcipSendInstruction) GetRmnRemoteCursesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetRmnRemoteConfigAccount sets the "rmn_remote_config" account.
func (inst *CcipSendInstruction) SetRmnRemoteConfigAccount(rmnRemoteConfig ag_solanago.PublicKey) *CcipSendInstruction {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(rmnRemoteConfig)
	return inst
}

// GetRmnRemoteConfigAccount gets the "rmn_remote_config" account.
func (inst *CcipSendInstruction) GetRmnRemoteConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst CcipSendInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CcipSend,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CcipSendInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CcipSendInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DestChainSelector == nil {
			return errors.New("DestChainSelector parameter is not set")
		}
		if inst.Message == nil {
			return errors.New("Message parameter is not set")
		}
		if inst.TokenIndexes == nil {
			return errors.New("TokenIndexes parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.DestChainState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Nonce is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeeTokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.FeeTokenMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.FeeTokenUserAssociatedAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.FeeTokenReceiver is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.FeeBillingSigner is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.FeeQuoter is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.FeeQuoterConfig is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.FeeQuoterDestChain is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.FeeQuoterBillingTokenConfig is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.FeeQuoterLinkTokenConfig is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.RmnRemote is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.RmnRemoteCurses is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.RmnRemoteConfig is not set")
		}
	}
	return nil
}

func (inst *CcipSendInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CcipSend")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  DestChainSelector", *inst.DestChainSelector))
						paramsBranch.Child(ag_format.Param("            Message", *inst.Message))
						paramsBranch.Child(ag_format.Param("       TokenIndexes", *inst.TokenIndexes))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                         config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               dest_chain_state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                          nonce", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                      authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 system_program", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              fee_token_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                 fee_token_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     fee_token_user_associated_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("             fee_token_receiver", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("             fee_billing_signer", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                     fee_quoter", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("              fee_quoter_config", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("          fee_quoter_dest_chain", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("fee_quoter_billing_token_config", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("   fee_quoter_link_token_config", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                     rmn_remote", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("              rmn_remote_curses", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("              rmn_remote_config", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj CcipSendInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	// Serialize `TokenIndexes` param:
	err = encoder.Encode(obj.TokenIndexes)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CcipSendInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	// Deserialize `TokenIndexes`:
	err = decoder.Decode(&obj.TokenIndexes)
	if err != nil {
		return err
	}
	return nil
}

// NewCcipSendInstruction declares a new CcipSend instruction with the provided parameters and accounts.
func NewCcipSendInstruction(
	// Parameters:
	dest_chain_selector uint64,
	message SVM2AnyMessage,
	token_indexes []byte,
	// Accounts:
	config ag_solanago.PublicKey,
	destChainState ag_solanago.PublicKey,
	nonce ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	feeTokenProgram ag_solanago.PublicKey,
	feeTokenMint ag_solanago.PublicKey,
	feeTokenUserAssociatedAccount ag_solanago.PublicKey,
	feeTokenReceiver ag_solanago.PublicKey,
	feeBillingSigner ag_solanago.PublicKey,
	feeQuoter ag_solanago.PublicKey,
	feeQuoterConfig ag_solanago.PublicKey,
	feeQuoterDestChain ag_solanago.PublicKey,
	feeQuoterBillingTokenConfig ag_solanago.PublicKey,
	feeQuoterLinkTokenConfig ag_solanago.PublicKey,
	rmnRemote ag_solanago.PublicKey,
	rmnRemoteCurses ag_solanago.PublicKey,
	rmnRemoteConfig ag_solanago.PublicKey) *CcipSendInstruction {
	return NewCcipSendInstructionBuilder().
		SetDestChainSelector(dest_chain_selector).
		SetMessage(message).
		SetTokenIndexes(token_indexes).
		SetConfigAccount(config).
		SetDestChainStateAccount(destChainState).
		SetNonceAccount(nonce).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram).
		SetFeeTokenProgramAccount(feeTokenProgram).
		SetFeeTokenMintAccount(feeTokenMint).
		SetFeeTokenUserAssociatedAccountAccount(feeTokenUserAssociatedAccount).
		SetFeeTokenReceiverAccount(feeTokenReceiver).
		SetFeeBillingSignerAccount(feeBillingSigner).
		SetFeeQuoterAccount(feeQuoter).
		SetFeeQuoterConfigAccount(feeQuoterConfig).
		SetFeeQuoterDestChainAccount(feeQuoterDestChain).
		SetFeeQuoterBillingTokenConfigAccount(feeQuoterBillingTokenConfig).
		SetFeeQuoterLinkTokenConfigAccount(feeQuoterLinkTokenConfig).
		SetRmnRemoteAccount(rmnRemote).
		SetRmnRemoteCursesAccount(rmnRemoteCurses).
		SetRmnRemoteConfigAccount(rmnRemoteConfig)
}
