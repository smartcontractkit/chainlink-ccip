// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type CommitInput struct {
	PriceUpdates PriceUpdates
	MerkleRoot   MerkleRoot
}

func (obj CommitInput) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PriceUpdates` param:
	err = encoder.Encode(obj.PriceUpdates)
	if err != nil {
		return err
	}
	// Serialize `MerkleRoot` param:
	err = encoder.Encode(obj.MerkleRoot)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CommitInput) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PriceUpdates`:
	err = decoder.Decode(&obj.PriceUpdates)
	if err != nil {
		return err
	}
	// Deserialize `MerkleRoot`:
	err = decoder.Decode(&obj.MerkleRoot)
	if err != nil {
		return err
	}
	return nil
}

type PriceUpdates struct {
	TokenPriceUpdates []TokenPriceUpdate
	GasPriceUpdates   []GasPriceUpdate
}

func (obj PriceUpdates) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenPriceUpdates` param:
	err = encoder.Encode(obj.TokenPriceUpdates)
	if err != nil {
		return err
	}
	// Serialize `GasPriceUpdates` param:
	err = encoder.Encode(obj.GasPriceUpdates)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PriceUpdates) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenPriceUpdates`:
	err = decoder.Decode(&obj.TokenPriceUpdates)
	if err != nil {
		return err
	}
	// Deserialize `GasPriceUpdates`:
	err = decoder.Decode(&obj.GasPriceUpdates)
	if err != nil {
		return err
	}
	return nil
}

type TokenPriceUpdate struct {
	SourceToken ag_solanago.PublicKey
	UsdPerToken [28]uint8
}

func (obj TokenPriceUpdate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourceToken` param:
	err = encoder.Encode(obj.SourceToken)
	if err != nil {
		return err
	}
	// Serialize `UsdPerToken` param:
	err = encoder.Encode(obj.UsdPerToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPriceUpdate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourceToken`:
	err = decoder.Decode(&obj.SourceToken)
	if err != nil {
		return err
	}
	// Deserialize `UsdPerToken`:
	err = decoder.Decode(&obj.UsdPerToken)
	if err != nil {
		return err
	}
	return nil
}

type GasPriceUpdate struct {
	DestChainSelector uint64
	UsdPerUnitGas     [28]uint8
}

func (obj GasPriceUpdate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `UsdPerUnitGas` param:
	err = encoder.Encode(obj.UsdPerUnitGas)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GasPriceUpdate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `UsdPerUnitGas`:
	err = decoder.Decode(&obj.UsdPerUnitGas)
	if err != nil {
		return err
	}
	return nil
}

type MerkleRoot struct {
	SourceChainSelector uint64
	OnRampAddress       []byte
	MinSeqNr            uint64
	MaxSeqNr            uint64
	MerkleRoot          [32]uint8
}

func (obj MerkleRoot) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `OnRampAddress` param:
	err = encoder.Encode(obj.OnRampAddress)
	if err != nil {
		return err
	}
	// Serialize `MinSeqNr` param:
	err = encoder.Encode(obj.MinSeqNr)
	if err != nil {
		return err
	}
	// Serialize `MaxSeqNr` param:
	err = encoder.Encode(obj.MaxSeqNr)
	if err != nil {
		return err
	}
	// Serialize `MerkleRoot` param:
	err = encoder.Encode(obj.MerkleRoot)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MerkleRoot) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `OnRampAddress`:
	err = decoder.Decode(&obj.OnRampAddress)
	if err != nil {
		return err
	}
	// Deserialize `MinSeqNr`:
	err = decoder.Decode(&obj.MinSeqNr)
	if err != nil {
		return err
	}
	// Deserialize `MaxSeqNr`:
	err = decoder.Decode(&obj.MaxSeqNr)
	if err != nil {
		return err
	}
	// Deserialize `MerkleRoot`:
	err = decoder.Decode(&obj.MerkleRoot)
	if err != nil {
		return err
	}
	return nil
}

type LockOrBurnInV1 struct {
	Receiver            []byte
	RemoteChainSelector uint64
	OriginalSender      ag_solanago.PublicKey
	Amount              uint64
	LocalToken          ag_solanago.PublicKey
}

func (obj LockOrBurnInV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `RemoteChainSelector` param:
	err = encoder.Encode(obj.RemoteChainSelector)
	if err != nil {
		return err
	}
	// Serialize `OriginalSender` param:
	err = encoder.Encode(obj.OriginalSender)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `LocalToken` param:
	err = encoder.Encode(obj.LocalToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockOrBurnInV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `RemoteChainSelector`:
	err = decoder.Decode(&obj.RemoteChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `OriginalSender`:
	err = decoder.Decode(&obj.OriginalSender)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `LocalToken`:
	err = decoder.Decode(&obj.LocalToken)
	if err != nil {
		return err
	}
	return nil
}

type ReleaseOrMintInV1 struct {
	OriginalSender      []byte
	RemoteChainSelector uint64
	Receiver            ag_solanago.PublicKey
	Amount              [32]uint8
	LocalToken          ag_solanago.PublicKey

	// @dev WARNING: sourcePoolAddress should be checked prior to any processing of funds. Make sure it matches the
	// expected pool address for the given remoteChainSelector.
	SourcePoolAddress []byte
	SourcePoolData    []byte

	// @dev WARNING: offchainTokenData is untrusted data.
	OffchainTokenData []byte
}

func (obj ReleaseOrMintInV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OriginalSender` param:
	err = encoder.Encode(obj.OriginalSender)
	if err != nil {
		return err
	}
	// Serialize `RemoteChainSelector` param:
	err = encoder.Encode(obj.RemoteChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `LocalToken` param:
	err = encoder.Encode(obj.LocalToken)
	if err != nil {
		return err
	}
	// Serialize `SourcePoolAddress` param:
	err = encoder.Encode(obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Serialize `SourcePoolData` param:
	err = encoder.Encode(obj.SourcePoolData)
	if err != nil {
		return err
	}
	// Serialize `OffchainTokenData` param:
	err = encoder.Encode(obj.OffchainTokenData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReleaseOrMintInV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OriginalSender`:
	err = decoder.Decode(&obj.OriginalSender)
	if err != nil {
		return err
	}
	// Deserialize `RemoteChainSelector`:
	err = decoder.Decode(&obj.RemoteChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `LocalToken`:
	err = decoder.Decode(&obj.LocalToken)
	if err != nil {
		return err
	}
	// Deserialize `SourcePoolAddress`:
	err = decoder.Decode(&obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Deserialize `SourcePoolData`:
	err = decoder.Decode(&obj.SourcePoolData)
	if err != nil {
		return err
	}
	// Deserialize `OffchainTokenData`:
	err = decoder.Decode(&obj.OffchainTokenData)
	if err != nil {
		return err
	}
	return nil
}

type LockOrBurnOutV1 struct {
	DestTokenAddress []byte
	DestPoolData     []byte
}

func (obj LockOrBurnOutV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestTokenAddress` param:
	err = encoder.Encode(obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Serialize `DestPoolData` param:
	err = encoder.Encode(obj.DestPoolData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockOrBurnOutV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestTokenAddress`:
	err = decoder.Decode(&obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Deserialize `DestPoolData`:
	err = decoder.Decode(&obj.DestPoolData)
	if err != nil {
		return err
	}
	return nil
}

type ReleaseOrMintOutV1 struct {
	DestinationAmount uint64
}

func (obj ReleaseOrMintOutV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestinationAmount` param:
	err = encoder.Encode(obj.DestinationAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReleaseOrMintOutV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestinationAmount`:
	err = decoder.Decode(&obj.DestinationAmount)
	if err != nil {
		return err
	}
	return nil
}

type ReportContext struct {
	ByteWords [3][32]uint8
}

func (obj ReportContext) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ByteWords` param:
	err = encoder.Encode(obj.ByteWords)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReportContext) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ByteWords`:
	err = decoder.Decode(&obj.ByteWords)
	if err != nil {
		return err
	}
	return nil
}

type RampMessageHeader struct {
	MessageId           [32]uint8
	SourceChainSelector uint64
	DestChainSelector   uint64
	SequenceNumber      uint64
	Nonce               uint64
}

func (obj RampMessageHeader) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MessageId` param:
	err = encoder.Encode(obj.MessageId)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RampMessageHeader) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MessageId`:
	err = decoder.Decode(&obj.MessageId)
	if err != nil {
		return err
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

type ExecutionReportSingleChain struct {
	SourceChainSelector uint64
	Message             Any2SolanaRampMessage
	OffchainTokenData   [][]byte
	Root                [32]uint8
	Proofs              [][32]uint8
	TokenIndexes        []byte
}

func (obj ExecutionReportSingleChain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	// Serialize `OffchainTokenData` param:
	err = encoder.Encode(obj.OffchainTokenData)
	if err != nil {
		return err
	}
	// Serialize `Root` param:
	err = encoder.Encode(obj.Root)
	if err != nil {
		return err
	}
	// Serialize `Proofs` param:
	err = encoder.Encode(obj.Proofs)
	if err != nil {
		return err
	}
	// Serialize `TokenIndexes` param:
	err = encoder.Encode(obj.TokenIndexes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExecutionReportSingleChain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	// Deserialize `OffchainTokenData`:
	err = decoder.Decode(&obj.OffchainTokenData)
	if err != nil {
		return err
	}
	// Deserialize `Root`:
	err = decoder.Decode(&obj.Root)
	if err != nil {
		return err
	}
	// Deserialize `Proofs`:
	err = decoder.Decode(&obj.Proofs)
	if err != nil {
		return err
	}
	// Deserialize `TokenIndexes`:
	err = decoder.Decode(&obj.TokenIndexes)
	if err != nil {
		return err
	}
	return nil
}

type SolanaAccountMeta struct {
	Pubkey     ag_solanago.PublicKey
	IsWritable bool
}

func (obj SolanaAccountMeta) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SolanaAccountMeta) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type SolanaExtraArgs struct {
	ComputeUnits uint32
	Accounts     []SolanaAccountMeta
}

func (obj SolanaExtraArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ComputeUnits` param:
	err = encoder.Encode(obj.ComputeUnits)
	if err != nil {
		return err
	}
	// Serialize `Accounts` param:
	err = encoder.Encode(obj.Accounts)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SolanaExtraArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ComputeUnits`:
	err = decoder.Decode(&obj.ComputeUnits)
	if err != nil {
		return err
	}
	// Deserialize `Accounts`:
	err = decoder.Decode(&obj.Accounts)
	if err != nil {
		return err
	}
	return nil
}

type AnyExtraArgs struct {
	GasLimit                 ag_binary.Uint128
	AllowOutOfOrderExecution bool
}

func (obj AnyExtraArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `GasLimit` param:
	err = encoder.Encode(obj.GasLimit)
	if err != nil {
		return err
	}
	// Serialize `AllowOutOfOrderExecution` param:
	err = encoder.Encode(obj.AllowOutOfOrderExecution)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AnyExtraArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `GasLimit`:
	err = decoder.Decode(&obj.GasLimit)
	if err != nil {
		return err
	}
	// Deserialize `AllowOutOfOrderExecution`:
	err = decoder.Decode(&obj.AllowOutOfOrderExecution)
	if err != nil {
		return err
	}
	return nil
}

type Any2SolanaRampMessage struct {
	Header       RampMessageHeader
	Sender       []byte
	Data         []byte
	Receiver     ag_solanago.PublicKey
	TokenAmounts []Any2SolanaTokenTransfer
	ExtraArgs    SolanaExtraArgs
}

func (obj Any2SolanaRampMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Header` param:
	err = encoder.Encode(obj.Header)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `TokenAmounts` param:
	err = encoder.Encode(obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Serialize `ExtraArgs` param:
	err = encoder.Encode(obj.ExtraArgs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Any2SolanaRampMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Header`:
	err = decoder.Decode(&obj.Header)
	if err != nil {
		return err
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmounts`:
	err = decoder.Decode(&obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Deserialize `ExtraArgs`:
	err = decoder.Decode(&obj.ExtraArgs)
	if err != nil {
		return err
	}
	return nil
}

type Solana2AnyRampMessage struct {
	Header       RampMessageHeader
	Sender       ag_solanago.PublicKey
	Data         []byte
	Receiver     []byte
	ExtraArgs    AnyExtraArgs
	FeeToken     ag_solanago.PublicKey
	TokenAmounts []Solana2AnyTokenTransfer
}

func (obj Solana2AnyRampMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Header` param:
	err = encoder.Encode(obj.Header)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `ExtraArgs` param:
	err = encoder.Encode(obj.ExtraArgs)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	// Serialize `TokenAmounts` param:
	err = encoder.Encode(obj.TokenAmounts)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Solana2AnyRampMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Header`:
	err = decoder.Decode(&obj.Header)
	if err != nil {
		return err
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `ExtraArgs`:
	err = decoder.Decode(&obj.ExtraArgs)
	if err != nil {
		return err
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmounts`:
	err = decoder.Decode(&obj.TokenAmounts)
	if err != nil {
		return err
	}
	return nil
}

type Solana2AnyTokenTransfer struct {
	SourcePoolAddress ag_solanago.PublicKey
	DestTokenAddress  []byte
	ExtraData         []byte
	Amount            [32]uint8
	DestExecData      []byte
}

func (obj Solana2AnyTokenTransfer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourcePoolAddress` param:
	err = encoder.Encode(obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Serialize `DestTokenAddress` param:
	err = encoder.Encode(obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Serialize `ExtraData` param:
	err = encoder.Encode(obj.ExtraData)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `DestExecData` param:
	err = encoder.Encode(obj.DestExecData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Solana2AnyTokenTransfer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourcePoolAddress`:
	err = decoder.Decode(&obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Deserialize `DestTokenAddress`:
	err = decoder.Decode(&obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Deserialize `ExtraData`:
	err = decoder.Decode(&obj.ExtraData)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `DestExecData`:
	err = decoder.Decode(&obj.DestExecData)
	if err != nil {
		return err
	}
	return nil
}

type Any2SolanaTokenTransfer struct {
	SourcePoolAddress []byte
	DestTokenAddress  ag_solanago.PublicKey
	DestGasAmount     uint32
	ExtraData         []byte
	Amount            [32]uint8
}

func (obj Any2SolanaTokenTransfer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourcePoolAddress` param:
	err = encoder.Encode(obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Serialize `DestTokenAddress` param:
	err = encoder.Encode(obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Serialize `DestGasAmount` param:
	err = encoder.Encode(obj.DestGasAmount)
	if err != nil {
		return err
	}
	// Serialize `ExtraData` param:
	err = encoder.Encode(obj.ExtraData)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Any2SolanaTokenTransfer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourcePoolAddress`:
	err = decoder.Decode(&obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Deserialize `DestTokenAddress`:
	err = decoder.Decode(&obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Deserialize `DestGasAmount`:
	err = decoder.Decode(&obj.DestGasAmount)
	if err != nil {
		return err
	}
	// Deserialize `ExtraData`:
	err = decoder.Decode(&obj.ExtraData)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type Solana2AnyMessage struct {
	Receiver     []byte
	Data         []byte
	TokenAmounts []SolanaTokenAmount
	FeeToken     ag_solanago.PublicKey
	ExtraArgs    ExtraArgsInput
	TokenIndexes []byte
}

func (obj Solana2AnyMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `TokenAmounts` param:
	err = encoder.Encode(obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	// Serialize `ExtraArgs` param:
	err = encoder.Encode(obj.ExtraArgs)
	if err != nil {
		return err
	}
	// Serialize `TokenIndexes` param:
	err = encoder.Encode(obj.TokenIndexes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Solana2AnyMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmounts`:
	err = decoder.Decode(&obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	// Deserialize `ExtraArgs`:
	err = decoder.Decode(&obj.ExtraArgs)
	if err != nil {
		return err
	}
	// Deserialize `TokenIndexes`:
	err = decoder.Decode(&obj.TokenIndexes)
	if err != nil {
		return err
	}
	return nil
}

type SolanaTokenAmount struct {
	Token  ag_solanago.PublicKey
	Amount uint64
}

func (obj SolanaTokenAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SolanaTokenAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type ExtraArgsInput struct {
	GasLimit                 *ag_binary.Uint128 `bin:"optional"`
	AllowOutOfOrderExecution *bool              `bin:"optional"`
}

func (obj ExtraArgsInput) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `GasLimit` param (optional):
	{
		if obj.GasLimit == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.GasLimit)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AllowOutOfOrderExecution` param (optional):
	{
		if obj.AllowOutOfOrderExecution == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AllowOutOfOrderExecution)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ExtraArgsInput) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `GasLimit` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.GasLimit)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AllowOutOfOrderExecution` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AllowOutOfOrderExecution)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Any2SolanaMessage struct {
	MessageId           [32]uint8
	SourceChainSelector uint64
	Sender              []byte
	Data                []byte
	TokenAmounts        []SolanaTokenAmount
}

func (obj Any2SolanaMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MessageId` param:
	err = encoder.Encode(obj.MessageId)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `TokenAmounts` param:
	err = encoder.Encode(obj.TokenAmounts)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Any2SolanaMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MessageId`:
	err = decoder.Decode(&obj.MessageId)
	if err != nil {
		return err
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmounts`:
	err = decoder.Decode(&obj.TokenAmounts)
	if err != nil {
		return err
	}
	return nil
}

type Ocr3ConfigInfo struct {
	ConfigDigest                   [32]uint8
	F                              uint8
	N                              uint8
	IsSignatureVerificationEnabled uint8
}

func (obj Ocr3ConfigInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ConfigDigest` param:
	err = encoder.Encode(obj.ConfigDigest)
	if err != nil {
		return err
	}
	// Serialize `F` param:
	err = encoder.Encode(obj.F)
	if err != nil {
		return err
	}
	// Serialize `N` param:
	err = encoder.Encode(obj.N)
	if err != nil {
		return err
	}
	// Serialize `IsSignatureVerificationEnabled` param:
	err = encoder.Encode(obj.IsSignatureVerificationEnabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Ocr3ConfigInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ConfigDigest`:
	err = decoder.Decode(&obj.ConfigDigest)
	if err != nil {
		return err
	}
	// Deserialize `F`:
	err = decoder.Decode(&obj.F)
	if err != nil {
		return err
	}
	// Deserialize `N`:
	err = decoder.Decode(&obj.N)
	if err != nil {
		return err
	}
	// Deserialize `IsSignatureVerificationEnabled`:
	err = decoder.Decode(&obj.IsSignatureVerificationEnabled)
	if err != nil {
		return err
	}
	return nil
}

type Ocr3Config struct {
	PluginType   uint8
	ConfigInfo   Ocr3ConfigInfo
	Signers      [16][20]uint8
	Transmitters [16][32]uint8
}

func (obj Ocr3Config) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PluginType` param:
	err = encoder.Encode(obj.PluginType)
	if err != nil {
		return err
	}
	// Serialize `ConfigInfo` param:
	err = encoder.Encode(obj.ConfigInfo)
	if err != nil {
		return err
	}
	// Serialize `Signers` param:
	err = encoder.Encode(obj.Signers)
	if err != nil {
		return err
	}
	// Serialize `Transmitters` param:
	err = encoder.Encode(obj.Transmitters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Ocr3Config) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PluginType`:
	err = decoder.Decode(&obj.PluginType)
	if err != nil {
		return err
	}
	// Deserialize `ConfigInfo`:
	err = decoder.Decode(&obj.ConfigInfo)
	if err != nil {
		return err
	}
	// Deserialize `Signers`:
	err = decoder.Decode(&obj.Signers)
	if err != nil {
		return err
	}
	// Deserialize `Transmitters`:
	err = decoder.Decode(&obj.Transmitters)
	if err != nil {
		return err
	}
	return nil
}

type SourceChainConfig struct {
	IsEnabled bool
	OnRamp    []byte
}

func (obj SourceChainConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsEnabled` param:
	err = encoder.Encode(obj.IsEnabled)
	if err != nil {
		return err
	}
	// Serialize `OnRamp` param:
	err = encoder.Encode(obj.OnRamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SourceChainConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsEnabled`:
	err = decoder.Decode(&obj.IsEnabled)
	if err != nil {
		return err
	}
	// Deserialize `OnRamp`:
	err = decoder.Decode(&obj.OnRamp)
	if err != nil {
		return err
	}
	return nil
}

type SourceChainState struct {
	MinSeqNr uint64
}

func (obj SourceChainState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinSeqNr` param:
	err = encoder.Encode(obj.MinSeqNr)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SourceChainState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinSeqNr`:
	err = decoder.Decode(&obj.MinSeqNr)
	if err != nil {
		return err
	}
	return nil
}

type DestChainState struct {
	SequenceNumber uint64
	UsdPerUnitGas  TimestampedPackedU224
}

func (obj DestChainState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `UsdPerUnitGas` param:
	err = encoder.Encode(obj.UsdPerUnitGas)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `UsdPerUnitGas`:
	err = decoder.Decode(&obj.UsdPerUnitGas)
	if err != nil {
		return err
	}
	return nil
}

type DestChainConfig struct {
	IsEnabled                         bool
	MaxNumberOfTokensPerMsg           uint16
	MaxDataBytes                      uint32
	MaxPerMsgGasLimit                 uint32
	DestGasOverhead                   uint32
	DestGasPerPayloadByte             uint16
	DestDataAvailabilityOverheadGas   uint32
	DestGasPerDataAvailabilityByte    uint16
	DestDataAvailabilityMultiplierBps uint16
	DefaultTokenFeeUsdcents           uint16
	DefaultTokenDestGasOverhead       uint32
	DefaultTxGasLimit                 uint32
	GasMultiplierWeiPerEth            uint64
	NetworkFeeUsdcents                uint32
	GasPriceStalenessThreshold        uint32
	EnforceOutOfOrder                 bool
	ChainFamilySelector               [4]uint8
}

func (obj DestChainConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsEnabled` param:
	err = encoder.Encode(obj.IsEnabled)
	if err != nil {
		return err
	}
	// Serialize `MaxNumberOfTokensPerMsg` param:
	err = encoder.Encode(obj.MaxNumberOfTokensPerMsg)
	if err != nil {
		return err
	}
	// Serialize `MaxDataBytes` param:
	err = encoder.Encode(obj.MaxDataBytes)
	if err != nil {
		return err
	}
	// Serialize `MaxPerMsgGasLimit` param:
	err = encoder.Encode(obj.MaxPerMsgGasLimit)
	if err != nil {
		return err
	}
	// Serialize `DestGasOverhead` param:
	err = encoder.Encode(obj.DestGasOverhead)
	if err != nil {
		return err
	}
	// Serialize `DestGasPerPayloadByte` param:
	err = encoder.Encode(obj.DestGasPerPayloadByte)
	if err != nil {
		return err
	}
	// Serialize `DestDataAvailabilityOverheadGas` param:
	err = encoder.Encode(obj.DestDataAvailabilityOverheadGas)
	if err != nil {
		return err
	}
	// Serialize `DestGasPerDataAvailabilityByte` param:
	err = encoder.Encode(obj.DestGasPerDataAvailabilityByte)
	if err != nil {
		return err
	}
	// Serialize `DestDataAvailabilityMultiplierBps` param:
	err = encoder.Encode(obj.DestDataAvailabilityMultiplierBps)
	if err != nil {
		return err
	}
	// Serialize `DefaultTokenFeeUsdcents` param:
	err = encoder.Encode(obj.DefaultTokenFeeUsdcents)
	if err != nil {
		return err
	}
	// Serialize `DefaultTokenDestGasOverhead` param:
	err = encoder.Encode(obj.DefaultTokenDestGasOverhead)
	if err != nil {
		return err
	}
	// Serialize `DefaultTxGasLimit` param:
	err = encoder.Encode(obj.DefaultTxGasLimit)
	if err != nil {
		return err
	}
	// Serialize `GasMultiplierWeiPerEth` param:
	err = encoder.Encode(obj.GasMultiplierWeiPerEth)
	if err != nil {
		return err
	}
	// Serialize `NetworkFeeUsdcents` param:
	err = encoder.Encode(obj.NetworkFeeUsdcents)
	if err != nil {
		return err
	}
	// Serialize `GasPriceStalenessThreshold` param:
	err = encoder.Encode(obj.GasPriceStalenessThreshold)
	if err != nil {
		return err
	}
	// Serialize `EnforceOutOfOrder` param:
	err = encoder.Encode(obj.EnforceOutOfOrder)
	if err != nil {
		return err
	}
	// Serialize `ChainFamilySelector` param:
	err = encoder.Encode(obj.ChainFamilySelector)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsEnabled`:
	err = decoder.Decode(&obj.IsEnabled)
	if err != nil {
		return err
	}
	// Deserialize `MaxNumberOfTokensPerMsg`:
	err = decoder.Decode(&obj.MaxNumberOfTokensPerMsg)
	if err != nil {
		return err
	}
	// Deserialize `MaxDataBytes`:
	err = decoder.Decode(&obj.MaxDataBytes)
	if err != nil {
		return err
	}
	// Deserialize `MaxPerMsgGasLimit`:
	err = decoder.Decode(&obj.MaxPerMsgGasLimit)
	if err != nil {
		return err
	}
	// Deserialize `DestGasOverhead`:
	err = decoder.Decode(&obj.DestGasOverhead)
	if err != nil {
		return err
	}
	// Deserialize `DestGasPerPayloadByte`:
	err = decoder.Decode(&obj.DestGasPerPayloadByte)
	if err != nil {
		return err
	}
	// Deserialize `DestDataAvailabilityOverheadGas`:
	err = decoder.Decode(&obj.DestDataAvailabilityOverheadGas)
	if err != nil {
		return err
	}
	// Deserialize `DestGasPerDataAvailabilityByte`:
	err = decoder.Decode(&obj.DestGasPerDataAvailabilityByte)
	if err != nil {
		return err
	}
	// Deserialize `DestDataAvailabilityMultiplierBps`:
	err = decoder.Decode(&obj.DestDataAvailabilityMultiplierBps)
	if err != nil {
		return err
	}
	// Deserialize `DefaultTokenFeeUsdcents`:
	err = decoder.Decode(&obj.DefaultTokenFeeUsdcents)
	if err != nil {
		return err
	}
	// Deserialize `DefaultTokenDestGasOverhead`:
	err = decoder.Decode(&obj.DefaultTokenDestGasOverhead)
	if err != nil {
		return err
	}
	// Deserialize `DefaultTxGasLimit`:
	err = decoder.Decode(&obj.DefaultTxGasLimit)
	if err != nil {
		return err
	}
	// Deserialize `GasMultiplierWeiPerEth`:
	err = decoder.Decode(&obj.GasMultiplierWeiPerEth)
	if err != nil {
		return err
	}
	// Deserialize `NetworkFeeUsdcents`:
	err = decoder.Decode(&obj.NetworkFeeUsdcents)
	if err != nil {
		return err
	}
	// Deserialize `GasPriceStalenessThreshold`:
	err = decoder.Decode(&obj.GasPriceStalenessThreshold)
	if err != nil {
		return err
	}
	// Deserialize `EnforceOutOfOrder`:
	err = decoder.Decode(&obj.EnforceOutOfOrder)
	if err != nil {
		return err
	}
	// Deserialize `ChainFamilySelector`:
	err = decoder.Decode(&obj.ChainFamilySelector)
	if err != nil {
		return err
	}
	return nil
}

type TokenBilling struct {
	MinFeeUsdcents    uint32
	MaxFeeUsdcents    uint32
	DeciBps           uint16
	DestGasOverhead   uint32
	DestBytesOverhead uint32
	IsEnabled         bool
}

func (obj TokenBilling) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinFeeUsdcents` param:
	err = encoder.Encode(obj.MinFeeUsdcents)
	if err != nil {
		return err
	}
	// Serialize `MaxFeeUsdcents` param:
	err = encoder.Encode(obj.MaxFeeUsdcents)
	if err != nil {
		return err
	}
	// Serialize `DeciBps` param:
	err = encoder.Encode(obj.DeciBps)
	if err != nil {
		return err
	}
	// Serialize `DestGasOverhead` param:
	err = encoder.Encode(obj.DestGasOverhead)
	if err != nil {
		return err
	}
	// Serialize `DestBytesOverhead` param:
	err = encoder.Encode(obj.DestBytesOverhead)
	if err != nil {
		return err
	}
	// Serialize `IsEnabled` param:
	err = encoder.Encode(obj.IsEnabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenBilling) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinFeeUsdcents`:
	err = decoder.Decode(&obj.MinFeeUsdcents)
	if err != nil {
		return err
	}
	// Deserialize `MaxFeeUsdcents`:
	err = decoder.Decode(&obj.MaxFeeUsdcents)
	if err != nil {
		return err
	}
	// Deserialize `DeciBps`:
	err = decoder.Decode(&obj.DeciBps)
	if err != nil {
		return err
	}
	// Deserialize `DestGasOverhead`:
	err = decoder.Decode(&obj.DestGasOverhead)
	if err != nil {
		return err
	}
	// Deserialize `DestBytesOverhead`:
	err = decoder.Decode(&obj.DestBytesOverhead)
	if err != nil {
		return err
	}
	// Deserialize `IsEnabled`:
	err = decoder.Decode(&obj.IsEnabled)
	if err != nil {
		return err
	}
	return nil
}

type RateLimitTokenBucket struct {
	Tokens      ag_binary.Uint128
	LastUpdated uint32
	IsEnabled   bool
	Capacity    ag_binary.Uint128
	Rate        ag_binary.Uint128
}

func (obj RateLimitTokenBucket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Tokens` param:
	err = encoder.Encode(obj.Tokens)
	if err != nil {
		return err
	}
	// Serialize `LastUpdated` param:
	err = encoder.Encode(obj.LastUpdated)
	if err != nil {
		return err
	}
	// Serialize `IsEnabled` param:
	err = encoder.Encode(obj.IsEnabled)
	if err != nil {
		return err
	}
	// Serialize `Capacity` param:
	err = encoder.Encode(obj.Capacity)
	if err != nil {
		return err
	}
	// Serialize `Rate` param:
	err = encoder.Encode(obj.Rate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RateLimitTokenBucket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Tokens`:
	err = decoder.Decode(&obj.Tokens)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdated`:
	err = decoder.Decode(&obj.LastUpdated)
	if err != nil {
		return err
	}
	// Deserialize `IsEnabled`:
	err = decoder.Decode(&obj.IsEnabled)
	if err != nil {
		return err
	}
	// Deserialize `Capacity`:
	err = decoder.Decode(&obj.Capacity)
	if err != nil {
		return err
	}
	// Deserialize `Rate`:
	err = decoder.Decode(&obj.Rate)
	if err != nil {
		return err
	}
	return nil
}

type BillingTokenConfig struct {
	Enabled                    bool
	Mint                       ag_solanago.PublicKey
	UsdPerToken                TimestampedPackedU224
	PremiumMultiplierWeiPerEth uint64
}

func (obj BillingTokenConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `UsdPerToken` param:
	err = encoder.Encode(obj.UsdPerToken)
	if err != nil {
		return err
	}
	// Serialize `PremiumMultiplierWeiPerEth` param:
	err = encoder.Encode(obj.PremiumMultiplierWeiPerEth)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BillingTokenConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `UsdPerToken`:
	err = decoder.Decode(&obj.UsdPerToken)
	if err != nil {
		return err
	}
	// Deserialize `PremiumMultiplierWeiPerEth`:
	err = decoder.Decode(&obj.PremiumMultiplierWeiPerEth)
	if err != nil {
		return err
	}
	return nil
}

type TimestampedPackedU224 struct {
	Value     [28]uint8
	Timestamp int64
}

func (obj TimestampedPackedU224) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TimestampedPackedU224) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

type OcrPluginType ag_binary.BorshEnum

const (
	Commit_OcrPluginType OcrPluginType = iota
	Execution_OcrPluginType
)

func (value OcrPluginType) String() string {
	switch value {
	case Commit_OcrPluginType:
		return "Commit"
	case Execution_OcrPluginType:
		return "Execution"
	default:
		return ""
	}
}

type MerkleError ag_binary.BorshEnum

const (
	InvalidProof_MerkleError MerkleError = iota
)

func (value MerkleError) String() string {
	switch value {
	case InvalidProof_MerkleError:
		return "InvalidProof"
	default:
		return ""
	}
}

type MessageExecutionState ag_binary.BorshEnum

const (
	Untouched_MessageExecutionState MessageExecutionState = iota
	InProgress_MessageExecutionState
	Success_MessageExecutionState
	Failure_MessageExecutionState
)

func (value MessageExecutionState) String() string {
	switch value {
	case Untouched_MessageExecutionState:
		return "Untouched"
	case InProgress_MessageExecutionState:
		return "InProgress"
	case Success_MessageExecutionState:
		return "Success"
	case Failure_MessageExecutionState:
		return "Failure"
	default:
		return ""
	}
}

type CcipRouterError ag_binary.BorshEnum

const (
	InvalidSequenceInterval_CcipRouterError CcipRouterError = iota
	RootNotCommitted_CcipRouterError
	ExistingMerkleRoot_CcipRouterError
	Unauthorized_CcipRouterError
	InvalidInputs_CcipRouterError
	UnsupportedSourceChainSelector_CcipRouterError
	UnsupportedDestinationChainSelector_CcipRouterError
	InvalidProof_CcipRouterError
	InvalidMessage_CcipRouterError
	ReachedMaxSequenceNumber_CcipRouterError
	ManualExecutionNotAllowed_CcipRouterError
	InvalidInputsTokenIndices_CcipRouterError
	InvalidInputsPoolAccounts_CcipRouterError
	InvalidInputsTokenAccounts_CcipRouterError
	InvalidInputsConfigAccounts_CcipRouterError
	InvalidInputsTokenAdminRegistryAccounts_CcipRouterError
	InvalidInputsLookupTableAccounts_CcipRouterError
	InvalidInputsLookupTableAccountWritable_CcipRouterError
	InvalidInputsTokenAmount_CcipRouterError
	OfframpReleaseMintBalanceMismatch_CcipRouterError
	OfframpInvalidDataLength_CcipRouterError
	StaleCommitReport_CcipRouterError
	DestinationChainDisabled_CcipRouterError
	FeeTokenDisabled_CcipRouterError
	MessageTooLarge_CcipRouterError
	UnsupportedNumberOfTokens_CcipRouterError
	UnsupportedChainFamilySelector_CcipRouterError
	InvalidEVMAddress_CcipRouterError
	InvalidEncoding_CcipRouterError
	InvalidInputsAtaAddress_CcipRouterError
	InvalidInputsAtaWritable_CcipRouterError
	InvalidTokenPrice_CcipRouterError
	StaleGasPrice_CcipRouterError
	InsufficientLamports_CcipRouterError
	InsufficientFunds_CcipRouterError
	UnsupportedToken_CcipRouterError
	InvalidInputsMissingTokenConfig_CcipRouterError
)

func (value CcipRouterError) String() string {
	switch value {
	case InvalidSequenceInterval_CcipRouterError:
		return "InvalidSequenceInterval"
	case RootNotCommitted_CcipRouterError:
		return "RootNotCommitted"
	case ExistingMerkleRoot_CcipRouterError:
		return "ExistingMerkleRoot"
	case Unauthorized_CcipRouterError:
		return "Unauthorized"
	case InvalidInputs_CcipRouterError:
		return "InvalidInputs"
	case UnsupportedSourceChainSelector_CcipRouterError:
		return "UnsupportedSourceChainSelector"
	case UnsupportedDestinationChainSelector_CcipRouterError:
		return "UnsupportedDestinationChainSelector"
	case InvalidProof_CcipRouterError:
		return "InvalidProof"
	case InvalidMessage_CcipRouterError:
		return "InvalidMessage"
	case ReachedMaxSequenceNumber_CcipRouterError:
		return "ReachedMaxSequenceNumber"
	case ManualExecutionNotAllowed_CcipRouterError:
		return "ManualExecutionNotAllowed"
	case InvalidInputsTokenIndices_CcipRouterError:
		return "InvalidInputsTokenIndices"
	case InvalidInputsPoolAccounts_CcipRouterError:
		return "InvalidInputsPoolAccounts"
	case InvalidInputsTokenAccounts_CcipRouterError:
		return "InvalidInputsTokenAccounts"
	case InvalidInputsConfigAccounts_CcipRouterError:
		return "InvalidInputsConfigAccounts"
	case InvalidInputsTokenAdminRegistryAccounts_CcipRouterError:
		return "InvalidInputsTokenAdminRegistryAccounts"
	case InvalidInputsLookupTableAccounts_CcipRouterError:
		return "InvalidInputsLookupTableAccounts"
	case InvalidInputsLookupTableAccountWritable_CcipRouterError:
		return "InvalidInputsLookupTableAccountWritable"
	case InvalidInputsTokenAmount_CcipRouterError:
		return "InvalidInputsTokenAmount"
	case OfframpReleaseMintBalanceMismatch_CcipRouterError:
		return "OfframpReleaseMintBalanceMismatch"
	case OfframpInvalidDataLength_CcipRouterError:
		return "OfframpInvalidDataLength"
	case StaleCommitReport_CcipRouterError:
		return "StaleCommitReport"
	case DestinationChainDisabled_CcipRouterError:
		return "DestinationChainDisabled"
	case FeeTokenDisabled_CcipRouterError:
		return "FeeTokenDisabled"
	case MessageTooLarge_CcipRouterError:
		return "MessageTooLarge"
	case UnsupportedNumberOfTokens_CcipRouterError:
		return "UnsupportedNumberOfTokens"
	case UnsupportedChainFamilySelector_CcipRouterError:
		return "UnsupportedChainFamilySelector"
	case InvalidEVMAddress_CcipRouterError:
		return "InvalidEVMAddress"
	case InvalidEncoding_CcipRouterError:
		return "InvalidEncoding"
	case InvalidInputsAtaAddress_CcipRouterError:
		return "InvalidInputsAtaAddress"
	case InvalidInputsAtaWritable_CcipRouterError:
		return "InvalidInputsAtaWritable"
	case InvalidTokenPrice_CcipRouterError:
		return "InvalidTokenPrice"
	case StaleGasPrice_CcipRouterError:
		return "StaleGasPrice"
	case InsufficientLamports_CcipRouterError:
		return "InsufficientLamports"
	case InsufficientFunds_CcipRouterError:
		return "InsufficientFunds"
	case UnsupportedToken_CcipRouterError:
		return "UnsupportedToken"
	case InvalidInputsMissingTokenConfig_CcipRouterError:
		return "InvalidInputsMissingTokenConfig"
	default:
		return ""
	}
}
