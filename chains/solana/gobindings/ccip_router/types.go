// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type RampMessageHeader struct {
	MessageId           [32]uint8
	SourceChainSelector uint64
	DestChainSelector   uint64
	SequenceNumber      uint64
	Nonce               uint64
}

func (obj RampMessageHeader) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MessageId` param:
	err = encoder.Encode(obj.MessageId)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RampMessageHeader) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MessageId`:
	err = decoder.Decode(&obj.MessageId)
	if err != nil {
		return err
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

type SVM2AnyRampMessage struct {
	Header         RampMessageHeader
	Sender         ag_solanago.PublicKey
	Data           []byte
	Receiver       []byte
	ExtraArgs      []byte
	FeeToken       ag_solanago.PublicKey
	TokenAmounts   []SVM2AnyTokenTransfer
	FeeTokenAmount CrossChainAmount
	FeeValueJuels  CrossChainAmount
}

func (obj SVM2AnyRampMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Header` param:
	err = encoder.Encode(obj.Header)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `ExtraArgs` param:
	err = encoder.Encode(obj.ExtraArgs)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	// Serialize `TokenAmounts` param:
	err = encoder.Encode(obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Serialize `FeeTokenAmount` param:
	err = encoder.Encode(obj.FeeTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `FeeValueJuels` param:
	err = encoder.Encode(obj.FeeValueJuels)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SVM2AnyRampMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Header`:
	err = decoder.Decode(&obj.Header)
	if err != nil {
		return err
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `ExtraArgs`:
	err = decoder.Decode(&obj.ExtraArgs)
	if err != nil {
		return err
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmounts`:
	err = decoder.Decode(&obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Deserialize `FeeTokenAmount`:
	err = decoder.Decode(&obj.FeeTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `FeeValueJuels`:
	err = decoder.Decode(&obj.FeeValueJuels)
	if err != nil {
		return err
	}
	return nil
}

type SVM2AnyTokenTransfer struct {
	SourcePoolAddress ag_solanago.PublicKey
	DestTokenAddress  []byte
	ExtraData         []byte
	Amount            CrossChainAmount
	DestExecData      []byte
}

func (obj SVM2AnyTokenTransfer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourcePoolAddress` param:
	err = encoder.Encode(obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Serialize `DestTokenAddress` param:
	err = encoder.Encode(obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Serialize `ExtraData` param:
	err = encoder.Encode(obj.ExtraData)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `DestExecData` param:
	err = encoder.Encode(obj.DestExecData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SVM2AnyTokenTransfer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourcePoolAddress`:
	err = decoder.Decode(&obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Deserialize `DestTokenAddress`:
	err = decoder.Decode(&obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Deserialize `ExtraData`:
	err = decoder.Decode(&obj.ExtraData)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `DestExecData`:
	err = decoder.Decode(&obj.DestExecData)
	if err != nil {
		return err
	}
	return nil
}

type SVM2AnyMessage struct {
	Receiver     []byte
	Data         []byte
	TokenAmounts []SVMTokenAmount
	FeeToken     ag_solanago.PublicKey
	ExtraArgs    []byte
}

func (obj SVM2AnyMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `TokenAmounts` param:
	err = encoder.Encode(obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	// Serialize `ExtraArgs` param:
	err = encoder.Encode(obj.ExtraArgs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SVM2AnyMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmounts`:
	err = decoder.Decode(&obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	// Deserialize `ExtraArgs`:
	err = decoder.Decode(&obj.ExtraArgs)
	if err != nil {
		return err
	}
	return nil
}

type SVMTokenAmount struct {
	Token  ag_solanago.PublicKey
	Amount uint64
}

func (obj SVMTokenAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SVMTokenAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type CrossChainAmount struct {
	LeBytes [32]uint8
}

func (obj CrossChainAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LeBytes` param:
	err = encoder.Encode(obj.LeBytes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CrossChainAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LeBytes`:
	err = decoder.Decode(&obj.LeBytes)
	if err != nil {
		return err
	}
	return nil
}

type GetFeeResult struct {
	Amount uint64
	Juels  ag_binary.Uint128
	Token  ag_solanago.PublicKey
}

func (obj GetFeeResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Juels` param:
	err = encoder.Encode(obj.Juels)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GetFeeResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Juels`:
	err = decoder.Decode(&obj.Juels)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	return nil
}

type DestChainState struct {
	SequenceNumber          uint64
	SequenceNumberToRestore uint64
	RestoreOnAction         RestoreOnAction
}

func (obj DestChainState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumberToRestore` param:
	err = encoder.Encode(obj.SequenceNumberToRestore)
	if err != nil {
		return err
	}
	// Serialize `RestoreOnAction` param:
	err = encoder.Encode(obj.RestoreOnAction)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumberToRestore`:
	err = decoder.Decode(&obj.SequenceNumberToRestore)
	if err != nil {
		return err
	}
	// Deserialize `RestoreOnAction`:
	err = decoder.Decode(&obj.RestoreOnAction)
	if err != nil {
		return err
	}
	return nil
}

type DestChainConfig struct {
	LaneCodeVersion  CodeVersion
	AllowedSenders   []ag_solanago.PublicKey
	AllowListEnabled bool
}

func (obj DestChainConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LaneCodeVersion` param:
	err = encoder.Encode(obj.LaneCodeVersion)
	if err != nil {
		return err
	}
	// Serialize `AllowedSenders` param:
	err = encoder.Encode(obj.AllowedSenders)
	if err != nil {
		return err
	}
	// Serialize `AllowListEnabled` param:
	err = encoder.Encode(obj.AllowListEnabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LaneCodeVersion`:
	err = decoder.Decode(&obj.LaneCodeVersion)
	if err != nil {
		return err
	}
	// Deserialize `AllowedSenders`:
	err = decoder.Decode(&obj.AllowedSenders)
	if err != nil {
		return err
	}
	// Deserialize `AllowListEnabled`:
	err = decoder.Decode(&obj.AllowListEnabled)
	if err != nil {
		return err
	}
	return nil
}

type DeriveAccountsResponse struct {
	// If this vector is not empty, you must call the `derive_` method again including
	// exactly these accounts as the `remaining_accounts` field.
	AskAgainWith []CcipAccountMeta

	// You must append these accounts at the end of a separate list. When `next_stage`
	// is finally empty, this separate list will contain all the accounts to use for the
	// instruction of interest.
	AccountsToSave []CcipAccountMeta

	// Append these look up tables at the end of a list. It will contain all LUTs
	// that the instruction of interest can use.
	LookUpTablesToSave []ag_solanago.PublicKey

	// Identifies the derivation stage.
	CurrentStage string

	// Identifies the next derivation stage. If empty, the derivation is complete.
	NextStage string
}

func (obj DeriveAccountsResponse) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AskAgainWith` param:
	err = encoder.Encode(obj.AskAgainWith)
	if err != nil {
		return err
	}
	// Serialize `AccountsToSave` param:
	err = encoder.Encode(obj.AccountsToSave)
	if err != nil {
		return err
	}
	// Serialize `LookUpTablesToSave` param:
	err = encoder.Encode(obj.LookUpTablesToSave)
	if err != nil {
		return err
	}
	// Serialize `CurrentStage` param:
	err = encoder.Encode(obj.CurrentStage)
	if err != nil {
		return err
	}
	// Serialize `NextStage` param:
	err = encoder.Encode(obj.NextStage)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DeriveAccountsResponse) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AskAgainWith`:
	err = decoder.Decode(&obj.AskAgainWith)
	if err != nil {
		return err
	}
	// Deserialize `AccountsToSave`:
	err = decoder.Decode(&obj.AccountsToSave)
	if err != nil {
		return err
	}
	// Deserialize `LookUpTablesToSave`:
	err = decoder.Decode(&obj.LookUpTablesToSave)
	if err != nil {
		return err
	}
	// Deserialize `CurrentStage`:
	err = decoder.Decode(&obj.CurrentStage)
	if err != nil {
		return err
	}
	// Deserialize `NextStage`:
	err = decoder.Decode(&obj.NextStage)
	if err != nil {
		return err
	}
	return nil
}

type CcipAccountMeta struct {
	Pubkey     ag_solanago.PublicKey
	IsSigner   bool
	IsWritable bool
}

func (obj CcipAccountMeta) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsSigner` param:
	err = encoder.Encode(obj.IsSigner)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CcipAccountMeta) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsSigner`:
	err = decoder.Decode(&obj.IsSigner)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type DeriveAccountsCcipSendParams struct {
	DestChainSelector uint64
	CcipSendCaller    ag_solanago.PublicKey
	Message           SVM2AnyMessage
}

func (obj DeriveAccountsCcipSendParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `CcipSendCaller` param:
	err = encoder.Encode(obj.CcipSendCaller)
	if err != nil {
		return err
	}
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DeriveAccountsCcipSendParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `CcipSendCaller`:
	err = decoder.Decode(&obj.CcipSendCaller)
	if err != nil {
		return err
	}
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	return nil
}

type DeriveAccountsCcipSendStage interface {
	isDeriveAccountsCcipSendStage()
}

type deriveAccountsCcipSendStageContainer struct {
	Enum                        ag_binary.BorshEnum `borsh_enum:"true"`
	Start                       Start
	FinishMainAccountList       FinishMainAccountList
	RetrieveTokenLUTs           RetrieveTokenLUTs
	RetrievePoolPrograms        RetrievePoolPrograms
	TokenTransferStaticAccounts TokenTransferStaticAccounts
	NestedTokenDerive           NestedTokenDerive
}

type Start uint8

func (obj Start) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *Start) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *Start) isDeriveAccountsCcipSendStage() {}

type FinishMainAccountList uint8

func (obj FinishMainAccountList) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *FinishMainAccountList) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *FinishMainAccountList) isDeriveAccountsCcipSendStage() {}

type RetrieveTokenLUTs uint8

func (obj RetrieveTokenLUTs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *RetrieveTokenLUTs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *RetrieveTokenLUTs) isDeriveAccountsCcipSendStage() {}

type RetrievePoolPrograms uint8

func (obj RetrievePoolPrograms) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *RetrievePoolPrograms) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *RetrievePoolPrograms) isDeriveAccountsCcipSendStage() {}

type TokenTransferStaticAccounts struct {
	Token uint32
	Page  uint32
}

func (obj TokenTransferStaticAccounts) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `Page` param:
	err = encoder.Encode(obj.Page)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenTransferStaticAccounts) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `Page`:
	err = decoder.Decode(&obj.Page)
	if err != nil {
		return err
	}
	return nil
}

func (_ *TokenTransferStaticAccounts) isDeriveAccountsCcipSendStage() {}

type NestedTokenDerive struct {
	Token         uint32
	TokenSubstage string
}

func (obj NestedTokenDerive) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `TokenSubstage` param:
	err = encoder.Encode(obj.TokenSubstage)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NestedTokenDerive) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `TokenSubstage`:
	err = decoder.Decode(&obj.TokenSubstage)
	if err != nil {
		return err
	}
	return nil
}

func (_ *NestedTokenDerive) isDeriveAccountsCcipSendStage() {}

type CodeVersion ag_binary.BorshEnum

const (
	Default_CodeVersion CodeVersion = iota
	V1_CodeVersion
)

func (value CodeVersion) String() string {
	switch value {
	case Default_CodeVersion:
		return "Default"
	case V1_CodeVersion:
		return "V1"
	default:
		return ""
	}
}

type RestoreOnAction ag_binary.BorshEnum

const (
	None_RestoreOnAction RestoreOnAction = iota
	Upgrade_RestoreOnAction
	Rollback_RestoreOnAction
)

func (value RestoreOnAction) String() string {
	switch value {
	case None_RestoreOnAction:
		return "None"
	case Upgrade_RestoreOnAction:
		return "Upgrade"
	case Rollback_RestoreOnAction:
		return "Rollback"
	default:
		return ""
	}
}
