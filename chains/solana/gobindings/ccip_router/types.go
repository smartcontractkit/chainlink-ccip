// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AdministratorTransferRequested struct {
	Token        ag_solanago.PublicKey
	CurrentAdmin ag_solanago.PublicKey
	NewAdmin     ag_solanago.PublicKey
}

func (obj AdministratorTransferRequested) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `CurrentAdmin` param:
	err = encoder.Encode(obj.CurrentAdmin)
	if err != nil {
		return err
	}
	// Serialize `NewAdmin` param:
	err = encoder.Encode(obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdministratorTransferRequested) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `CurrentAdmin`:
	err = decoder.Decode(&obj.CurrentAdmin)
	if err != nil {
		return err
	}
	// Deserialize `NewAdmin`:
	err = decoder.Decode(&obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

type AdministratorTransferred struct {
	Token    ag_solanago.PublicKey
	NewAdmin ag_solanago.PublicKey
}

func (obj AdministratorTransferred) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `NewAdmin` param:
	err = encoder.Encode(obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdministratorTransferred) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `NewAdmin`:
	err = decoder.Decode(&obj.NewAdmin)
	if err != nil {
		return err
	}
	return nil
}

type AllowedOfframp struct{}

func (obj AllowedOfframp) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *AllowedOfframp) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type CCIPMessageSent struct {
	DestChainSelector uint64
	SequenceNumber    uint64
	Message           SVM2AnyRampMessage
}

func (obj CCIPMessageSent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CCIPMessageSent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	return nil
}

type CcipVersionForDestChainVersionBumped struct {
	DestChainSelector      uint64
	PreviousSequenceNumber uint64
	NewSequenceNumber      uint64
}

func (obj CcipVersionForDestChainVersionBumped) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `PreviousSequenceNumber` param:
	err = encoder.Encode(obj.PreviousSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `NewSequenceNumber` param:
	err = encoder.Encode(obj.NewSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CcipVersionForDestChainVersionBumped) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `PreviousSequenceNumber`:
	err = decoder.Decode(&obj.PreviousSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `NewSequenceNumber`:
	err = decoder.Decode(&obj.NewSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

type CcipVersionForDestChainVersionRolledBack struct {
	DestChainSelector      uint64
	PreviousSequenceNumber uint64
	NewSequenceNumber      uint64
}

func (obj CcipVersionForDestChainVersionRolledBack) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `PreviousSequenceNumber` param:
	err = encoder.Encode(obj.PreviousSequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `NewSequenceNumber` param:
	err = encoder.Encode(obj.NewSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CcipVersionForDestChainVersionRolledBack) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `PreviousSequenceNumber`:
	err = decoder.Decode(&obj.PreviousSequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `NewSequenceNumber`:
	err = decoder.Decode(&obj.NewSequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

type CodeVersion ag_binary.BorshEnum

const (
	CodeVersionDefault CodeVersion = iota
	CodeVersionV1
)

func (value CodeVersion) String() string {
	switch value {
	case CodeVersionDefault:
		return "Default"
	case CodeVersionV1:
		return "V1"
	default:
		return ""
	}
}

type Config struct {
	Version            uint8
	DefaultCodeVersion CodeVersion
	SvmChainSelector   uint64
	Owner              ag_solanago.PublicKey
	ProposedOwner      ag_solanago.PublicKey
	FeeQuoter          ag_solanago.PublicKey
	RmnRemote          ag_solanago.PublicKey
	LinkTokenMint      ag_solanago.PublicKey
	FeeAggregator      ag_solanago.PublicKey
}

func (obj Config) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `DefaultCodeVersion` param:
	err = encoder.Encode(obj.DefaultCodeVersion)
	if err != nil {
		return err
	}
	// Serialize `SvmChainSelector` param:
	err = encoder.Encode(obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `ProposedOwner` param:
	err = encoder.Encode(obj.ProposedOwner)
	if err != nil {
		return err
	}
	// Serialize `FeeQuoter` param:
	err = encoder.Encode(obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Serialize `RmnRemote` param:
	err = encoder.Encode(obj.RmnRemote)
	if err != nil {
		return err
	}
	// Serialize `LinkTokenMint` param:
	err = encoder.Encode(obj.LinkTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FeeAggregator` param:
	err = encoder.Encode(obj.FeeAggregator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Config) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `DefaultCodeVersion`:
	err = decoder.Decode(&obj.DefaultCodeVersion)
	if err != nil {
		return err
	}
	// Deserialize `SvmChainSelector`:
	err = decoder.Decode(&obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `ProposedOwner`:
	err = decoder.Decode(&obj.ProposedOwner)
	if err != nil {
		return err
	}
	// Deserialize `FeeQuoter`:
	err = decoder.Decode(&obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Deserialize `RmnRemote`:
	err = decoder.Decode(&obj.RmnRemote)
	if err != nil {
		return err
	}
	// Deserialize `LinkTokenMint`:
	err = decoder.Decode(&obj.LinkTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeAggregator`:
	err = decoder.Decode(&obj.FeeAggregator)
	if err != nil {
		return err
	}
	return nil
}

type ConfigSet struct {
	SvmChainSelector uint64
	FeeQuoter        ag_solanago.PublicKey
	RmnRemote        ag_solanago.PublicKey
	LinkTokenMint    ag_solanago.PublicKey
	FeeAggregator    ag_solanago.PublicKey
}

func (obj ConfigSet) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SvmChainSelector` param:
	err = encoder.Encode(obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Serialize `FeeQuoter` param:
	err = encoder.Encode(obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Serialize `RmnRemote` param:
	err = encoder.Encode(obj.RmnRemote)
	if err != nil {
		return err
	}
	// Serialize `LinkTokenMint` param:
	err = encoder.Encode(obj.LinkTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FeeAggregator` param:
	err = encoder.Encode(obj.FeeAggregator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigSet) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SvmChainSelector`:
	err = decoder.Decode(&obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `FeeQuoter`:
	err = decoder.Decode(&obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Deserialize `RmnRemote`:
	err = decoder.Decode(&obj.RmnRemote)
	if err != nil {
		return err
	}
	// Deserialize `LinkTokenMint`:
	err = decoder.Decode(&obj.LinkTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeAggregator`:
	err = decoder.Decode(&obj.FeeAggregator)
	if err != nil {
		return err
	}
	return nil
}

type CrossChainAmount struct {
	LeBytes [32]uint8
}

func (obj CrossChainAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LeBytes` param:
	err = encoder.Encode(obj.LeBytes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CrossChainAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LeBytes`:
	err = decoder.Decode(&obj.LeBytes)
	if err != nil {
		return err
	}
	return nil
}

type DestChain struct {
	Version       uint8
	ChainSelector uint64
	State         DestChainState
	Config        DestChainConfig
}

func (obj DestChain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

type DestChainAdded struct {
	DestChainSelector uint64
	DestChainConfig   DestChainConfig
}

func (obj DestChainAdded) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `DestChainConfig` param:
	err = encoder.Encode(obj.DestChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainAdded) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `DestChainConfig`:
	err = decoder.Decode(&obj.DestChainConfig)
	if err != nil {
		return err
	}
	return nil
}

type DestChainConfig struct {
	LaneCodeVersion  CodeVersion
	AllowedSenders   []ag_solanago.PublicKey
	AllowListEnabled bool
}

func (obj DestChainConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LaneCodeVersion` param:
	err = encoder.Encode(obj.LaneCodeVersion)
	if err != nil {
		return err
	}
	// Serialize `AllowedSenders` param:
	err = encoder.Encode(obj.AllowedSenders)
	if err != nil {
		return err
	}
	// Serialize `AllowListEnabled` param:
	err = encoder.Encode(obj.AllowListEnabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LaneCodeVersion`:
	err = decoder.Decode(&obj.LaneCodeVersion)
	if err != nil {
		return err
	}
	// Deserialize `AllowedSenders`:
	err = decoder.Decode(&obj.AllowedSenders)
	if err != nil {
		return err
	}
	// Deserialize `AllowListEnabled`:
	err = decoder.Decode(&obj.AllowListEnabled)
	if err != nil {
		return err
	}
	return nil
}

type DestChainConfigUpdated struct {
	DestChainSelector uint64
	DestChainConfig   DestChainConfig
}

func (obj DestChainConfigUpdated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `DestChainConfig` param:
	err = encoder.Encode(obj.DestChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainConfigUpdated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `DestChainConfig`:
	err = decoder.Decode(&obj.DestChainConfig)
	if err != nil {
		return err
	}
	return nil
}

type DestChainState struct {
	SequenceNumber          uint64
	SequenceNumberToRestore uint64
	RestoreOnAction         RestoreOnAction
}

func (obj DestChainState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumberToRestore` param:
	err = encoder.Encode(obj.SequenceNumberToRestore)
	if err != nil {
		return err
	}
	// Serialize `RestoreOnAction` param:
	err = encoder.Encode(obj.RestoreOnAction)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DestChainState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumberToRestore`:
	err = decoder.Decode(&obj.SequenceNumberToRestore)
	if err != nil {
		return err
	}
	// Deserialize `RestoreOnAction`:
	err = decoder.Decode(&obj.RestoreOnAction)
	if err != nil {
		return err
	}
	return nil
}

type FeeTokenAdded struct {
	FeeToken ag_solanago.PublicKey
	Enabled  bool
}

func (obj FeeTokenAdded) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTokenAdded) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

type FeeTokenDisabled struct {
	FeeToken ag_solanago.PublicKey
}

func (obj FeeTokenDisabled) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTokenDisabled) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

type FeeTokenEnabled struct {
	FeeToken ag_solanago.PublicKey
}

func (obj FeeTokenEnabled) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTokenEnabled) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

type FeeTokenRemoved struct {
	FeeToken ag_solanago.PublicKey
}

func (obj FeeTokenRemoved) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTokenRemoved) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	return nil
}

type GetFeeResult struct {
	Amount uint64
	Juels  ag_binary.Uint128
	Token  ag_solanago.PublicKey
}

func (obj GetFeeResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Juels` param:
	err = encoder.Encode(obj.Juels)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GetFeeResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Juels`:
	err = decoder.Decode(&obj.Juels)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	return nil
}

type Nonce struct {
	Version uint8
	Counter uint64
}

func (obj Nonce) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Counter` param:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Nonce) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return err
	}
	return nil
}

type OfframpAdded struct {
	SourceChainSelector uint64
	Offramp             ag_solanago.PublicKey
}

func (obj OfframpAdded) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Offramp` param:
	err = encoder.Encode(obj.Offramp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OfframpAdded) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Offramp`:
	err = decoder.Decode(&obj.Offramp)
	if err != nil {
		return err
	}
	return nil
}

type OfframpRemoved struct {
	SourceChainSelector uint64
	Offramp             ag_solanago.PublicKey
}

func (obj OfframpRemoved) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Offramp` param:
	err = encoder.Encode(obj.Offramp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OfframpRemoved) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Offramp`:
	err = decoder.Decode(&obj.Offramp)
	if err != nil {
		return err
	}
	return nil
}

type OwnershipTransferRequested struct {
	From ag_solanago.PublicKey
	To   ag_solanago.PublicKey
}

func (obj OwnershipTransferRequested) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OwnershipTransferRequested) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	return nil
}

type OwnershipTransferred struct {
	From ag_solanago.PublicKey
	To   ag_solanago.PublicKey
}

func (obj OwnershipTransferred) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OwnershipTransferred) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	return nil
}

type PoolSet struct {
	Token                   ag_solanago.PublicKey
	PreviousPoolLookupTable ag_solanago.PublicKey
	NewPoolLookupTable      ag_solanago.PublicKey
}

func (obj PoolSet) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `PreviousPoolLookupTable` param:
	err = encoder.Encode(obj.PreviousPoolLookupTable)
	if err != nil {
		return err
	}
	// Serialize `NewPoolLookupTable` param:
	err = encoder.Encode(obj.NewPoolLookupTable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolSet) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `PreviousPoolLookupTable`:
	err = decoder.Decode(&obj.PreviousPoolLookupTable)
	if err != nil {
		return err
	}
	// Deserialize `NewPoolLookupTable`:
	err = decoder.Decode(&obj.NewPoolLookupTable)
	if err != nil {
		return err
	}
	return nil
}

type RampMessageHeader struct {
	MessageId           [32]uint8
	SourceChainSelector uint64
	DestChainSelector   uint64
	SequenceNumber      uint64
	Nonce               uint64
}

func (obj RampMessageHeader) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MessageId` param:
	err = encoder.Encode(obj.MessageId)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `DestChainSelector` param:
	err = encoder.Encode(obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RampMessageHeader) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MessageId`:
	err = decoder.Decode(&obj.MessageId)
	if err != nil {
		return err
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `DestChainSelector`:
	err = decoder.Decode(&obj.DestChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

type RestoreOnAction ag_binary.BorshEnum

const (
	RestoreOnActionNone RestoreOnAction = iota
	RestoreOnActionUpgrade
	RestoreOnActionRollback
)

func (value RestoreOnAction) String() string {
	switch value {
	case RestoreOnActionNone:
		return "None"
	case RestoreOnActionUpgrade:
		return "Upgrade"
	case RestoreOnActionRollback:
		return "Rollback"
	default:
		return ""
	}
}

type SVM2AnyMessage struct {
	Receiver     []byte
	Data         []byte
	TokenAmounts []SVMTokenAmount
	FeeToken     ag_solanago.PublicKey
	ExtraArgs    []byte
}

func (obj SVM2AnyMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `TokenAmounts` param:
	err = encoder.Encode(obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	// Serialize `ExtraArgs` param:
	err = encoder.Encode(obj.ExtraArgs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SVM2AnyMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmounts`:
	err = decoder.Decode(&obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	// Deserialize `ExtraArgs`:
	err = decoder.Decode(&obj.ExtraArgs)
	if err != nil {
		return err
	}
	return nil
}

type SVM2AnyRampMessage struct {
	Header         RampMessageHeader
	Sender         ag_solanago.PublicKey
	Data           []byte
	Receiver       []byte
	ExtraArgs      []byte
	FeeToken       ag_solanago.PublicKey
	TokenAmounts   []SVM2AnyTokenTransfer
	FeeTokenAmount CrossChainAmount
	FeeValueJuels  CrossChainAmount
}

func (obj SVM2AnyRampMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Header` param:
	err = encoder.Encode(obj.Header)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	// Serialize `ExtraArgs` param:
	err = encoder.Encode(obj.ExtraArgs)
	if err != nil {
		return err
	}
	// Serialize `FeeToken` param:
	err = encoder.Encode(obj.FeeToken)
	if err != nil {
		return err
	}
	// Serialize `TokenAmounts` param:
	err = encoder.Encode(obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Serialize `FeeTokenAmount` param:
	err = encoder.Encode(obj.FeeTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `FeeValueJuels` param:
	err = encoder.Encode(obj.FeeValueJuels)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SVM2AnyRampMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Header`:
	err = decoder.Decode(&obj.Header)
	if err != nil {
		return err
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	// Deserialize `ExtraArgs`:
	err = decoder.Decode(&obj.ExtraArgs)
	if err != nil {
		return err
	}
	// Deserialize `FeeToken`:
	err = decoder.Decode(&obj.FeeToken)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmounts`:
	err = decoder.Decode(&obj.TokenAmounts)
	if err != nil {
		return err
	}
	// Deserialize `FeeTokenAmount`:
	err = decoder.Decode(&obj.FeeTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `FeeValueJuels`:
	err = decoder.Decode(&obj.FeeValueJuels)
	if err != nil {
		return err
	}
	return nil
}

type SVM2AnyTokenTransfer struct {
	SourcePoolAddress ag_solanago.PublicKey
	DestTokenAddress  []byte
	ExtraData         []byte
	Amount            CrossChainAmount
	DestExecData      []byte
}

func (obj SVM2AnyTokenTransfer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourcePoolAddress` param:
	err = encoder.Encode(obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Serialize `DestTokenAddress` param:
	err = encoder.Encode(obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Serialize `ExtraData` param:
	err = encoder.Encode(obj.ExtraData)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `DestExecData` param:
	err = encoder.Encode(obj.DestExecData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SVM2AnyTokenTransfer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourcePoolAddress`:
	err = decoder.Decode(&obj.SourcePoolAddress)
	if err != nil {
		return err
	}
	// Deserialize `DestTokenAddress`:
	err = decoder.Decode(&obj.DestTokenAddress)
	if err != nil {
		return err
	}
	// Deserialize `ExtraData`:
	err = decoder.Decode(&obj.ExtraData)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `DestExecData`:
	err = decoder.Decode(&obj.DestExecData)
	if err != nil {
		return err
	}
	return nil
}

type SVMTokenAmount struct {
	Token  ag_solanago.PublicKey
	Amount uint64
}

func (obj SVMTokenAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SVMTokenAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type TokenAdminRegistry struct {
	Version              uint8
	Administrator        ag_solanago.PublicKey
	PendingAdministrator ag_solanago.PublicKey
	LookupTable          ag_solanago.PublicKey
	WritableIndexes      [2]ag_binary.Uint128
	Mint                 ag_solanago.PublicKey
}

func (obj TokenAdminRegistry) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Administrator` param:
	err = encoder.Encode(obj.Administrator)
	if err != nil {
		return err
	}
	// Serialize `PendingAdministrator` param:
	err = encoder.Encode(obj.PendingAdministrator)
	if err != nil {
		return err
	}
	// Serialize `LookupTable` param:
	err = encoder.Encode(obj.LookupTable)
	if err != nil {
		return err
	}
	// Serialize `WritableIndexes` param:
	err = encoder.Encode(obj.WritableIndexes)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenAdminRegistry) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Administrator`:
	err = decoder.Decode(&obj.Administrator)
	if err != nil {
		return err
	}
	// Deserialize `PendingAdministrator`:
	err = decoder.Decode(&obj.PendingAdministrator)
	if err != nil {
		return err
	}
	// Deserialize `LookupTable`:
	err = decoder.Decode(&obj.LookupTable)
	if err != nil {
		return err
	}
	// Deserialize `WritableIndexes`:
	err = decoder.Decode(&obj.WritableIndexes)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}
