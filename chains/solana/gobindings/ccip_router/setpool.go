// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sets the pool lookup table for a given token mint.
//
// The administrator of the token admin registry can set the pool lookup table for a given token mint.
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for setting the pool.
// * `writable_indexes` - a bit map of the indexes of the accounts in lookup table that are writable
type SetPoolInstruction struct {
	WritableIndexes *[]byte

	// [0] = [] config
	//
	// [1] = [WRITE] token_admin_registry
	//
	// [2] = [] mint
	//
	// [3] = [] pool_lookuptable
	//
	// [4] = [WRITE, SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetPoolInstructionBuilder creates a new `SetPoolInstruction` instruction builder.
func NewSetPoolInstructionBuilder() *SetPoolInstruction {
	nd := &SetPoolInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetWritableIndexes sets the "writable_indexes" parameter.
func (inst *SetPoolInstruction) SetWritableIndexes(writable_indexes []byte) *SetPoolInstruction {
	inst.WritableIndexes = &writable_indexes
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *SetPoolInstruction) SetConfigAccount(config ag_solanago.PublicKey) *SetPoolInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *SetPoolInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenAdminRegistryAccount sets the "token_admin_registry" account.
func (inst *SetPoolInstruction) SetTokenAdminRegistryAccount(tokenAdminRegistry ag_solanago.PublicKey) *SetPoolInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenAdminRegistry).WRITE()
	return inst
}

// GetTokenAdminRegistryAccount gets the "token_admin_registry" account.
func (inst *SetPoolInstruction) GetTokenAdminRegistryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintAccount sets the "mint" account.
func (inst *SetPoolInstruction) SetMintAccount(mint ag_solanago.PublicKey) *SetPoolInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *SetPoolInstruction) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolLookuptableAccount sets the "pool_lookuptable" account.
func (inst *SetPoolInstruction) SetPoolLookuptableAccount(poolLookuptable ag_solanago.PublicKey) *SetPoolInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolLookuptable)
	return inst
}

// GetPoolLookuptableAccount gets the "pool_lookuptable" account.
func (inst *SetPoolInstruction) GetPoolLookuptableAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SetPoolInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetPoolInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SetPoolInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst SetPoolInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetPool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetPoolInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetPoolInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.WritableIndexes == nil {
			return errors.New("WritableIndexes parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenAdminRegistry is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolLookuptable is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *SetPoolInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetPool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" WritableIndexes", *inst.WritableIndexes))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("token_admin_registry", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    pool_lookuptable", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           authority", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj SetPoolInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WritableIndexes` param:
	err = encoder.Encode(obj.WritableIndexes)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetPoolInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WritableIndexes`:
	err = decoder.Decode(&obj.WritableIndexes)
	if err != nil {
		return err
	}
	return nil
}

// NewSetPoolInstruction declares a new SetPool instruction with the provided parameters and accounts.
func NewSetPoolInstruction(
	// Parameters:
	writable_indexes []byte,
	// Accounts:
	config ag_solanago.PublicKey,
	tokenAdminRegistry ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	poolLookuptable ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *SetPoolInstruction {
	return NewSetPoolInstructionBuilder().
		SetWritableIndexes(writable_indexes).
		SetConfigAccount(config).
		SetTokenAdminRegistryAccount(tokenAdminRegistry).
		SetMintAccount(mint).
		SetPoolLookuptableAccount(poolLookuptable).
		SetAuthorityAccount(authority)
}
