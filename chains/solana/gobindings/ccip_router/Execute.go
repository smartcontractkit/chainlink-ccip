// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_router

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OFF RAMP FLOW
// Executes a message on the destination chain.
//
// The method name needs to be execute with Anchor encoding.
//
// This function is called by the OffChain when executing one Report to the Solana Router.
// In this Flow only one message is sent, the Execution Report. This is different as EVM does,
// this is because there is no try/catch mechanism to allow batch execution.
// This message validates that the Merkle Tree Proof of the given message is correct and is stored in the Commit Report Account.
// The message must be untouched to be executed.
// This message emits the event ExecutionStateChanged with the new state of the message.
// Finally, executes the CPI instruction to the receiver program in the ccip_receive message.
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for the execute.
// * `execution_report` - the execution report containing only one message and proofs
// * `report_context_byte_words` - report_context after execution_report to match context for manually execute (proper decoding order)
// *  consists of:
// * report_context_byte_words[0]: ConfigDigest
// * report_context_byte_words[1]: 24 byte padding, 8 byte sequence number
// * report_context_byte_words[2]: ExtraHash
type Execute struct {
	ExecutionReport        *ExecutionReportSingleChain
	ReportContextByteWords *[3][32]uint8

	// [0] = [] config
	//
	// [1] = [] chainState
	//
	// [2] = [WRITE] commitReport
	//
	// [3] = [] externalExecutionConfig
	//
	// [4] = [WRITE, SIGNER] authority
	//
	// [5] = [] systemProgram
	//
	// [6] = [] sysvarInstructions
	//
	// [7] = [] tokenPoolsSigner
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewExecuteInstructionBuilder creates a new `Execute` instruction builder.
func NewExecuteInstructionBuilder() *Execute {
	nd := &Execute{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetExecutionReport sets the "executionReport" parameter.
func (inst *Execute) SetExecutionReport(executionReport ExecutionReportSingleChain) *Execute {
	inst.ExecutionReport = &executionReport
	return inst
}

// SetReportContextByteWords sets the "reportContextByteWords" parameter.
func (inst *Execute) SetReportContextByteWords(reportContextByteWords [3][32]uint8) *Execute {
	inst.ReportContextByteWords = &reportContextByteWords
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *Execute) SetConfigAccount(config ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *Execute) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetChainStateAccount sets the "chainState" account.
func (inst *Execute) SetChainStateAccount(chainState ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(chainState)
	return inst
}

// GetChainStateAccount gets the "chainState" account.
func (inst *Execute) GetChainStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetCommitReportAccount sets the "commitReport" account.
func (inst *Execute) SetCommitReportAccount(commitReport ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(commitReport).WRITE()
	return inst
}

// GetCommitReportAccount gets the "commitReport" account.
func (inst *Execute) GetCommitReportAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetExternalExecutionConfigAccount sets the "externalExecutionConfig" account.
func (inst *Execute) SetExternalExecutionConfigAccount(externalExecutionConfig ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(externalExecutionConfig)
	return inst
}

// GetExternalExecutionConfigAccount gets the "externalExecutionConfig" account.
func (inst *Execute) GetExternalExecutionConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Execute) SetAuthorityAccount(authority ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Execute) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Execute) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Execute) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetSysvarInstructionsAccount sets the "sysvarInstructions" account.
func (inst *Execute) SetSysvarInstructionsAccount(sysvarInstructions ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(sysvarInstructions)
	return inst
}

// GetSysvarInstructionsAccount gets the "sysvarInstructions" account.
func (inst *Execute) GetSysvarInstructionsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetTokenPoolsSignerAccount sets the "tokenPoolsSigner" account.
func (inst *Execute) SetTokenPoolsSignerAccount(tokenPoolsSigner ag_solanago.PublicKey) *Execute {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenPoolsSigner)
	return inst
}

// GetTokenPoolsSignerAccount gets the "tokenPoolsSigner" account.
func (inst *Execute) GetTokenPoolsSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

func (inst Execute) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Execute,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Execute) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Execute) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ExecutionReport == nil {
			return errors.New("ExecutionReport parameter is not set")
		}
		if inst.ReportContextByteWords == nil {
			return errors.New("ReportContextByteWords parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ChainState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CommitReport is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ExternalExecutionConfig is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SysvarInstructions is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenPoolsSigner is not set")
		}
	}
	return nil
}

func (inst *Execute) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Execute")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("       ExecutionReport", *inst.ExecutionReport))
						paramsBranch.Child(ag_format.Param("ReportContextByteWords", *inst.ReportContextByteWords))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 config", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("             chainState", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("           commitReport", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("externalExecutionConfig", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("              authority", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("          systemProgram", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("     sysvarInstructions", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("       tokenPoolsSigner", inst.AccountMetaSlice[7]))
					})
				})
		})
}

func (obj Execute) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExecutionReport` param:
	err = encoder.Encode(obj.ExecutionReport)
	if err != nil {
		return err
	}
	// Serialize `ReportContextByteWords` param:
	err = encoder.Encode(obj.ReportContextByteWords)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Execute) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExecutionReport`:
	err = decoder.Decode(&obj.ExecutionReport)
	if err != nil {
		return err
	}
	// Deserialize `ReportContextByteWords`:
	err = decoder.Decode(&obj.ReportContextByteWords)
	if err != nil {
		return err
	}
	return nil
}

// NewExecuteInstruction declares a new Execute instruction with the provided parameters and accounts.
func NewExecuteInstruction(
	// Parameters:
	executionReport ExecutionReportSingleChain,
	reportContextByteWords [3][32]uint8,
	// Accounts:
	config ag_solanago.PublicKey,
	chainState ag_solanago.PublicKey,
	commitReport ag_solanago.PublicKey,
	externalExecutionConfig ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarInstructions ag_solanago.PublicKey,
	tokenPoolsSigner ag_solanago.PublicKey) *Execute {
	return NewExecuteInstructionBuilder().
		SetExecutionReport(executionReport).
		SetReportContextByteWords(reportContextByteWords).
		SetConfigAccount(config).
		SetChainStateAccount(chainState).
		SetCommitReportAccount(commitReport).
		SetExternalExecutionConfigAccount(externalExecutionConfig).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram).
		SetSysvarInstructionsAccount(sysvarInstructions).
		SetTokenPoolsSignerAccount(tokenPoolsSigner)
}
