// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package test_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeriveAccountsReleaseOrMintTokens is the `deriveAccountsReleaseOrMintTokens` instruction.
type DeriveAccountsReleaseOrMintTokens struct {
	Stage         *string
	ReleaseOrMint *ReleaseOrMintInV1

	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewDeriveAccountsReleaseOrMintTokensInstructionBuilder creates a new `DeriveAccountsReleaseOrMintTokens` instruction builder.
func NewDeriveAccountsReleaseOrMintTokensInstructionBuilder() *DeriveAccountsReleaseOrMintTokens {
	nd := &DeriveAccountsReleaseOrMintTokens{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 0),
	}
	return nd
}

// SetStage sets the "stage" parameter.
func (inst *DeriveAccountsReleaseOrMintTokens) SetStage(stage string) *DeriveAccountsReleaseOrMintTokens {
	inst.Stage = &stage
	return inst
}

// SetReleaseOrMint sets the "releaseOrMint" parameter.
func (inst *DeriveAccountsReleaseOrMintTokens) SetReleaseOrMint(releaseOrMint ReleaseOrMintInV1) *DeriveAccountsReleaseOrMintTokens {
	inst.ReleaseOrMint = &releaseOrMint
	return inst
}

func (inst DeriveAccountsReleaseOrMintTokens) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeriveAccountsReleaseOrMintTokens,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeriveAccountsReleaseOrMintTokens) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeriveAccountsReleaseOrMintTokens) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Stage == nil {
			return errors.New("Stage parameter is not set")
		}
		if inst.ReleaseOrMint == nil {
			return errors.New("ReleaseOrMint parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
	}
	return nil
}

func (inst *DeriveAccountsReleaseOrMintTokens) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeriveAccountsReleaseOrMintTokens")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Stage", *inst.Stage))
						paramsBranch.Child(ag_format.Param("ReleaseOrMint", *inst.ReleaseOrMint))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=0]").ParentFunc(func(accountsBranch ag_treeout.Branches) {})
				})
		})
}

func (obj DeriveAccountsReleaseOrMintTokens) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Stage` param:
	err = encoder.Encode(obj.Stage)
	if err != nil {
		return err
	}
	// Serialize `ReleaseOrMint` param:
	err = encoder.Encode(obj.ReleaseOrMint)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DeriveAccountsReleaseOrMintTokens) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Stage`:
	err = decoder.Decode(&obj.Stage)
	if err != nil {
		return err
	}
	// Deserialize `ReleaseOrMint`:
	err = decoder.Decode(&obj.ReleaseOrMint)
	if err != nil {
		return err
	}
	return nil
}

// NewDeriveAccountsReleaseOrMintTokensInstruction declares a new DeriveAccountsReleaseOrMintTokens instruction with the provided parameters and accounts.
func NewDeriveAccountsReleaseOrMintTokensInstruction(
	// Parameters:
	stage string,
	releaseOrMint ReleaseOrMintInV1) *DeriveAccountsReleaseOrMintTokens {
	return NewDeriveAccountsReleaseOrMintTokensInstructionBuilder().
		SetStage(stage).
		SetReleaseOrMint(releaseOrMint)
}
