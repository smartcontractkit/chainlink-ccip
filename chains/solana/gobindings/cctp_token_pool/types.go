// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package cctp_token_pool

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type MessageAndAttestation struct {
	Message     []byte
	Attestation []byte
}

func (obj MessageAndAttestation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	// Serialize `Attestation` param:
	err = encoder.Encode(obj.Attestation)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MessageAndAttestation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	// Deserialize `Attestation`:
	err = decoder.Decode(&obj.Attestation)
	if err != nil {
		return err
	}
	return nil
}

type DepositForBurnWithCallerParams struct {
	Amount            uint64
	DestinationDomain uint32
	MintRecipient     ag_solanago.PublicKey
	DestinationCaller ag_solanago.PublicKey
}

func (obj DepositForBurnWithCallerParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `DestinationDomain` param:
	err = encoder.Encode(obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Serialize `MintRecipient` param:
	err = encoder.Encode(obj.MintRecipient)
	if err != nil {
		return err
	}
	// Serialize `DestinationCaller` param:
	err = encoder.Encode(obj.DestinationCaller)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositForBurnWithCallerParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `DestinationDomain`:
	err = decoder.Decode(&obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Deserialize `MintRecipient`:
	err = decoder.Decode(&obj.MintRecipient)
	if err != nil {
		return err
	}
	// Deserialize `DestinationCaller`:
	err = decoder.Decode(&obj.DestinationCaller)
	if err != nil {
		return err
	}
	return nil
}
