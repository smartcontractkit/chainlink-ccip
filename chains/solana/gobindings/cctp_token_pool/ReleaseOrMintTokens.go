// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package cctp_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ReleaseOrMintTokens is the `releaseOrMintTokens` instruction.
type ReleaseOrMintTokens struct {
	ReleaseOrMint *ReleaseOrMintInV1

	// [0] = [SIGNER] authority
	//
	// [1] = [] offrampProgram
	// ··········· CHECK offramp program: exists only to derive the allowed offramp PDA
	// ··········· and the authority PDA.
	//
	// [2] = [] allowedOfframp
	// ··········· CHECK PDA of the router program verifying the signer is an allowed offramp.
	// ··········· If PDA does not exist, the router doesn't allow this offramp
	//
	// [3] = [] state
	//
	// [4] = [] tokenProgram
	//
	// [5] = [] mint
	//
	// [6] = [] poolSigner
	//
	// [7] = [WRITE] poolTokenAccount
	//
	// [8] = [] chainConfig
	//
	// [9] = [] rmnRemote
	//
	// [10] = [] rmnRemoteCurses
	//
	// [11] = [] rmnRemoteConfig
	//
	// [12] = [WRITE] receiverTokenAccount
	//
	// [13] = [] cctpAuthorityPda
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [14] = [] cctpMessageTransmitterAccount
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [15] = [] cctpUsedNonces
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [16] = [] cctpTokenMessengerMinter
	// ··········· CHECK this is CCTP's TokenMessengerMinter program, which
	// ··········· is invoked by CCTP's MessageTransmitter as it is the receiver of the CCTP message.
	//
	// [17] = [] systemProgram
	//
	// [18] = [] cctpEventAuthority
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [19] = [] cctpMessageTransmitter
	// ··········· CHECK this is the CCTP Message Transmitter program, which
	// ··········· is invoked by this program.
	//
	// [20] = [] cctpTokenMessengerAccount
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [21] = [] cctpTokenMinterAccount
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [22] = [] cctpLocalToken
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [23] = [] cctpRemoteTokenMessengerKey
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [24] = [] cctpTokenPair
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [25] = [] cctpCustodyTokenAccount
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [26] = [] cctpTokenMessengerEventAuthority
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewReleaseOrMintTokensInstructionBuilder creates a new `ReleaseOrMintTokens` instruction builder.
func NewReleaseOrMintTokensInstructionBuilder() *ReleaseOrMintTokens {
	nd := &ReleaseOrMintTokens{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 27),
	}
	return nd
}

// SetReleaseOrMint sets the "releaseOrMint" parameter.
func (inst *ReleaseOrMintTokens) SetReleaseOrMint(releaseOrMint ReleaseOrMintInV1) *ReleaseOrMintTokens {
	inst.ReleaseOrMint = &releaseOrMint
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ReleaseOrMintTokens) SetAuthorityAccount(authority ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ReleaseOrMintTokens) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetOfframpProgramAccount sets the "offrampProgram" account.
// CHECK offramp program: exists only to derive the allowed offramp PDA
// and the authority PDA.
func (inst *ReleaseOrMintTokens) SetOfframpProgramAccount(offrampProgram ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(offrampProgram)
	return inst
}

// GetOfframpProgramAccount gets the "offrampProgram" account.
// CHECK offramp program: exists only to derive the allowed offramp PDA
// and the authority PDA.
func (inst *ReleaseOrMintTokens) GetOfframpProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetAllowedOfframpAccount sets the "allowedOfframp" account.
// CHECK PDA of the router program verifying the signer is an allowed offramp.
// If PDA does not exist, the router doesn't allow this offramp
func (inst *ReleaseOrMintTokens) SetAllowedOfframpAccount(allowedOfframp ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(allowedOfframp)
	return inst
}

// GetAllowedOfframpAccount gets the "allowedOfframp" account.
// CHECK PDA of the router program verifying the signer is an allowed offramp.
// If PDA does not exist, the router doesn't allow this offramp
func (inst *ReleaseOrMintTokens) GetAllowedOfframpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetStateAccount sets the "state" account.
func (inst *ReleaseOrMintTokens) SetStateAccount(state ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ReleaseOrMintTokens) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ReleaseOrMintTokens) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ReleaseOrMintTokens) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetMintAccount sets the "mint" account.
func (inst *ReleaseOrMintTokens) SetMintAccount(mint ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *ReleaseOrMintTokens) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetPoolSignerAccount sets the "poolSigner" account.
func (inst *ReleaseOrMintTokens) SetPoolSignerAccount(poolSigner ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolSigner)
	return inst
}

// GetPoolSignerAccount gets the "poolSigner" account.
func (inst *ReleaseOrMintTokens) GetPoolSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetPoolTokenAccountAccount sets the "poolTokenAccount" account.
func (inst *ReleaseOrMintTokens) SetPoolTokenAccountAccount(poolTokenAccount ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolTokenAccount).WRITE()
	return inst
}

// GetPoolTokenAccountAccount gets the "poolTokenAccount" account.
func (inst *ReleaseOrMintTokens) GetPoolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetChainConfigAccount sets the "chainConfig" account.
func (inst *ReleaseOrMintTokens) SetChainConfigAccount(chainConfig ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(chainConfig)
	return inst
}

// GetChainConfigAccount gets the "chainConfig" account.
func (inst *ReleaseOrMintTokens) GetChainConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetRmnRemoteAccount sets the "rmnRemote" account.
func (inst *ReleaseOrMintTokens) SetRmnRemoteAccount(rmnRemote ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rmnRemote)
	return inst
}

// GetRmnRemoteAccount gets the "rmnRemote" account.
func (inst *ReleaseOrMintTokens) GetRmnRemoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetRmnRemoteCursesAccount sets the "rmnRemoteCurses" account.
func (inst *ReleaseOrMintTokens) SetRmnRemoteCursesAccount(rmnRemoteCurses ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(rmnRemoteCurses)
	return inst
}

// GetRmnRemoteCursesAccount gets the "rmnRemoteCurses" account.
func (inst *ReleaseOrMintTokens) GetRmnRemoteCursesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetRmnRemoteConfigAccount sets the "rmnRemoteConfig" account.
func (inst *ReleaseOrMintTokens) SetRmnRemoteConfigAccount(rmnRemoteConfig ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rmnRemoteConfig)
	return inst
}

// GetRmnRemoteConfigAccount gets the "rmnRemoteConfig" account.
func (inst *ReleaseOrMintTokens) GetRmnRemoteConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

// SetReceiverTokenAccountAccount sets the "receiverTokenAccount" account.
func (inst *ReleaseOrMintTokens) SetReceiverTokenAccountAccount(receiverTokenAccount ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(receiverTokenAccount).WRITE()
	return inst
}

// GetReceiverTokenAccountAccount gets the "receiverTokenAccount" account.
func (inst *ReleaseOrMintTokens) GetReceiverTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12]
}

// SetCctpAuthorityPdaAccount sets the "cctpAuthorityPda" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpAuthorityPdaAccount(cctpAuthorityPda ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(cctpAuthorityPda)
	return inst
}

// GetCctpAuthorityPdaAccount gets the "cctpAuthorityPda" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpAuthorityPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13]
}

// SetCctpMessageTransmitterAccountAccount sets the "cctpMessageTransmitterAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpMessageTransmitterAccountAccount(cctpMessageTransmitterAccount ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(cctpMessageTransmitterAccount)
	return inst
}

// GetCctpMessageTransmitterAccountAccount gets the "cctpMessageTransmitterAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpMessageTransmitterAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14]
}

// SetCctpUsedNoncesAccount sets the "cctpUsedNonces" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpUsedNoncesAccount(cctpUsedNonces ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(cctpUsedNonces)
	return inst
}

// GetCctpUsedNoncesAccount gets the "cctpUsedNonces" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpUsedNoncesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[15]
}

// SetCctpTokenMessengerMinterAccount sets the "cctpTokenMessengerMinter" account.
// CHECK this is CCTP's TokenMessengerMinter program, which
// is invoked by CCTP's MessageTransmitter as it is the receiver of the CCTP message.
func (inst *ReleaseOrMintTokens) SetCctpTokenMessengerMinterAccount(cctpTokenMessengerMinter ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(cctpTokenMessengerMinter)
	return inst
}

// GetCctpTokenMessengerMinterAccount gets the "cctpTokenMessengerMinter" account.
// CHECK this is CCTP's TokenMessengerMinter program, which
// is invoked by CCTP's MessageTransmitter as it is the receiver of the CCTP message.
func (inst *ReleaseOrMintTokens) GetCctpTokenMessengerMinterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[16]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ReleaseOrMintTokens) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ReleaseOrMintTokens) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[17]
}

// SetCctpEventAuthorityAccount sets the "cctpEventAuthority" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpEventAuthorityAccount(cctpEventAuthority ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(cctpEventAuthority)
	return inst
}

// GetCctpEventAuthorityAccount gets the "cctpEventAuthority" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[18]
}

// SetCctpMessageTransmitterAccount sets the "cctpMessageTransmitter" account.
// CHECK this is the CCTP Message Transmitter program, which
// is invoked by this program.
func (inst *ReleaseOrMintTokens) SetCctpMessageTransmitterAccount(cctpMessageTransmitter ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(cctpMessageTransmitter)
	return inst
}

// GetCctpMessageTransmitterAccount gets the "cctpMessageTransmitter" account.
// CHECK this is the CCTP Message Transmitter program, which
// is invoked by this program.
func (inst *ReleaseOrMintTokens) GetCctpMessageTransmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[19]
}

// SetCctpTokenMessengerAccountAccount sets the "cctpTokenMessengerAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpTokenMessengerAccountAccount(cctpTokenMessengerAccount ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(cctpTokenMessengerAccount)
	return inst
}

// GetCctpTokenMessengerAccountAccount gets the "cctpTokenMessengerAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpTokenMessengerAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[20]
}

// SetCctpTokenMinterAccountAccount sets the "cctpTokenMinterAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpTokenMinterAccountAccount(cctpTokenMinterAccount ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(cctpTokenMinterAccount)
	return inst
}

// GetCctpTokenMinterAccountAccount gets the "cctpTokenMinterAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpTokenMinterAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[21]
}

// SetCctpLocalTokenAccount sets the "cctpLocalToken" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpLocalTokenAccount(cctpLocalToken ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(cctpLocalToken)
	return inst
}

// GetCctpLocalTokenAccount gets the "cctpLocalToken" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpLocalTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[22]
}

// SetCctpRemoteTokenMessengerKeyAccount sets the "cctpRemoteTokenMessengerKey" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpRemoteTokenMessengerKeyAccount(cctpRemoteTokenMessengerKey ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(cctpRemoteTokenMessengerKey)
	return inst
}

// GetCctpRemoteTokenMessengerKeyAccount gets the "cctpRemoteTokenMessengerKey" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpRemoteTokenMessengerKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[23]
}

// SetCctpTokenPairAccount sets the "cctpTokenPair" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpTokenPairAccount(cctpTokenPair ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(cctpTokenPair)
	return inst
}

// GetCctpTokenPairAccount gets the "cctpTokenPair" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpTokenPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[24]
}

// SetCctpCustodyTokenAccountAccount sets the "cctpCustodyTokenAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpCustodyTokenAccountAccount(cctpCustodyTokenAccount ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(cctpCustodyTokenAccount)
	return inst
}

// GetCctpCustodyTokenAccountAccount gets the "cctpCustodyTokenAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpCustodyTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[25]
}

// SetCctpTokenMessengerEventAuthorityAccount sets the "cctpTokenMessengerEventAuthority" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) SetCctpTokenMessengerEventAuthorityAccount(cctpTokenMessengerEventAuthority ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[26] = ag_solanago.Meta(cctpTokenMessengerEventAuthority)
	return inst
}

// GetCctpTokenMessengerEventAuthorityAccount gets the "cctpTokenMessengerEventAuthority" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *ReleaseOrMintTokens) GetCctpTokenMessengerEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[26]
}

func (inst ReleaseOrMintTokens) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ReleaseOrMintTokens,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ReleaseOrMintTokens) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ReleaseOrMintTokens) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ReleaseOrMint == nil {
			return errors.New("ReleaseOrMint parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OfframpProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AllowedOfframp is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolSigner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.ChainConfig is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.RmnRemote is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.RmnRemoteCurses is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.RmnRemoteConfig is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.ReceiverTokenAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.CctpAuthorityPda is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.CctpMessageTransmitterAccount is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.CctpUsedNonces is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.CctpTokenMessengerMinter is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.CctpEventAuthority is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.CctpMessageTransmitter is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.CctpTokenMessengerAccount is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.CctpTokenMinterAccount is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.CctpLocalToken is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.CctpRemoteTokenMessengerKey is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.CctpTokenPair is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.CctpCustodyTokenAccount is not set")
		}
		if inst.AccountMetaSlice[26] == nil {
			return errors.New("accounts.CctpTokenMessengerEventAuthority is not set")
		}
	}
	return nil
}

func (inst *ReleaseOrMintTokens) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ReleaseOrMintTokens")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ReleaseOrMint", *inst.ReleaseOrMint))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=27]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                       authority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("                  offrampProgram", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("                  allowedOfframp", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("                           state", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("                    tokenProgram", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("                            mint", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("                      poolSigner", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("                       poolToken", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("                     chainConfig", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("                       rmnRemote", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("                 rmnRemoteCurses", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("                 rmnRemoteConfig", inst.AccountMetaSlice[11]))
						accountsBranch.Child(ag_format.Meta("                   receiverToken", inst.AccountMetaSlice[12]))
						accountsBranch.Child(ag_format.Meta("                cctpAuthorityPda", inst.AccountMetaSlice[13]))
						accountsBranch.Child(ag_format.Meta("          cctpMessageTransmitter", inst.AccountMetaSlice[14]))
						accountsBranch.Child(ag_format.Meta("                  cctpUsedNonces", inst.AccountMetaSlice[15]))
						accountsBranch.Child(ag_format.Meta("        cctpTokenMessengerMinter", inst.AccountMetaSlice[16]))
						accountsBranch.Child(ag_format.Meta("                   systemProgram", inst.AccountMetaSlice[17]))
						accountsBranch.Child(ag_format.Meta("              cctpEventAuthority", inst.AccountMetaSlice[18]))
						accountsBranch.Child(ag_format.Meta("          cctpMessageTransmitter", inst.AccountMetaSlice[19]))
						accountsBranch.Child(ag_format.Meta("              cctpTokenMessenger", inst.AccountMetaSlice[20]))
						accountsBranch.Child(ag_format.Meta("                 cctpTokenMinter", inst.AccountMetaSlice[21]))
						accountsBranch.Child(ag_format.Meta("                  cctpLocalToken", inst.AccountMetaSlice[22]))
						accountsBranch.Child(ag_format.Meta("     cctpRemoteTokenMessengerKey", inst.AccountMetaSlice[23]))
						accountsBranch.Child(ag_format.Meta("                   cctpTokenPair", inst.AccountMetaSlice[24]))
						accountsBranch.Child(ag_format.Meta("                cctpCustodyToken", inst.AccountMetaSlice[25]))
						accountsBranch.Child(ag_format.Meta("cctpTokenMessengerEventAuthority", inst.AccountMetaSlice[26]))
					})
				})
		})
}

func (obj ReleaseOrMintTokens) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReleaseOrMint` param:
	err = encoder.Encode(obj.ReleaseOrMint)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ReleaseOrMintTokens) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReleaseOrMint`:
	err = decoder.Decode(&obj.ReleaseOrMint)
	if err != nil {
		return err
	}
	return nil
}

// NewReleaseOrMintTokensInstruction declares a new ReleaseOrMintTokens instruction with the provided parameters and accounts.
func NewReleaseOrMintTokensInstruction(
	// Parameters:
	releaseOrMint ReleaseOrMintInV1,
	// Accounts:
	authority ag_solanago.PublicKey,
	offrampProgram ag_solanago.PublicKey,
	allowedOfframp ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	poolSigner ag_solanago.PublicKey,
	poolTokenAccount ag_solanago.PublicKey,
	chainConfig ag_solanago.PublicKey,
	rmnRemote ag_solanago.PublicKey,
	rmnRemoteCurses ag_solanago.PublicKey,
	rmnRemoteConfig ag_solanago.PublicKey,
	receiverTokenAccount ag_solanago.PublicKey,
	cctpAuthorityPda ag_solanago.PublicKey,
	cctpMessageTransmitterAccount ag_solanago.PublicKey,
	cctpUsedNonces ag_solanago.PublicKey,
	cctpTokenMessengerMinter ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	cctpEventAuthority ag_solanago.PublicKey,
	cctpMessageTransmitter ag_solanago.PublicKey,
	cctpTokenMessengerAccount ag_solanago.PublicKey,
	cctpTokenMinterAccount ag_solanago.PublicKey,
	cctpLocalToken ag_solanago.PublicKey,
	cctpRemoteTokenMessengerKey ag_solanago.PublicKey,
	cctpTokenPair ag_solanago.PublicKey,
	cctpCustodyTokenAccount ag_solanago.PublicKey,
	cctpTokenMessengerEventAuthority ag_solanago.PublicKey) *ReleaseOrMintTokens {
	return NewReleaseOrMintTokensInstructionBuilder().
		SetReleaseOrMint(releaseOrMint).
		SetAuthorityAccount(authority).
		SetOfframpProgramAccount(offrampProgram).
		SetAllowedOfframpAccount(allowedOfframp).
		SetStateAccount(state).
		SetTokenProgramAccount(tokenProgram).
		SetMintAccount(mint).
		SetPoolSignerAccount(poolSigner).
		SetPoolTokenAccountAccount(poolTokenAccount).
		SetChainConfigAccount(chainConfig).
		SetRmnRemoteAccount(rmnRemote).
		SetRmnRemoteCursesAccount(rmnRemoteCurses).
		SetRmnRemoteConfigAccount(rmnRemoteConfig).
		SetReceiverTokenAccountAccount(receiverTokenAccount).
		SetCctpAuthorityPdaAccount(cctpAuthorityPda).
		SetCctpMessageTransmitterAccountAccount(cctpMessageTransmitterAccount).
		SetCctpUsedNoncesAccount(cctpUsedNonces).
		SetCctpTokenMessengerMinterAccount(cctpTokenMessengerMinter).
		SetSystemProgramAccount(systemProgram).
		SetCctpEventAuthorityAccount(cctpEventAuthority).
		SetCctpMessageTransmitterAccount(cctpMessageTransmitter).
		SetCctpTokenMessengerAccountAccount(cctpTokenMessengerAccount).
		SetCctpTokenMinterAccountAccount(cctpTokenMinterAccount).
		SetCctpLocalTokenAccount(cctpLocalToken).
		SetCctpRemoteTokenMessengerKeyAccount(cctpRemoteTokenMessengerKey).
		SetCctpTokenPairAccount(cctpTokenPair).
		SetCctpCustodyTokenAccountAccount(cctpCustodyTokenAccount).
		SetCctpTokenMessengerEventAuthorityAccount(cctpTokenMessengerEventAuthority)
}
