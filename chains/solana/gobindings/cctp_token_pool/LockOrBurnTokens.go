// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package cctp_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// LockOrBurnTokens is the `lockOrBurnTokens` instruction.
type LockOrBurnTokens struct {
	LockOrBurn *LockOrBurnInV1

	// [0] = [SIGNER] authority
	//
	// [1] = [] state
	//
	// [2] = [] tokenProgram
	//
	// [3] = [WRITE] mint
	//
	// [4] = [WRITE] poolSigner
	// ··········· hold a balance to pay for the rent of initializing the CCTP MessageSentEvent account
	//
	// [5] = [WRITE] poolTokenAccount
	//
	// [6] = [] rmnRemote
	//
	// [7] = [] rmnRemoteCurses
	//
	// [8] = [] rmnRemoteConfig
	//
	// [9] = [] chainConfig
	//
	// [10] = [] cctpAuthorityPda
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [11] = [WRITE] cctpMessageTransmitterAccount
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [12] = [] cctpTokenMessengerAccount
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [13] = [] cctpTokenMinterAccount
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [14] = [WRITE] cctpLocalToken
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [15] = [] cctpMessageTransmitter
	// ··········· CHECK this is CCTP's MessageTransmitter program, which
	// ··········· is invoked CCTP's TokenMessengerMinter by this program.
	//
	// [16] = [] cctpTokenMessengerMinter
	// ··········· CHECK this is CCTP's TokenMessengerMinter program, which
	// ··········· is invoked by this program.
	//
	// [17] = [] systemProgram
	//
	// [18] = [] cctpEventAuthority
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [19] = [] cctpRemoteTokenMessengerKey
	// ··········· CHECK this is not read by the pool, just forwarded to CCTP
	//
	// [20] = [WRITE] cctpMessageSentEvent
	// ··········· CHECK this is the account in which CCTP will store the event. It is not a PDA of CCTP,
	// ··········· but CCTP will initialize it and become the owner for it.
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewLockOrBurnTokensInstructionBuilder creates a new `LockOrBurnTokens` instruction builder.
func NewLockOrBurnTokensInstructionBuilder() *LockOrBurnTokens {
	nd := &LockOrBurnTokens{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 21),
	}
	return nd
}

// SetLockOrBurn sets the "lockOrBurn" parameter.
func (inst *LockOrBurnTokens) SetLockOrBurn(lockOrBurn LockOrBurnInV1) *LockOrBurnTokens {
	inst.LockOrBurn = &lockOrBurn
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *LockOrBurnTokens) SetAuthorityAccount(authority ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *LockOrBurnTokens) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetStateAccount sets the "state" account.
func (inst *LockOrBurnTokens) SetStateAccount(state ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *LockOrBurnTokens) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *LockOrBurnTokens) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *LockOrBurnTokens) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetMintAccount sets the "mint" account.
func (inst *LockOrBurnTokens) SetMintAccount(mint ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *LockOrBurnTokens) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetPoolSignerAccount sets the "poolSigner" account.
// hold a balance to pay for the rent of initializing the CCTP MessageSentEvent account
func (inst *LockOrBurnTokens) SetPoolSignerAccount(poolSigner ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolSigner).WRITE()
	return inst
}

// GetPoolSignerAccount gets the "poolSigner" account.
// hold a balance to pay for the rent of initializing the CCTP MessageSentEvent account
func (inst *LockOrBurnTokens) GetPoolSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetPoolTokenAccountAccount sets the "poolTokenAccount" account.
func (inst *LockOrBurnTokens) SetPoolTokenAccountAccount(poolTokenAccount ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolTokenAccount).WRITE()
	return inst
}

// GetPoolTokenAccountAccount gets the "poolTokenAccount" account.
func (inst *LockOrBurnTokens) GetPoolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetRmnRemoteAccount sets the "rmnRemote" account.
func (inst *LockOrBurnTokens) SetRmnRemoteAccount(rmnRemote ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rmnRemote)
	return inst
}

// GetRmnRemoteAccount gets the "rmnRemote" account.
func (inst *LockOrBurnTokens) GetRmnRemoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetRmnRemoteCursesAccount sets the "rmnRemoteCurses" account.
func (inst *LockOrBurnTokens) SetRmnRemoteCursesAccount(rmnRemoteCurses ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rmnRemoteCurses)
	return inst
}

// GetRmnRemoteCursesAccount gets the "rmnRemoteCurses" account.
func (inst *LockOrBurnTokens) GetRmnRemoteCursesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetRmnRemoteConfigAccount sets the "rmnRemoteConfig" account.
func (inst *LockOrBurnTokens) SetRmnRemoteConfigAccount(rmnRemoteConfig ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rmnRemoteConfig)
	return inst
}

// GetRmnRemoteConfigAccount gets the "rmnRemoteConfig" account.
func (inst *LockOrBurnTokens) GetRmnRemoteConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetChainConfigAccount sets the "chainConfig" account.
func (inst *LockOrBurnTokens) SetChainConfigAccount(chainConfig ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(chainConfig)
	return inst
}

// GetChainConfigAccount gets the "chainConfig" account.
func (inst *LockOrBurnTokens) GetChainConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetCctpAuthorityPdaAccount sets the "cctpAuthorityPda" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) SetCctpAuthorityPdaAccount(cctpAuthorityPda ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(cctpAuthorityPda)
	return inst
}

// GetCctpAuthorityPdaAccount gets the "cctpAuthorityPda" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) GetCctpAuthorityPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetCctpMessageTransmitterAccountAccount sets the "cctpMessageTransmitterAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) SetCctpMessageTransmitterAccountAccount(cctpMessageTransmitterAccount ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(cctpMessageTransmitterAccount).WRITE()
	return inst
}

// GetCctpMessageTransmitterAccountAccount gets the "cctpMessageTransmitterAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) GetCctpMessageTransmitterAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

// SetCctpTokenMessengerAccountAccount sets the "cctpTokenMessengerAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) SetCctpTokenMessengerAccountAccount(cctpTokenMessengerAccount ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(cctpTokenMessengerAccount)
	return inst
}

// GetCctpTokenMessengerAccountAccount gets the "cctpTokenMessengerAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) GetCctpTokenMessengerAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12]
}

// SetCctpTokenMinterAccountAccount sets the "cctpTokenMinterAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) SetCctpTokenMinterAccountAccount(cctpTokenMinterAccount ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(cctpTokenMinterAccount)
	return inst
}

// GetCctpTokenMinterAccountAccount gets the "cctpTokenMinterAccount" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) GetCctpTokenMinterAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13]
}

// SetCctpLocalTokenAccount sets the "cctpLocalToken" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) SetCctpLocalTokenAccount(cctpLocalToken ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(cctpLocalToken).WRITE()
	return inst
}

// GetCctpLocalTokenAccount gets the "cctpLocalToken" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) GetCctpLocalTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14]
}

// SetCctpMessageTransmitterAccount sets the "cctpMessageTransmitter" account.
// CHECK this is CCTP's MessageTransmitter program, which
// is invoked CCTP's TokenMessengerMinter by this program.
func (inst *LockOrBurnTokens) SetCctpMessageTransmitterAccount(cctpMessageTransmitter ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(cctpMessageTransmitter)
	return inst
}

// GetCctpMessageTransmitterAccount gets the "cctpMessageTransmitter" account.
// CHECK this is CCTP's MessageTransmitter program, which
// is invoked CCTP's TokenMessengerMinter by this program.
func (inst *LockOrBurnTokens) GetCctpMessageTransmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[15]
}

// SetCctpTokenMessengerMinterAccount sets the "cctpTokenMessengerMinter" account.
// CHECK this is CCTP's TokenMessengerMinter program, which
// is invoked by this program.
func (inst *LockOrBurnTokens) SetCctpTokenMessengerMinterAccount(cctpTokenMessengerMinter ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(cctpTokenMessengerMinter)
	return inst
}

// GetCctpTokenMessengerMinterAccount gets the "cctpTokenMessengerMinter" account.
// CHECK this is CCTP's TokenMessengerMinter program, which
// is invoked by this program.
func (inst *LockOrBurnTokens) GetCctpTokenMessengerMinterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[16]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *LockOrBurnTokens) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *LockOrBurnTokens) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[17]
}

// SetCctpEventAuthorityAccount sets the "cctpEventAuthority" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) SetCctpEventAuthorityAccount(cctpEventAuthority ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(cctpEventAuthority)
	return inst
}

// GetCctpEventAuthorityAccount gets the "cctpEventAuthority" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) GetCctpEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[18]
}

// SetCctpRemoteTokenMessengerKeyAccount sets the "cctpRemoteTokenMessengerKey" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) SetCctpRemoteTokenMessengerKeyAccount(cctpRemoteTokenMessengerKey ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(cctpRemoteTokenMessengerKey)
	return inst
}

// GetCctpRemoteTokenMessengerKeyAccount gets the "cctpRemoteTokenMessengerKey" account.
// CHECK this is not read by the pool, just forwarded to CCTP
func (inst *LockOrBurnTokens) GetCctpRemoteTokenMessengerKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[19]
}

// SetCctpMessageSentEventAccount sets the "cctpMessageSentEvent" account.
// CHECK this is the account in which CCTP will store the event. It is not a PDA of CCTP,
// but CCTP will initialize it and become the owner for it.
func (inst *LockOrBurnTokens) SetCctpMessageSentEventAccount(cctpMessageSentEvent ag_solanago.PublicKey) *LockOrBurnTokens {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(cctpMessageSentEvent).WRITE()
	return inst
}

// GetCctpMessageSentEventAccount gets the "cctpMessageSentEvent" account.
// CHECK this is the account in which CCTP will store the event. It is not a PDA of CCTP,
// but CCTP will initialize it and become the owner for it.
func (inst *LockOrBurnTokens) GetCctpMessageSentEventAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[20]
}

func (inst LockOrBurnTokens) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_LockOrBurnTokens,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst LockOrBurnTokens) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *LockOrBurnTokens) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LockOrBurn == nil {
			return errors.New("LockOrBurn parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolSigner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.RmnRemote is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.RmnRemoteCurses is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.RmnRemoteConfig is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.ChainConfig is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CctpAuthorityPda is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.CctpMessageTransmitterAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.CctpTokenMessengerAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.CctpTokenMinterAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.CctpLocalToken is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.CctpMessageTransmitter is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.CctpTokenMessengerMinter is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.CctpEventAuthority is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.CctpRemoteTokenMessengerKey is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.CctpMessageSentEvent is not set")
		}
	}
	return nil
}

func (inst *LockOrBurnTokens) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("LockOrBurnTokens")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("LockOrBurn", *inst.LockOrBurn))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=21]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  authority", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("                      state", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("                       mint", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("                 poolSigner", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("                  poolToken", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("                  rmnRemote", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("            rmnRemoteCurses", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("            rmnRemoteConfig", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("                chainConfig", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("           cctpAuthorityPda", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("     cctpMessageTransmitter", inst.AccountMetaSlice[11]))
						accountsBranch.Child(ag_format.Meta("         cctpTokenMessenger", inst.AccountMetaSlice[12]))
						accountsBranch.Child(ag_format.Meta("            cctpTokenMinter", inst.AccountMetaSlice[13]))
						accountsBranch.Child(ag_format.Meta("             cctpLocalToken", inst.AccountMetaSlice[14]))
						accountsBranch.Child(ag_format.Meta("     cctpMessageTransmitter", inst.AccountMetaSlice[15]))
						accountsBranch.Child(ag_format.Meta("   cctpTokenMessengerMinter", inst.AccountMetaSlice[16]))
						accountsBranch.Child(ag_format.Meta("              systemProgram", inst.AccountMetaSlice[17]))
						accountsBranch.Child(ag_format.Meta("         cctpEventAuthority", inst.AccountMetaSlice[18]))
						accountsBranch.Child(ag_format.Meta("cctpRemoteTokenMessengerKey", inst.AccountMetaSlice[19]))
						accountsBranch.Child(ag_format.Meta("       cctpMessageSentEvent", inst.AccountMetaSlice[20]))
					})
				})
		})
}

func (obj LockOrBurnTokens) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LockOrBurn` param:
	err = encoder.Encode(obj.LockOrBurn)
	if err != nil {
		return err
	}
	return nil
}
func (obj *LockOrBurnTokens) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LockOrBurn`:
	err = decoder.Decode(&obj.LockOrBurn)
	if err != nil {
		return err
	}
	return nil
}

// NewLockOrBurnTokensInstruction declares a new LockOrBurnTokens instruction with the provided parameters and accounts.
func NewLockOrBurnTokensInstruction(
	// Parameters:
	lockOrBurn LockOrBurnInV1,
	// Accounts:
	authority ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	poolSigner ag_solanago.PublicKey,
	poolTokenAccount ag_solanago.PublicKey,
	rmnRemote ag_solanago.PublicKey,
	rmnRemoteCurses ag_solanago.PublicKey,
	rmnRemoteConfig ag_solanago.PublicKey,
	chainConfig ag_solanago.PublicKey,
	cctpAuthorityPda ag_solanago.PublicKey,
	cctpMessageTransmitterAccount ag_solanago.PublicKey,
	cctpTokenMessengerAccount ag_solanago.PublicKey,
	cctpTokenMinterAccount ag_solanago.PublicKey,
	cctpLocalToken ag_solanago.PublicKey,
	cctpMessageTransmitter ag_solanago.PublicKey,
	cctpTokenMessengerMinter ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	cctpEventAuthority ag_solanago.PublicKey,
	cctpRemoteTokenMessengerKey ag_solanago.PublicKey,
	cctpMessageSentEvent ag_solanago.PublicKey) *LockOrBurnTokens {
	return NewLockOrBurnTokensInstructionBuilder().
		SetLockOrBurn(lockOrBurn).
		SetAuthorityAccount(authority).
		SetStateAccount(state).
		SetTokenProgramAccount(tokenProgram).
		SetMintAccount(mint).
		SetPoolSignerAccount(poolSigner).
		SetPoolTokenAccountAccount(poolTokenAccount).
		SetRmnRemoteAccount(rmnRemote).
		SetRmnRemoteCursesAccount(rmnRemoteCurses).
		SetRmnRemoteConfigAccount(rmnRemoteConfig).
		SetChainConfigAccount(chainConfig).
		SetCctpAuthorityPdaAccount(cctpAuthorityPda).
		SetCctpMessageTransmitterAccountAccount(cctpMessageTransmitterAccount).
		SetCctpTokenMessengerAccountAccount(cctpTokenMessengerAccount).
		SetCctpTokenMinterAccountAccount(cctpTokenMinterAccount).
		SetCctpLocalTokenAccount(cctpLocalToken).
		SetCctpMessageTransmitterAccount(cctpMessageTransmitter).
		SetCctpTokenMessengerMinterAccount(cctpTokenMessengerMinter).
		SetSystemProgramAccount(systemProgram).
		SetCctpEventAuthorityAccount(cctpEventAuthority).
		SetCctpRemoteTokenMessengerKeyAccount(cctpRemoteTokenMessengerKey).
		SetCctpMessageSentEventAccount(cctpMessageSentEvent)
}
