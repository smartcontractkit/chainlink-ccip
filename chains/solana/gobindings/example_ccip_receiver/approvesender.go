// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package example_ccip_receiver

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ApproveSender is the `approve_sender` instruction.
type ApproveSenderInstruction struct {
	ChainSelector *uint64
	RemoteAddress *[]byte

	// [0] = [] state
	//
	// [1] = [WRITE] approved_sender
	//
	// [2] = [WRITE, SIGNER] authority
	//
	// [3] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewApproveSenderInstructionBuilder creates a new `ApproveSenderInstruction` instruction builder.
func NewApproveSenderInstructionBuilder() *ApproveSenderInstruction {
	nd := &ApproveSenderInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetChainSelector sets the "_chain_selector" parameter.
func (inst *ApproveSenderInstruction) SetChainSelector(_chain_selector uint64) *ApproveSenderInstruction {
	inst.ChainSelector = &_chain_selector
	return inst
}

// SetRemoteAddress sets the "_remote_address" parameter.
func (inst *ApproveSenderInstruction) SetRemoteAddress(_remote_address []byte) *ApproveSenderInstruction {
	inst.RemoteAddress = &_remote_address
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *ApproveSenderInstruction) SetStateAccount(state ag_solanago.PublicKey) *ApproveSenderInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ApproveSenderInstruction) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetApprovedSenderAccount sets the "approved_sender" account.
func (inst *ApproveSenderInstruction) SetApprovedSenderAccount(approvedSender ag_solanago.PublicKey) *ApproveSenderInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(approvedSender).WRITE()
	return inst
}

// GetApprovedSenderAccount gets the "approved_sender" account.
func (inst *ApproveSenderInstruction) GetApprovedSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ApproveSenderInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *ApproveSenderInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ApproveSenderInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *ApproveSenderInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ApproveSenderInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *ApproveSenderInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst ApproveSenderInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ApproveSender,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ApproveSenderInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ApproveSenderInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ChainSelector == nil {
			return errors.New("ChainSelector parameter is not set")
		}
		if inst.RemoteAddress == nil {
			return errors.New("RemoteAddress parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ApprovedSender is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ApproveSenderInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ApproveSender")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  ChainSelector", *inst.ChainSelector))
						paramsBranch.Child(ag_format.Param("  RemoteAddress", *inst.RemoteAddress))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("approved_sender", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" system_program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj ApproveSenderInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `RemoteAddress` param:
	err = encoder.Encode(obj.RemoteAddress)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ApproveSenderInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `RemoteAddress`:
	err = decoder.Decode(&obj.RemoteAddress)
	if err != nil {
		return err
	}
	return nil
}

// NewApproveSenderInstruction declares a new ApproveSender instruction with the provided parameters and accounts.
func NewApproveSenderInstruction(
	// Parameters:
	_chain_selector uint64,
	_remote_address []byte,
	// Accounts:
	state ag_solanago.PublicKey,
	approvedSender ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ApproveSenderInstruction {
	return NewApproveSenderInstructionBuilder().
		SetChainSelector(_chain_selector).
		SetRemoteAddress(_remote_address).
		SetStateAccount(state).
		SetApprovedSenderAccount(approvedSender).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
