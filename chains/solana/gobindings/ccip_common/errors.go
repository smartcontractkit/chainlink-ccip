// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_common

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrInvalidSequenceInterval = &customErrorDef{
		code: 10000,
		msg:  "The given sequence interval is invalid",
		name: "InvalidSequenceInterval",
	}
	ErrInvalidInputsPoolAccounts = &customErrorDef{
		code: 10001,
		msg:  "Invalid pool accounts",
		name: "InvalidInputsPoolAccounts",
	}
	ErrInvalidInputsTokenAccounts = &customErrorDef{
		code: 10002,
		msg:  "Invalid token accounts",
		name: "InvalidInputsTokenAccounts",
	}
	ErrInvalidInputsTokenAdminRegistryAccounts = &customErrorDef{
		code: 10003,
		msg:  "Invalid Token Admin Registry account",
		name: "InvalidInputsTokenAdminRegistryAccounts",
	}
	ErrInvalidInputsLookupTableAccounts = &customErrorDef{
		code: 10004,
		msg:  "Invalid LookupTable account",
		name: "InvalidInputsLookupTableAccounts",
	}
	ErrInvalidInputsLookupTableAccountWritable = &customErrorDef{
		code: 10005,
		msg:  "Invalid LookupTable account writable access",
		name: "InvalidInputsLookupTableAccountWritable",
	}
	ErrInvalidInputsPoolSignerAccounts = &customErrorDef{
		code: 10006,
		msg:  "Invalid pool signer account",
		name: "InvalidInputsPoolSignerAccounts",
	}
	ErrInvalidChainFamilySelector = &customErrorDef{
		code: 10007,
		msg:  "Invalid chain family selector",
		name: "InvalidChainFamilySelector",
	}
	ErrInvalidEncoding = &customErrorDef{
		code: 10008,
		msg:  "Invalid encoding",
		name: "InvalidEncoding",
	}
	ErrInvalidEVMAddress = &customErrorDef{
		code: 10009,
		msg:  "Invalid EVM address",
		name: "InvalidEVMAddress",
	}
	ErrInvalidSVMAddress = &customErrorDef{
		code: 10010,
		msg:  "Invalid SVM address",
		name: "InvalidSVMAddress",
	}
	Errors = map[int]CustomError{
		10000: ErrInvalidSequenceInterval,
		10001: ErrInvalidInputsPoolAccounts,
		10002: ErrInvalidInputsTokenAccounts,
		10003: ErrInvalidInputsTokenAdminRegistryAccounts,
		10004: ErrInvalidInputsLookupTableAccounts,
		10005: ErrInvalidInputsLookupTableAccountWritable,
		10006: ErrInvalidInputsPoolSignerAccounts,
		10007: ErrInvalidChainFamilySelector,
		10008: ErrInvalidEncoding,
		10009: ErrInvalidEVMAddress,
		10010: ErrInvalidSVMAddress,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
