// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package fee_quoter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Add a price updater address to the list of allowed price updaters.
// On price updates, the fee quoter will check the that caller is allowed.
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for this operation.
// * `price_updater` - The price updater address.
type AddPriceUpdaterInstruction struct {
	PriceUpdater *ag_solanago.PublicKey

	// [0] = [WRITE] allowed_price_updater
	//
	// [1] = [] config
	//
	// [2] = [WRITE, SIGNER] authority
	//
	// [3] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddPriceUpdaterInstructionBuilder creates a new `AddPriceUpdaterInstruction` instruction builder.
func NewAddPriceUpdaterInstructionBuilder() *AddPriceUpdaterInstruction {
	nd := &AddPriceUpdaterInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetPriceUpdater sets the "price_updater" parameter.
func (inst *AddPriceUpdaterInstruction) SetPriceUpdater(price_updater ag_solanago.PublicKey) *AddPriceUpdaterInstruction {
	inst.PriceUpdater = &price_updater
	return inst
}

// SetAllowedPriceUpdaterAccount sets the "allowed_price_updater" account.
func (inst *AddPriceUpdaterInstruction) SetAllowedPriceUpdaterAccount(allowedPriceUpdater ag_solanago.PublicKey) *AddPriceUpdaterInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(allowedPriceUpdater).WRITE()
	return inst
}

// GetAllowedPriceUpdaterAccount gets the "allowed_price_updater" account.
func (inst *AddPriceUpdaterInstruction) GetAllowedPriceUpdaterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *AddPriceUpdaterInstruction) SetConfigAccount(config ag_solanago.PublicKey) *AddPriceUpdaterInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *AddPriceUpdaterInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *AddPriceUpdaterInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *AddPriceUpdaterInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *AddPriceUpdaterInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *AddPriceUpdaterInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddPriceUpdaterInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *AddPriceUpdaterInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst AddPriceUpdaterInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddPriceUpdater,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddPriceUpdaterInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddPriceUpdaterInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PriceUpdater == nil {
			return errors.New("PriceUpdater parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AllowedPriceUpdater is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AddPriceUpdaterInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddPriceUpdater")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" PriceUpdater", *inst.PriceUpdater))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("allowed_price_updater", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       system_program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj AddPriceUpdaterInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PriceUpdater` param:
	err = encoder.Encode(obj.PriceUpdater)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddPriceUpdaterInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PriceUpdater`:
	err = decoder.Decode(&obj.PriceUpdater)
	if err != nil {
		return err
	}
	return nil
}

// NewAddPriceUpdaterInstruction declares a new AddPriceUpdater instruction with the provided parameters and accounts.
func NewAddPriceUpdaterInstruction(
	// Parameters:
	price_updater ag_solanago.PublicKey,
	// Accounts:
	allowedPriceUpdater ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddPriceUpdaterInstruction {
	return NewAddPriceUpdaterInstructionBuilder().
		SetPriceUpdater(price_updater).
		SetAllowedPriceUpdaterAccount(allowedPriceUpdater).
		SetConfigAccount(config).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
