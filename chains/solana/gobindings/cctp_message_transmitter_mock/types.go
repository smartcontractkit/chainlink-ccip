// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package cctp_message_transmitter_mock

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type InitializeParams struct {
	LocalDomain        uint32
	Attester           ag_solanago.PublicKey
	MaxMessageBodySize uint64
	Version            uint32
}

func (obj InitializeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LocalDomain` param:
	err = encoder.Encode(obj.LocalDomain)
	if err != nil {
		return err
	}
	// Serialize `Attester` param:
	err = encoder.Encode(obj.Attester)
	if err != nil {
		return err
	}
	// Serialize `MaxMessageBodySize` param:
	err = encoder.Encode(obj.MaxMessageBodySize)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LocalDomain`:
	err = decoder.Decode(&obj.LocalDomain)
	if err != nil {
		return err
	}
	// Deserialize `Attester`:
	err = decoder.Decode(&obj.Attester)
	if err != nil {
		return err
	}
	// Deserialize `MaxMessageBodySize`:
	err = decoder.Decode(&obj.MaxMessageBodySize)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	return nil
}

type SendMessageParams struct {
	DestinationDomain uint32
	Recipient         ag_solanago.PublicKey
	MessageBody       []byte
}

func (obj SendMessageParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestinationDomain` param:
	err = encoder.Encode(obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Serialize `Recipient` param:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return err
	}
	// Serialize `MessageBody` param:
	err = encoder.Encode(obj.MessageBody)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SendMessageParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestinationDomain`:
	err = decoder.Decode(&obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return err
	}
	// Deserialize `MessageBody`:
	err = decoder.Decode(&obj.MessageBody)
	if err != nil {
		return err
	}
	return nil
}

type SendMessageWithCallerParams struct {
	DestinationDomain uint32
	Recipient         ag_solanago.PublicKey
	MessageBody       []byte
	DestinationCaller ag_solanago.PublicKey
}

func (obj SendMessageWithCallerParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DestinationDomain` param:
	err = encoder.Encode(obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Serialize `Recipient` param:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return err
	}
	// Serialize `MessageBody` param:
	err = encoder.Encode(obj.MessageBody)
	if err != nil {
		return err
	}
	// Serialize `DestinationCaller` param:
	err = encoder.Encode(obj.DestinationCaller)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SendMessageWithCallerParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DestinationDomain`:
	err = decoder.Decode(&obj.DestinationDomain)
	if err != nil {
		return err
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return err
	}
	// Deserialize `MessageBody`:
	err = decoder.Decode(&obj.MessageBody)
	if err != nil {
		return err
	}
	// Deserialize `DestinationCaller`:
	err = decoder.Decode(&obj.DestinationCaller)
	if err != nil {
		return err
	}
	return nil
}

type ReceiveMessageParams struct {
	Message     []byte
	Attestation []byte
}

func (obj ReceiveMessageParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	// Serialize `Attestation` param:
	err = encoder.Encode(obj.Attestation)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReceiveMessageParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	// Deserialize `Attestation`:
	err = decoder.Decode(&obj.Attestation)
	if err != nil {
		return err
	}
	return nil
}

type ReclaimEventAccountParams struct {
	Attestation []byte
}

func (obj ReclaimEventAccountParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Attestation` param:
	err = encoder.Encode(obj.Attestation)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReclaimEventAccountParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Attestation`:
	err = decoder.Decode(&obj.Attestation)
	if err != nil {
		return err
	}
	return nil
}

type GetNoncePDAParams struct {
	Nonce        uint64
	SourceDomain uint32
}

func (obj GetNoncePDAParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `SourceDomain` param:
	err = encoder.Encode(obj.SourceDomain)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GetNoncePDAParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `SourceDomain`:
	err = decoder.Decode(&obj.SourceDomain)
	if err != nil {
		return err
	}
	return nil
}

type IsNonceUsedParams struct {
	Nonce uint64
}

func (obj IsNonceUsedParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *IsNonceUsedParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}
