// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package timelock

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Unblock a previously blocked function selector.
//
// Only the admin can unblock function selectors.
//
// # Parameters
//
// - `ctx`: The context containing the configuration account.
// - `_timelock_id`: The timelock identifier.
// - `selector`: The function selector to unblock.
type UnblockFunctionSelectorInstruction struct {
	TimelockId *[32]uint8
	Selector   *[8]uint8

	// [0] = [WRITE] config
	//
	// [1] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUnblockFunctionSelectorInstructionBuilder creates a new `UnblockFunctionSelectorInstruction` instruction builder.
func NewUnblockFunctionSelectorInstructionBuilder() *UnblockFunctionSelectorInstruction {
	nd := &UnblockFunctionSelectorInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetTimelockId sets the "_timelock_id" parameter.
func (inst *UnblockFunctionSelectorInstruction) SetTimelockId(_timelock_id [32]uint8) *UnblockFunctionSelectorInstruction {
	inst.TimelockId = &_timelock_id
	return inst
}

// SetSelector sets the "selector" parameter.
func (inst *UnblockFunctionSelectorInstruction) SetSelector(selector [8]uint8) *UnblockFunctionSelectorInstruction {
	inst.Selector = &selector
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *UnblockFunctionSelectorInstruction) SetConfigAccount(config ag_solanago.PublicKey) *UnblockFunctionSelectorInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *UnblockFunctionSelectorInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UnblockFunctionSelectorInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *UnblockFunctionSelectorInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UnblockFunctionSelectorInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UnblockFunctionSelectorInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UnblockFunctionSelector,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UnblockFunctionSelectorInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UnblockFunctionSelectorInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TimelockId == nil {
			return errors.New("TimelockId parameter is not set")
		}
		if inst.Selector == nil {
			return errors.New("Selector parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *UnblockFunctionSelectorInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UnblockFunctionSelector")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  TimelockId", *inst.TimelockId))
						paramsBranch.Child(ag_format.Param("    Selector", *inst.Selector))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UnblockFunctionSelectorInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TimelockId` param:
	err = encoder.Encode(obj.TimelockId)
	if err != nil {
		return err
	}
	// Serialize `Selector` param:
	err = encoder.Encode(obj.Selector)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UnblockFunctionSelectorInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TimelockId`:
	err = decoder.Decode(&obj.TimelockId)
	if err != nil {
		return err
	}
	// Deserialize `Selector`:
	err = decoder.Decode(&obj.Selector)
	if err != nil {
		return err
	}
	return nil
}

// NewUnblockFunctionSelectorInstruction declares a new UnblockFunctionSelector instruction with the provided parameters and accounts.
func NewUnblockFunctionSelectorInstruction(
	// Parameters:
	_timelock_id [32]uint8,
	selector [8]uint8,
	// Accounts:
	config ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *UnblockFunctionSelectorInstruction {
	return NewUnblockFunctionSelectorInstructionBuilder().
		SetTimelockId(_timelock_id).
		SetSelector(selector).
		SetConfigAccount(config).
		SetAuthorityAccount(authority)
}
