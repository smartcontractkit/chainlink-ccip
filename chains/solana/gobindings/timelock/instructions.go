// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package timelock

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Timelock"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_AcceptOwnership = ag_binary.TypeID([8]byte{172, 23, 43, 13, 238, 213, 85, 150})

	Instruction_AppendBypasserInstructions = ag_binary.TypeID([8]byte{127, 68, 8, 210, 106, 213, 25, 215})

	Instruction_AppendInstructions = ag_binary.TypeID([8]byte{58, 58, 137, 122, 115, 51, 144, 134})

	Instruction_BatchAddAccess = ag_binary.TypeID([8]byte{73, 141, 223, 79, 66, 154, 226, 67})

	Instruction_BlockFunctionSelector = ag_binary.TypeID([8]byte{119, 89, 101, 41, 72, 143, 218, 185})

	Instruction_BypasserExecuteBatch = ag_binary.TypeID([8]byte{90, 62, 66, 6, 227, 174, 30, 194})

	Instruction_Cancel = ag_binary.TypeID([8]byte{232, 219, 223, 41, 219, 236, 220, 190})

	Instruction_ClearBypasserOperation = ag_binary.TypeID([8]byte{200, 21, 249, 130, 56, 13, 128, 32})

	Instruction_ClearOperation = ag_binary.TypeID([8]byte{111, 217, 62, 240, 224, 75, 60, 58})

	Instruction_ExecuteBatch = ag_binary.TypeID([8]byte{112, 159, 211, 51, 238, 70, 212, 60})

	Instruction_FinalizeBypasserOperation = ag_binary.TypeID([8]byte{45, 55, 198, 51, 124, 24, 169, 250})

	Instruction_FinalizeOperation = ag_binary.TypeID([8]byte{63, 208, 32, 98, 85, 182, 236, 140})

	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_InitializeBypasserOperation = ag_binary.TypeID([8]byte{58, 27, 48, 204, 19, 197, 63, 26})

	Instruction_InitializeOperation = ag_binary.TypeID([8]byte{15, 96, 217, 171, 124, 4, 113, 243})

	Instruction_ScheduleBatch = ag_binary.TypeID([8]byte{242, 140, 87, 106, 71, 226, 86, 32})

	Instruction_TransferOwnership = ag_binary.TypeID([8]byte{65, 177, 215, 73, 53, 45, 99, 47})

	Instruction_UnblockFunctionSelector = ag_binary.TypeID([8]byte{53, 84, 245, 196, 149, 52, 30, 57})

	Instruction_UpdateDelay = ag_binary.TypeID([8]byte{164, 186, 80, 62, 85, 88, 182, 147})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_AcceptOwnership:
		return "AcceptOwnership"
	case Instruction_AppendBypasserInstructions:
		return "AppendBypasserInstructions"
	case Instruction_AppendInstructions:
		return "AppendInstructions"
	case Instruction_BatchAddAccess:
		return "BatchAddAccess"
	case Instruction_BlockFunctionSelector:
		return "BlockFunctionSelector"
	case Instruction_BypasserExecuteBatch:
		return "BypasserExecuteBatch"
	case Instruction_Cancel:
		return "Cancel"
	case Instruction_ClearBypasserOperation:
		return "ClearBypasserOperation"
	case Instruction_ClearOperation:
		return "ClearOperation"
	case Instruction_ExecuteBatch:
		return "ExecuteBatch"
	case Instruction_FinalizeBypasserOperation:
		return "FinalizeBypasserOperation"
	case Instruction_FinalizeOperation:
		return "FinalizeOperation"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_InitializeBypasserOperation:
		return "InitializeBypasserOperation"
	case Instruction_InitializeOperation:
		return "InitializeOperation"
	case Instruction_ScheduleBatch:
		return "ScheduleBatch"
	case Instruction_TransferOwnership:
		return "TransferOwnership"
	case Instruction_UnblockFunctionSelector:
		return "UnblockFunctionSelector"
	case Instruction_UpdateDelay:
		return "UpdateDelay"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "accept_ownership", Type: (*AcceptOwnership)(nil),
		},
		{
			Name: "append_bypasser_instructions", Type: (*AppendBypasserInstructions)(nil),
		},
		{
			Name: "append_instructions", Type: (*AppendInstructions)(nil),
		},
		{
			Name: "batch_add_access", Type: (*BatchAddAccess)(nil),
		},
		{
			Name: "block_function_selector", Type: (*BlockFunctionSelector)(nil),
		},
		{
			Name: "bypasser_execute_batch", Type: (*BypasserExecuteBatch)(nil),
		},
		{
			Name: "cancel", Type: (*Cancel)(nil),
		},
		{
			Name: "clear_bypasser_operation", Type: (*ClearBypasserOperation)(nil),
		},
		{
			Name: "clear_operation", Type: (*ClearOperation)(nil),
		},
		{
			Name: "execute_batch", Type: (*ExecuteBatch)(nil),
		},
		{
			Name: "finalize_bypasser_operation", Type: (*FinalizeBypasserOperation)(nil),
		},
		{
			Name: "finalize_operation", Type: (*FinalizeOperation)(nil),
		},
		{
			Name: "initialize", Type: (*Initialize)(nil),
		},
		{
			Name: "initialize_bypasser_operation", Type: (*InitializeBypasserOperation)(nil),
		},
		{
			Name: "initialize_operation", Type: (*InitializeOperation)(nil),
		},
		{
			Name: "schedule_batch", Type: (*ScheduleBatch)(nil),
		},
		{
			Name: "transfer_ownership", Type: (*TransferOwnership)(nil),
		},
		{
			Name: "unblock_function_selector", Type: (*UnblockFunctionSelector)(nil),
		},
		{
			Name: "update_delay", Type: (*UpdateDelay)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}

func DecodeInstructions(message *ag_solanago.Message) (instructions []*Instruction, err error) {
	for _, ins := range message.Instructions {
		var programID ag_solanago.PublicKey
		if programID, err = message.Program(ins.ProgramIDIndex); err != nil {
			return
		}
		if !programID.Equals(ProgramID) {
			continue
		}
		var accounts []*ag_solanago.AccountMeta
		if accounts, err = ins.ResolveInstructionAccounts(message); err != nil {
			return
		}
		var insDecoded *Instruction
		if insDecoded, err = decodeInstruction(accounts, ins.Data); err != nil {
			return
		}
		instructions = append(instructions, insDecoded)
	}
	return
}
