// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package timelock

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Append additional data to an instruction of a bypasser operation.
//
// # Parameters
//
// - `ctx`: The context containing the bypasser operation account.
// - `_timelock_id`: The timelock identifier.
// - `_id`: The operation identifier.
// - `ix_index`: The index of the instruction.
// - `ix_data_chunk`: The data to append.
type AppendBypasserInstructionDataInstruction struct {
	TimelockId  *[32]uint8
	Id          *[32]uint8
	IxIndex     *uint32
	IxDataChunk *[]byte

	// [0] = [WRITE] operation
	//
	// [1] = [] config
	//
	// [2] = [] role_access_controller
	//
	// [3] = [WRITE, SIGNER] authority
	//
	// [4] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAppendBypasserInstructionDataInstructionBuilder creates a new `AppendBypasserInstructionDataInstruction` instruction builder.
func NewAppendBypasserInstructionDataInstructionBuilder() *AppendBypasserInstructionDataInstruction {
	nd := &AppendBypasserInstructionDataInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetTimelockId sets the "_timelock_id" parameter.
func (inst *AppendBypasserInstructionDataInstruction) SetTimelockId(_timelock_id [32]uint8) *AppendBypasserInstructionDataInstruction {
	inst.TimelockId = &_timelock_id
	return inst
}

// SetId sets the "_id" parameter.
func (inst *AppendBypasserInstructionDataInstruction) SetId(_id [32]uint8) *AppendBypasserInstructionDataInstruction {
	inst.Id = &_id
	return inst
}

// SetIxIndex sets the "ix_index" parameter.
func (inst *AppendBypasserInstructionDataInstruction) SetIxIndex(ix_index uint32) *AppendBypasserInstructionDataInstruction {
	inst.IxIndex = &ix_index
	return inst
}

// SetIxDataChunk sets the "ix_data_chunk" parameter.
func (inst *AppendBypasserInstructionDataInstruction) SetIxDataChunk(ix_data_chunk []byte) *AppendBypasserInstructionDataInstruction {
	inst.IxDataChunk = &ix_data_chunk
	return inst
}

// SetOperationAccount sets the "operation" account.
func (inst *AppendBypasserInstructionDataInstruction) SetOperationAccount(operation ag_solanago.PublicKey) *AppendBypasserInstructionDataInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(operation).WRITE()
	return inst
}

// GetOperationAccount gets the "operation" account.
func (inst *AppendBypasserInstructionDataInstruction) GetOperationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *AppendBypasserInstructionDataInstruction) SetConfigAccount(config ag_solanago.PublicKey) *AppendBypasserInstructionDataInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *AppendBypasserInstructionDataInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRoleAccessControllerAccount sets the "role_access_controller" account.
func (inst *AppendBypasserInstructionDataInstruction) SetRoleAccessControllerAccount(roleAccessController ag_solanago.PublicKey) *AppendBypasserInstructionDataInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(roleAccessController)
	return inst
}

// GetRoleAccessControllerAccount gets the "role_access_controller" account.
func (inst *AppendBypasserInstructionDataInstruction) GetRoleAccessControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *AppendBypasserInstructionDataInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *AppendBypasserInstructionDataInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *AppendBypasserInstructionDataInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *AppendBypasserInstructionDataInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AppendBypasserInstructionDataInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *AppendBypasserInstructionDataInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst AppendBypasserInstructionDataInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AppendBypasserInstructionData,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AppendBypasserInstructionDataInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AppendBypasserInstructionDataInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TimelockId == nil {
			return errors.New("TimelockId parameter is not set")
		}
		if inst.Id == nil {
			return errors.New("Id parameter is not set")
		}
		if inst.IxIndex == nil {
			return errors.New("IxIndex parameter is not set")
		}
		if inst.IxDataChunk == nil {
			return errors.New("IxDataChunk parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Operation is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RoleAccessController is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AppendBypasserInstructionDataInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AppendBypasserInstructionData")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   TimelockId", *inst.TimelockId))
						paramsBranch.Child(ag_format.Param("           Id", *inst.Id))
						paramsBranch.Child(ag_format.Param("      IxIndex", *inst.IxIndex))
						paramsBranch.Child(ag_format.Param("  IxDataChunk", *inst.IxDataChunk))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             operation", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("role_access_controller", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        system_program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj AppendBypasserInstructionDataInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TimelockId` param:
	err = encoder.Encode(obj.TimelockId)
	if err != nil {
		return err
	}
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `IxIndex` param:
	err = encoder.Encode(obj.IxIndex)
	if err != nil {
		return err
	}
	// Serialize `IxDataChunk` param:
	err = encoder.Encode(obj.IxDataChunk)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AppendBypasserInstructionDataInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TimelockId`:
	err = decoder.Decode(&obj.TimelockId)
	if err != nil {
		return err
	}
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `IxIndex`:
	err = decoder.Decode(&obj.IxIndex)
	if err != nil {
		return err
	}
	// Deserialize `IxDataChunk`:
	err = decoder.Decode(&obj.IxDataChunk)
	if err != nil {
		return err
	}
	return nil
}

// NewAppendBypasserInstructionDataInstruction declares a new AppendBypasserInstructionData instruction with the provided parameters and accounts.
func NewAppendBypasserInstructionDataInstruction(
	// Parameters:
	_timelock_id [32]uint8,
	_id [32]uint8,
	ix_index uint32,
	ix_data_chunk []byte,
	// Accounts:
	operation ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	roleAccessController ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AppendBypasserInstructionDataInstruction {
	return NewAppendBypasserInstructionDataInstructionBuilder().
		SetTimelockId(_timelock_id).
		SetId(_id).
		SetIxIndex(ix_index).
		SetIxDataChunk(ix_data_chunk).
		SetOperationAccount(operation).
		SetConfigAccount(config).
		SetRoleAccessControllerAccount(roleAccessController).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
