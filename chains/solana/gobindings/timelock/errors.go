// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package timelock

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrInvalidInput = &customErrorDef{
		code: 6000,
		msg:  "Invalid inputs",
		name: "InvalidInput",
	}
	ErrOverflow = &customErrorDef{
		code: 6001,
		msg:  "Overflow",
		name: "Overflow",
	}
	ErrInvalidId = &customErrorDef{
		code: 6002,
		msg:  "Provided ID is invalid",
		name: "InvalidId",
	}
	ErrOperationNotFinalized = &customErrorDef{
		code: 6003,
		msg:  "operation not finalized",
		name: "OperationNotFinalized",
	}
	ErrOperationAlreadyFinalized = &customErrorDef{
		code: 6004,
		msg:  "operation is already finalized",
		name: "OperationAlreadyFinalized",
	}
	ErrTooManyInstructions = &customErrorDef{
		code: 6005,
		msg:  "too many instructions in the operation",
		name: "TooManyInstructions",
	}
	ErrOperationAlreadyScheduled = &customErrorDef{
		code: 6006,
		msg:  "operation already scheduled",
		name: "OperationAlreadyScheduled",
	}
	ErrDelayInsufficient = &customErrorDef{
		code: 6007,
		msg:  "insufficient delay",
		name: "DelayInsufficient",
	}
	ErrOperationNotCancellable = &customErrorDef{
		code: 6008,
		msg:  "operation cannot be cancelled",
		name: "OperationNotCancellable",
	}
	ErrOperationNotReady = &customErrorDef{
		code: 6009,
		msg:  "operation is not ready",
		name: "OperationNotReady",
	}
	ErrOperationAlreadyExecuted = &customErrorDef{
		code: 6010,
		msg:  "operation is already executed",
		name: "OperationAlreadyExecuted",
	}
	ErrMissingDependency = &customErrorDef{
		code: 6011,
		msg:  "Predecessor operation is not found",
		name: "MissingDependency",
	}
	ErrInvalidAccessController = &customErrorDef{
		code: 6012,
		msg:  "Provided access controller is invalid",
		name: "InvalidAccessController",
	}
	ErrBlockedSelector = &customErrorDef{
		code: 6013,
		msg:  "selector is blocked",
		name: "BlockedSelector",
	}
	ErrAlreadyBlocked = &customErrorDef{
		code: 6014,
		msg:  "selector is already blocked",
		name: "AlreadyBlocked",
	}
	ErrSelectorNotFound = &customErrorDef{
		code: 6015,
		msg:  "selector not found",
		name: "SelectorNotFound",
	}
	ErrMaxCapacityReached = &customErrorDef{
		code: 6016,
		msg:  "maximum capacity reached for function blocker",
		name: "MaxCapacityReached",
	}
	Errors = map[int]CustomError{
		6000: ErrInvalidInput,
		6001: ErrOverflow,
		6002: ErrInvalidId,
		6003: ErrOperationNotFinalized,
		6004: ErrOperationAlreadyFinalized,
		6005: ErrTooManyInstructions,
		6006: ErrOperationAlreadyScheduled,
		6007: ErrDelayInsufficient,
		6008: ErrOperationNotCancellable,
		6009: ErrOperationNotReady,
		6010: ErrOperationAlreadyExecuted,
		6011: ErrMissingDependency,
		6012: ErrInvalidAccessController,
		6013: ErrBlockedSelector,
		6014: ErrAlreadyBlocked,
		6015: ErrSelectorNotFound,
		6016: ErrMaxCapacityReached,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
