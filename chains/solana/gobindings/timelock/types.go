// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package timelock

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AccessController struct {
	Owner         ag_solanago.PublicKey
	ProposedOwner ag_solanago.PublicKey
	AccessList    AccessList
}

func (obj AccessController) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `ProposedOwner` param:
	err = encoder.Encode(obj.ProposedOwner)
	if err != nil {
		return err
	}
	// Serialize `AccessList` param:
	err = encoder.Encode(obj.AccessList)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AccessController) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `ProposedOwner`:
	err = decoder.Decode(&obj.ProposedOwner)
	if err != nil {
		return err
	}
	// Deserialize `AccessList`:
	err = decoder.Decode(&obj.AccessList)
	if err != nil {
		return err
	}
	return nil
}

type AccessList struct {
	Xs  [64]ag_solanago.PublicKey
	Len uint64
}

func (obj AccessList) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Xs` param:
	err = encoder.Encode(obj.Xs)
	if err != nil {
		return err
	}
	// Serialize `Len` param:
	err = encoder.Encode(obj.Len)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AccessList) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Xs`:
	err = decoder.Decode(&obj.Xs)
	if err != nil {
		return err
	}
	// Deserialize `Len`:
	err = decoder.Decode(&obj.Len)
	if err != nil {
		return err
	}
	return nil
}

type BlockedSelectors struct {
	Xs  [128][8]uint8
	Len uint64
}

func (obj BlockedSelectors) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Xs` param:
	err = encoder.Encode(obj.Xs)
	if err != nil {
		return err
	}
	// Serialize `Len` param:
	err = encoder.Encode(obj.Len)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BlockedSelectors) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Xs`:
	err = decoder.Decode(&obj.Xs)
	if err != nil {
		return err
	}
	// Deserialize `Len`:
	err = decoder.Decode(&obj.Len)
	if err != nil {
		return err
	}
	return nil
}

type BypasserCallExecuted struct {
	Index  uint64
	Target ag_solanago.PublicKey
	Data   []byte
}

func (obj BypasserCallExecuted) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Target` param:
	err = encoder.Encode(obj.Target)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BypasserCallExecuted) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Target`:
	err = decoder.Decode(&obj.Target)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type CallExecuted struct {
	Id     [32]uint8
	Index  uint64
	Target ag_solanago.PublicKey
	Data   []byte
}

func (obj CallExecuted) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Target` param:
	err = encoder.Encode(obj.Target)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CallExecuted) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Target`:
	err = decoder.Decode(&obj.Target)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type CallScheduled struct {
	Id          [32]uint8
	Index       uint64
	Target      ag_solanago.PublicKey
	Predecessor [32]uint8
	Salt        [32]uint8
	Delay       uint64
	Data        []byte
}

func (obj CallScheduled) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Target` param:
	err = encoder.Encode(obj.Target)
	if err != nil {
		return err
	}
	// Serialize `Predecessor` param:
	err = encoder.Encode(obj.Predecessor)
	if err != nil {
		return err
	}
	// Serialize `Salt` param:
	err = encoder.Encode(obj.Salt)
	if err != nil {
		return err
	}
	// Serialize `Delay` param:
	err = encoder.Encode(obj.Delay)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CallScheduled) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Target`:
	err = decoder.Decode(&obj.Target)
	if err != nil {
		return err
	}
	// Deserialize `Predecessor`:
	err = decoder.Decode(&obj.Predecessor)
	if err != nil {
		return err
	}
	// Deserialize `Salt`:
	err = decoder.Decode(&obj.Salt)
	if err != nil {
		return err
	}
	// Deserialize `Delay`:
	err = decoder.Decode(&obj.Delay)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type Cancelled struct {
	Id [32]uint8
}

func (obj Cancelled) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Cancelled) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	return nil
}

type Config struct {
	TimelockId                    [32]uint8
	Owner                         ag_solanago.PublicKey
	ProposedOwner                 ag_solanago.PublicKey
	ProposerRoleAccessController  ag_solanago.PublicKey
	ExecutorRoleAccessController  ag_solanago.PublicKey
	CancellerRoleAccessController ag_solanago.PublicKey
	BypasserRoleAccessController  ag_solanago.PublicKey
	MinDelay                      uint64
	BlockedSelectors              BlockedSelectors
}

func (obj Config) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TimelockId` param:
	err = encoder.Encode(obj.TimelockId)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `ProposedOwner` param:
	err = encoder.Encode(obj.ProposedOwner)
	if err != nil {
		return err
	}
	// Serialize `ProposerRoleAccessController` param:
	err = encoder.Encode(obj.ProposerRoleAccessController)
	if err != nil {
		return err
	}
	// Serialize `ExecutorRoleAccessController` param:
	err = encoder.Encode(obj.ExecutorRoleAccessController)
	if err != nil {
		return err
	}
	// Serialize `CancellerRoleAccessController` param:
	err = encoder.Encode(obj.CancellerRoleAccessController)
	if err != nil {
		return err
	}
	// Serialize `BypasserRoleAccessController` param:
	err = encoder.Encode(obj.BypasserRoleAccessController)
	if err != nil {
		return err
	}
	// Serialize `MinDelay` param:
	err = encoder.Encode(obj.MinDelay)
	if err != nil {
		return err
	}
	// Serialize `BlockedSelectors` param:
	err = encoder.Encode(obj.BlockedSelectors)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Config) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TimelockId`:
	err = decoder.Decode(&obj.TimelockId)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `ProposedOwner`:
	err = decoder.Decode(&obj.ProposedOwner)
	if err != nil {
		return err
	}
	// Deserialize `ProposerRoleAccessController`:
	err = decoder.Decode(&obj.ProposerRoleAccessController)
	if err != nil {
		return err
	}
	// Deserialize `ExecutorRoleAccessController`:
	err = decoder.Decode(&obj.ExecutorRoleAccessController)
	if err != nil {
		return err
	}
	// Deserialize `CancellerRoleAccessController`:
	err = decoder.Decode(&obj.CancellerRoleAccessController)
	if err != nil {
		return err
	}
	// Deserialize `BypasserRoleAccessController`:
	err = decoder.Decode(&obj.BypasserRoleAccessController)
	if err != nil {
		return err
	}
	// Deserialize `MinDelay`:
	err = decoder.Decode(&obj.MinDelay)
	if err != nil {
		return err
	}
	// Deserialize `BlockedSelectors`:
	err = decoder.Decode(&obj.BlockedSelectors)
	if err != nil {
		return err
	}
	return nil
}

type FunctionSelectorBlocked struct {
	Selector [8]uint8
}

func (obj FunctionSelectorBlocked) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Selector` param:
	err = encoder.Encode(obj.Selector)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FunctionSelectorBlocked) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Selector`:
	err = decoder.Decode(&obj.Selector)
	if err != nil {
		return err
	}
	return nil
}

type FunctionSelectorUnblocked struct {
	Selector [8]uint8
}

func (obj FunctionSelectorUnblocked) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Selector` param:
	err = encoder.Encode(obj.Selector)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FunctionSelectorUnblocked) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Selector`:
	err = decoder.Decode(&obj.Selector)
	if err != nil {
		return err
	}
	return nil
}

type InstructionAccount struct {
	Pubkey     ag_solanago.PublicKey
	IsSigner   bool
	IsWritable bool
}

func (obj InstructionAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsSigner` param:
	err = encoder.Encode(obj.IsSigner)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InstructionAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsSigner`:
	err = decoder.Decode(&obj.IsSigner)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type InstructionData struct {
	ProgramId ag_solanago.PublicKey
	Data      []byte
	Accounts  []InstructionAccount
}

func (obj InstructionData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProgramId` param:
	err = encoder.Encode(obj.ProgramId)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Accounts` param:
	err = encoder.Encode(obj.Accounts)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InstructionData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProgramId`:
	err = decoder.Decode(&obj.ProgramId)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Accounts`:
	err = decoder.Decode(&obj.Accounts)
	if err != nil {
		return err
	}
	return nil
}

type MinDelayChange struct {
	OldDuration uint64
	NewDuration uint64
}

func (obj MinDelayChange) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OldDuration` param:
	err = encoder.Encode(obj.OldDuration)
	if err != nil {
		return err
	}
	// Serialize `NewDuration` param:
	err = encoder.Encode(obj.NewDuration)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MinDelayChange) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OldDuration`:
	err = decoder.Decode(&obj.OldDuration)
	if err != nil {
		return err
	}
	// Deserialize `NewDuration`:
	err = decoder.Decode(&obj.NewDuration)
	if err != nil {
		return err
	}
	return nil
}

type Operation struct {
	State             OperationState
	Timestamp         uint64
	Id                [32]uint8
	Predecessor       [32]uint8
	Salt              [32]uint8
	TotalInstructions uint32
	Instructions      []InstructionData
}

func (obj Operation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Predecessor` param:
	err = encoder.Encode(obj.Predecessor)
	if err != nil {
		return err
	}
	// Serialize `Salt` param:
	err = encoder.Encode(obj.Salt)
	if err != nil {
		return err
	}
	// Serialize `TotalInstructions` param:
	err = encoder.Encode(obj.TotalInstructions)
	if err != nil {
		return err
	}
	// Serialize `Instructions` param:
	err = encoder.Encode(obj.Instructions)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Operation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Predecessor`:
	err = decoder.Decode(&obj.Predecessor)
	if err != nil {
		return err
	}
	// Deserialize `Salt`:
	err = decoder.Decode(&obj.Salt)
	if err != nil {
		return err
	}
	// Deserialize `TotalInstructions`:
	err = decoder.Decode(&obj.TotalInstructions)
	if err != nil {
		return err
	}
	// Deserialize `Instructions`:
	err = decoder.Decode(&obj.Instructions)
	if err != nil {
		return err
	}
	return nil
}

type OperationState ag_binary.BorshEnum

const (
	OperationStateInitialized OperationState = iota
	OperationStateFinalized
	OperationStateScheduled
	OperationStateDone
)

func (value OperationState) String() string {
	switch value {
	case OperationStateInitialized:
		return "Initialized"
	case OperationStateFinalized:
		return "Finalized"
	case OperationStateScheduled:
		return "Scheduled"
	case OperationStateDone:
		return "Done"
	default:
		return ""
	}
}

type Role ag_binary.BorshEnum

const (
	RoleAdmin Role = iota
	RoleProposer
	RoleExecutor
	RoleCanceller
	RoleBypasser
)

func (value Role) String() string {
	switch value {
	case RoleAdmin:
		return "Admin"
	case RoleProposer:
		return "Proposer"
	case RoleExecutor:
		return "Executor"
	case RoleCanceller:
		return "Canceller"
	case RoleBypasser:
		return "Bypasser"
	default:
		return ""
	}
}
