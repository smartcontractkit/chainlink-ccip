// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package cctp_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeriveAccountsLockOrBurnTokens is the `deriveAccountsLockOrBurnTokens` instruction.
type DeriveAccountsLockOrBurnTokens struct {
	Stage      *string
	LockOrBurn *LockOrBurnInV1

	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewDeriveAccountsLockOrBurnTokensInstructionBuilder creates a new `DeriveAccountsLockOrBurnTokens` instruction builder.
func NewDeriveAccountsLockOrBurnTokensInstructionBuilder() *DeriveAccountsLockOrBurnTokens {
	nd := &DeriveAccountsLockOrBurnTokens{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 0),
	}
	return nd
}

// SetStage sets the "stage" parameter.
func (inst *DeriveAccountsLockOrBurnTokens) SetStage(stage string) *DeriveAccountsLockOrBurnTokens {
	inst.Stage = &stage
	return inst
}

// SetLockOrBurn sets the "lockOrBurn" parameter.
func (inst *DeriveAccountsLockOrBurnTokens) SetLockOrBurn(lockOrBurn LockOrBurnInV1) *DeriveAccountsLockOrBurnTokens {
	inst.LockOrBurn = &lockOrBurn
	return inst
}

func (inst DeriveAccountsLockOrBurnTokens) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeriveAccountsLockOrBurnTokens,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeriveAccountsLockOrBurnTokens) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeriveAccountsLockOrBurnTokens) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Stage == nil {
			return errors.New("Stage parameter is not set")
		}
		if inst.LockOrBurn == nil {
			return errors.New("LockOrBurn parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
	}
	return nil
}

func (inst *DeriveAccountsLockOrBurnTokens) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeriveAccountsLockOrBurnTokens")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     Stage", *inst.Stage))
						paramsBranch.Child(ag_format.Param("LockOrBurn", *inst.LockOrBurn))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=0]").ParentFunc(func(accountsBranch ag_treeout.Branches) {})
				})
		})
}

func (obj DeriveAccountsLockOrBurnTokens) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Stage` param:
	err = encoder.Encode(obj.Stage)
	if err != nil {
		return err
	}
	// Serialize `LockOrBurn` param:
	err = encoder.Encode(obj.LockOrBurn)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DeriveAccountsLockOrBurnTokens) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Stage`:
	err = decoder.Decode(&obj.Stage)
	if err != nil {
		return err
	}
	// Deserialize `LockOrBurn`:
	err = decoder.Decode(&obj.LockOrBurn)
	if err != nil {
		return err
	}
	return nil
}

// NewDeriveAccountsLockOrBurnTokensInstruction declares a new DeriveAccountsLockOrBurnTokens instruction with the provided parameters and accounts.
func NewDeriveAccountsLockOrBurnTokensInstruction(
	// Parameters:
	stage string,
	lockOrBurn LockOrBurnInV1) *DeriveAccountsLockOrBurnTokens {
	return NewDeriveAccountsLockOrBurnTokensInstructionBuilder().
		SetStage(stage).
		SetLockOrBurn(lockOrBurn)
}
