// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package cctp_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ReclaimEventAccount is the `reclaimEventAccount` instruction.
type ReclaimEventAccount struct {
	Mint                *ag_solanago.PublicKey
	OriginalSender      *ag_solanago.PublicKey
	RemoteChainSelector *uint64
	MsgNonce            *uint64
	Attestation         *[]byte

	// [0] = [] state
	//
	// [1] = [WRITE] poolSigner
	//
	// [2] = [WRITE] messageSentEventAccount
	//
	// [3] = [WRITE] messageTransmitter
	//
	// [4] = [] cctpMessageTransmitter
	//
	// [5] = [WRITE, SIGNER] authority
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewReclaimEventAccountInstructionBuilder creates a new `ReclaimEventAccount` instruction builder.
func NewReclaimEventAccountInstructionBuilder() *ReclaimEventAccount {
	nd := &ReclaimEventAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetMint sets the "mint" parameter.
func (inst *ReclaimEventAccount) SetMint(mint ag_solanago.PublicKey) *ReclaimEventAccount {
	inst.Mint = &mint
	return inst
}

// SetOriginalSender sets the "originalSender" parameter.
func (inst *ReclaimEventAccount) SetOriginalSender(originalSender ag_solanago.PublicKey) *ReclaimEventAccount {
	inst.OriginalSender = &originalSender
	return inst
}

// SetRemoteChainSelector sets the "remoteChainSelector" parameter.
func (inst *ReclaimEventAccount) SetRemoteChainSelector(remoteChainSelector uint64) *ReclaimEventAccount {
	inst.RemoteChainSelector = &remoteChainSelector
	return inst
}

// SetMsgNonce sets the "msgNonce" parameter.
func (inst *ReclaimEventAccount) SetMsgNonce(msgNonce uint64) *ReclaimEventAccount {
	inst.MsgNonce = &msgNonce
	return inst
}

// SetAttestation sets the "attestation" parameter.
func (inst *ReclaimEventAccount) SetAttestation(attestation []byte) *ReclaimEventAccount {
	inst.Attestation = &attestation
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *ReclaimEventAccount) SetStateAccount(state ag_solanago.PublicKey) *ReclaimEventAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ReclaimEventAccount) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetPoolSignerAccount sets the "poolSigner" account.
func (inst *ReclaimEventAccount) SetPoolSignerAccount(poolSigner ag_solanago.PublicKey) *ReclaimEventAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(poolSigner).WRITE()
	return inst
}

// GetPoolSignerAccount gets the "poolSigner" account.
func (inst *ReclaimEventAccount) GetPoolSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetMessageSentEventAccountAccount sets the "messageSentEventAccount" account.
func (inst *ReclaimEventAccount) SetMessageSentEventAccountAccount(messageSentEventAccount ag_solanago.PublicKey) *ReclaimEventAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(messageSentEventAccount).WRITE()
	return inst
}

// GetMessageSentEventAccountAccount gets the "messageSentEventAccount" account.
func (inst *ReclaimEventAccount) GetMessageSentEventAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetMessageTransmitterAccount sets the "messageTransmitter" account.
func (inst *ReclaimEventAccount) SetMessageTransmitterAccount(messageTransmitter ag_solanago.PublicKey) *ReclaimEventAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(messageTransmitter).WRITE()
	return inst
}

// GetMessageTransmitterAccount gets the "messageTransmitter" account.
func (inst *ReclaimEventAccount) GetMessageTransmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetCctpMessageTransmitterAccount sets the "cctpMessageTransmitter" account.
func (inst *ReclaimEventAccount) SetCctpMessageTransmitterAccount(cctpMessageTransmitter ag_solanago.PublicKey) *ReclaimEventAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(cctpMessageTransmitter)
	return inst
}

// GetCctpMessageTransmitterAccount gets the "cctpMessageTransmitter" account.
func (inst *ReclaimEventAccount) GetCctpMessageTransmitterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ReclaimEventAccount) SetAuthorityAccount(authority ag_solanago.PublicKey) *ReclaimEventAccount {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ReclaimEventAccount) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ReclaimEventAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ReclaimEventAccount {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ReclaimEventAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

func (inst ReclaimEventAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ReclaimEventAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ReclaimEventAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ReclaimEventAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Mint == nil {
			return errors.New("Mint parameter is not set")
		}
		if inst.OriginalSender == nil {
			return errors.New("OriginalSender parameter is not set")
		}
		if inst.RemoteChainSelector == nil {
			return errors.New("RemoteChainSelector parameter is not set")
		}
		if inst.MsgNonce == nil {
			return errors.New("MsgNonce parameter is not set")
		}
		if inst.Attestation == nil {
			return errors.New("Attestation parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PoolSigner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MessageSentEventAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MessageTransmitter is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CctpMessageTransmitter is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ReclaimEventAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ReclaimEventAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("               Mint", *inst.Mint))
						paramsBranch.Child(ag_format.Param("     OriginalSender", *inst.OriginalSender))
						paramsBranch.Child(ag_format.Param("RemoteChainSelector", *inst.RemoteChainSelector))
						paramsBranch.Child(ag_format.Param("           MsgNonce", *inst.MsgNonce))
						paramsBranch.Child(ag_format.Param("        Attestation", *inst.Attestation))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 state", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("            poolSigner", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("      messageSentEvent", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("    messageTransmitter", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("cctpMessageTransmitter", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("             authority", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice[6]))
					})
				})
		})
}

func (obj ReclaimEventAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `OriginalSender` param:
	err = encoder.Encode(obj.OriginalSender)
	if err != nil {
		return err
	}
	// Serialize `RemoteChainSelector` param:
	err = encoder.Encode(obj.RemoteChainSelector)
	if err != nil {
		return err
	}
	// Serialize `MsgNonce` param:
	err = encoder.Encode(obj.MsgNonce)
	if err != nil {
		return err
	}
	// Serialize `Attestation` param:
	err = encoder.Encode(obj.Attestation)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ReclaimEventAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `OriginalSender`:
	err = decoder.Decode(&obj.OriginalSender)
	if err != nil {
		return err
	}
	// Deserialize `RemoteChainSelector`:
	err = decoder.Decode(&obj.RemoteChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `MsgNonce`:
	err = decoder.Decode(&obj.MsgNonce)
	if err != nil {
		return err
	}
	// Deserialize `Attestation`:
	err = decoder.Decode(&obj.Attestation)
	if err != nil {
		return err
	}
	return nil
}

// NewReclaimEventAccountInstruction declares a new ReclaimEventAccount instruction with the provided parameters and accounts.
func NewReclaimEventAccountInstruction(
	// Parameters:
	mint ag_solanago.PublicKey,
	originalSender ag_solanago.PublicKey,
	remoteChainSelector uint64,
	msgNonce uint64,
	attestation []byte,
	// Accounts:
	state ag_solanago.PublicKey,
	poolSigner ag_solanago.PublicKey,
	messageSentEventAccount ag_solanago.PublicKey,
	messageTransmitter ag_solanago.PublicKey,
	cctpMessageTransmitter ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ReclaimEventAccount {
	return NewReclaimEventAccountInstructionBuilder().
		SetMint(mint).
		SetOriginalSender(originalSender).
		SetRemoteChainSelector(remoteChainSelector).
		SetMsgNonce(msgNonce).
		SetAttestation(attestation).
		SetStateAccount(state).
		SetPoolSignerAccount(poolSigner).
		SetMessageSentEventAccountAccount(messageSentEventAccount).
		SetMessageTransmitterAccount(messageTransmitter).
		SetCctpMessageTransmitterAccount(cctpMessageTransmitter).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
