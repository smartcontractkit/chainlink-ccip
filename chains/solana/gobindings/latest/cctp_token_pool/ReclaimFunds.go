// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package cctp_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Returns an amount of SOL from the pool signer account to the designated
// fund reclaimer. There are three entities involved:
//
// * `owner`: can configure the reclaimer and fund manager.
// * `fund_manager`: can execute this instruction.
// * `fund_reclaim_destination`: receives the funds.
//
// The resulting funds on the PDA cannot drop below `minimum_signer_funds`.
type ReclaimFunds struct {
	Amount *uint64

	// [0] = [] state
	//
	// [1] = [] mint
	//
	// [2] = [WRITE] poolSigner
	//
	// [3] = [WRITE] fundReclaimDestination
	// ··········· to be a particular fund reclaimer
	//
	// [4] = [WRITE, SIGNER] authority
	//
	// [5] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewReclaimFundsInstructionBuilder creates a new `ReclaimFunds` instruction builder.
func NewReclaimFundsInstructionBuilder() *ReclaimFunds {
	nd := &ReclaimFunds{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *ReclaimFunds) SetAmount(amount uint64) *ReclaimFunds {
	inst.Amount = &amount
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *ReclaimFunds) SetStateAccount(state ag_solanago.PublicKey) *ReclaimFunds {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ReclaimFunds) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetMintAccount sets the "mint" account.
func (inst *ReclaimFunds) SetMintAccount(mint ag_solanago.PublicKey) *ReclaimFunds {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *ReclaimFunds) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetPoolSignerAccount sets the "poolSigner" account.
func (inst *ReclaimFunds) SetPoolSignerAccount(poolSigner ag_solanago.PublicKey) *ReclaimFunds {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolSigner).WRITE()
	return inst
}

// GetPoolSignerAccount gets the "poolSigner" account.
func (inst *ReclaimFunds) GetPoolSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetFundReclaimDestinationAccount sets the "fundReclaimDestination" account.
// to be a particular fund reclaimer
func (inst *ReclaimFunds) SetFundReclaimDestinationAccount(fundReclaimDestination ag_solanago.PublicKey) *ReclaimFunds {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(fundReclaimDestination).WRITE()
	return inst
}

// GetFundReclaimDestinationAccount gets the "fundReclaimDestination" account.
// to be a particular fund reclaimer
func (inst *ReclaimFunds) GetFundReclaimDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ReclaimFunds) SetAuthorityAccount(authority ag_solanago.PublicKey) *ReclaimFunds {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ReclaimFunds) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ReclaimFunds) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ReclaimFunds {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ReclaimFunds) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

func (inst ReclaimFunds) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ReclaimFunds,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ReclaimFunds) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ReclaimFunds) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolSigner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FundReclaimDestination is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ReclaimFunds) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ReclaimFunds")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 state", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("                  mint", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("            poolSigner", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("fundReclaimDestination", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("             authority", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice[5]))
					})
				})
		})
}

func (obj ReclaimFunds) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ReclaimFunds) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewReclaimFundsInstruction declares a new ReclaimFunds instruction with the provided parameters and accounts.
func NewReclaimFundsInstruction(
	// Parameters:
	amount uint64,
	// Accounts:
	state ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	poolSigner ag_solanago.PublicKey,
	fundReclaimDestination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ReclaimFunds {
	return NewReclaimFundsInstructionBuilder().
		SetAmount(amount).
		SetStateAccount(state).
		SetMintAccount(mint).
		SetPoolSignerAccount(poolSigner).
		SetFundReclaimDestinationAccount(fundReclaimDestination).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
