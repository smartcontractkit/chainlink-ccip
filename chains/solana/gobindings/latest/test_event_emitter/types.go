// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package test_event_emitter

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type CcipCctpMessageSentEventArgs struct {
	MessageSentBytes    []byte
	RemoteChainSelector uint64
	OriginalSender      ag_solanago.PublicKey
	EventAddress        ag_solanago.PublicKey
	MsgTotalNonce       uint64
	SourceDomain        uint32
	CctpNonce           uint64
}

func (obj CcipCctpMessageSentEventArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MessageSentBytes` param:
	err = encoder.Encode(obj.MessageSentBytes)
	if err != nil {
		return err
	}
	// Serialize `RemoteChainSelector` param:
	err = encoder.Encode(obj.RemoteChainSelector)
	if err != nil {
		return err
	}
	// Serialize `OriginalSender` param:
	err = encoder.Encode(obj.OriginalSender)
	if err != nil {
		return err
	}
	// Serialize `EventAddress` param:
	err = encoder.Encode(obj.EventAddress)
	if err != nil {
		return err
	}
	// Serialize `MsgTotalNonce` param:
	err = encoder.Encode(obj.MsgTotalNonce)
	if err != nil {
		return err
	}
	// Serialize `SourceDomain` param:
	err = encoder.Encode(obj.SourceDomain)
	if err != nil {
		return err
	}
	// Serialize `CctpNonce` param:
	err = encoder.Encode(obj.CctpNonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CcipCctpMessageSentEventArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MessageSentBytes`:
	err = decoder.Decode(&obj.MessageSentBytes)
	if err != nil {
		return err
	}
	// Deserialize `RemoteChainSelector`:
	err = decoder.Decode(&obj.RemoteChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `OriginalSender`:
	err = decoder.Decode(&obj.OriginalSender)
	if err != nil {
		return err
	}
	// Deserialize `EventAddress`:
	err = decoder.Decode(&obj.EventAddress)
	if err != nil {
		return err
	}
	// Deserialize `MsgTotalNonce`:
	err = decoder.Decode(&obj.MsgTotalNonce)
	if err != nil {
		return err
	}
	// Deserialize `SourceDomain`:
	err = decoder.Decode(&obj.SourceDomain)
	if err != nil {
		return err
	}
	// Deserialize `CctpNonce`:
	err = decoder.Decode(&obj.CctpNonce)
	if err != nil {
		return err
	}
	return nil
}
