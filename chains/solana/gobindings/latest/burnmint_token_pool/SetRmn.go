// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package burnmint_token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetRmn is the `setRmn` instruction.
type SetRmn struct {
	RmnAddress *ag_solanago.PublicKey

	// [0] = [] state
	//
	// [1] = [] mint
	//
	// [2] = [WRITE, SIGNER] authority
	//
	// [3] = [] program
	//
	// [4] = [] programData
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewSetRmnInstructionBuilder creates a new `SetRmn` instruction builder.
func NewSetRmnInstructionBuilder() *SetRmn {
	nd := &SetRmn{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetRmnAddress sets the "rmnAddress" parameter.
func (inst *SetRmn) SetRmnAddress(rmnAddress ag_solanago.PublicKey) *SetRmn {
	inst.RmnAddress = &rmnAddress
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *SetRmn) SetStateAccount(state ag_solanago.PublicKey) *SetRmn {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *SetRmn) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetMintAccount sets the "mint" account.
func (inst *SetRmn) SetMintAccount(mint ag_solanago.PublicKey) *SetRmn {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *SetRmn) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SetRmn) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetRmn {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SetRmn) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetProgramAccount sets the "program" account.
func (inst *SetRmn) SetProgramAccount(program ag_solanago.PublicKey) *SetRmn {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *SetRmn) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetProgramDataAccount sets the "programData" account.
func (inst *SetRmn) SetProgramDataAccount(programData ag_solanago.PublicKey) *SetRmn {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(programData)
	return inst
}

// GetProgramDataAccount gets the "programData" account.
func (inst *SetRmn) GetProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

func (inst SetRmn) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetRmn,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetRmn) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetRmn) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RmnAddress == nil {
			return errors.New("RmnAddress parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProgramData is not set")
		}
	}
	return nil
}

func (inst *SetRmn) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetRmn")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RmnAddress", *inst.RmnAddress))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      state", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("       mint", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("  authority", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("    program", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("programData", inst.AccountMetaSlice[4]))
					})
				})
		})
}

func (obj SetRmn) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RmnAddress` param:
	err = encoder.Encode(obj.RmnAddress)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetRmn) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RmnAddress`:
	err = decoder.Decode(&obj.RmnAddress)
	if err != nil {
		return err
	}
	return nil
}

// NewSetRmnInstruction declares a new SetRmn instruction with the provided parameters and accounts.
func NewSetRmnInstruction(
	// Parameters:
	rmnAddress ag_solanago.PublicKey,
	// Accounts:
	state ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	program ag_solanago.PublicKey,
	programData ag_solanago.PublicKey) *SetRmn {
	return NewSetRmnInstructionBuilder().
		SetRmnAddress(rmnAddress).
		SetStateAccount(state).
		SetMintAccount(mint).
		SetAuthorityAccount(authority).
		SetProgramAccount(program).
		SetProgramDataAccount(programData)
}
