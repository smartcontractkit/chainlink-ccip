// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_pool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ReleaseOrMintTokens is the `release_or_mint_tokens` instruction.
type ReleaseOrMintTokens struct {
	ReleaseOrMint *ReleaseOrMintInV1

	// [0] = [SIGNER] authority
	//
	// [1] = [WRITE] config
	//
	// [2] = [] token_program
	//
	// [3] = [WRITE] mint
	//
	// [4] = [] pool_signer
	//
	// [5] = [WRITE] pool_token_account
	//
	// [6] = [WRITE] chain_config
	//
	// [7] = [WRITE] receiver_token_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewReleaseOrMintTokensInstructionBuilder creates a new `ReleaseOrMintTokens` instruction builder.
func NewReleaseOrMintTokensInstructionBuilder() *ReleaseOrMintTokens {
	nd := &ReleaseOrMintTokens{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetReleaseOrMint sets the "release_or_mint" parameter.
func (inst *ReleaseOrMintTokens) SetReleaseOrMint(release_or_mint ReleaseOrMintInV1) *ReleaseOrMintTokens {
	inst.ReleaseOrMint = &release_or_mint
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ReleaseOrMintTokens) SetAuthorityAccount(authority ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ReleaseOrMintTokens) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *ReleaseOrMintTokens) SetConfigAccount(config ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *ReleaseOrMintTokens) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *ReleaseOrMintTokens) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *ReleaseOrMintTokens) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *ReleaseOrMintTokens) SetMintAccount(mint ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *ReleaseOrMintTokens) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolSignerAccount sets the "pool_signer" account.
func (inst *ReleaseOrMintTokens) SetPoolSignerAccount(poolSigner ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolSigner)
	return inst
}

// GetPoolSignerAccount gets the "pool_signer" account.
func (inst *ReleaseOrMintTokens) GetPoolSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolTokenAccountAccount sets the "pool_token_account" account.
func (inst *ReleaseOrMintTokens) SetPoolTokenAccountAccount(poolTokenAccount ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolTokenAccount).WRITE()
	return inst
}

// GetPoolTokenAccountAccount gets the "pool_token_account" account.
func (inst *ReleaseOrMintTokens) GetPoolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetChainConfigAccount sets the "chain_config" account.
func (inst *ReleaseOrMintTokens) SetChainConfigAccount(chainConfig ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(chainConfig).WRITE()
	return inst
}

// GetChainConfigAccount gets the "chain_config" account.
func (inst *ReleaseOrMintTokens) GetChainConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetReceiverTokenAccountAccount sets the "receiver_token_account" account.
func (inst *ReleaseOrMintTokens) SetReceiverTokenAccountAccount(receiverTokenAccount ag_solanago.PublicKey) *ReleaseOrMintTokens {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(receiverTokenAccount).WRITE()
	return inst
}

// GetReceiverTokenAccountAccount gets the "receiver_token_account" account.
func (inst *ReleaseOrMintTokens) GetReceiverTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst ReleaseOrMintTokens) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ReleaseOrMintTokens,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ReleaseOrMintTokens) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ReleaseOrMintTokens) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ReleaseOrMint == nil {
			return errors.New("ReleaseOrMint parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolSigner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ChainConfig is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ReceiverTokenAccount is not set")
		}
	}
	return nil
}

func (inst *ReleaseOrMintTokens) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ReleaseOrMintTokens")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  ReleaseOrMint", *inst.ReleaseOrMint))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  token_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    pool_signer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    pool_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   chain_config", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("receiver_token_", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj ReleaseOrMintTokens) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReleaseOrMint` param:
	err = encoder.Encode(obj.ReleaseOrMint)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ReleaseOrMintTokens) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReleaseOrMint`:
	err = decoder.Decode(&obj.ReleaseOrMint)
	if err != nil {
		return err
	}
	return nil
}

// NewReleaseOrMintTokensInstruction declares a new ReleaseOrMintTokens instruction with the provided parameters and accounts.
func NewReleaseOrMintTokensInstruction(
	// Parameters:
	release_or_mint ReleaseOrMintInV1,
	// Accounts:
	authority ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	poolSigner ag_solanago.PublicKey,
	poolTokenAccount ag_solanago.PublicKey,
	chainConfig ag_solanago.PublicKey,
	receiverTokenAccount ag_solanago.PublicKey) *ReleaseOrMintTokens {
	return NewReleaseOrMintTokensInstructionBuilder().
		SetReleaseOrMint(release_or_mint).
		SetAuthorityAccount(authority).
		SetConfigAccount(config).
		SetTokenProgramAccount(tokenProgram).
		SetMintAccount(mint).
		SetPoolSignerAccount(poolSigner).
		SetPoolTokenAccountAccount(poolTokenAccount).
		SetChainConfigAccount(chainConfig).
		SetReceiverTokenAccountAccount(receiverTokenAccount)
}
