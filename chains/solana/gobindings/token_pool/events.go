// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_pool

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_rpc "github.com/gagliardetto/solana-go/rpc"
	ag_base58 "github.com/mr-tron/base58"
	"reflect"
	"strings"
)

type BurnedEventData struct {
	Sender ag_solanago.PublicKey
	Amount uint64
}

var BurnedEventDataDiscriminator = [8]byte{207, 37, 251, 154, 239, 229, 14, 67}

func (obj BurnedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BurnedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BurnedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BurnedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[207 37 251 154 239 229 14 67]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*BurnedEventData) isEventData() {}

type ConfigChangedEventData struct {
	Config RateLimitConfig
}

var ConfigChangedEventDataDiscriminator = [8]byte{147, 25, 86, 98, 98, 77, 78, 192}

func (obj ConfigChangedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ConfigChangedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigChangedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ConfigChangedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[147 25 86 98 98 77 78 192]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (*ConfigChangedEventData) isEventData() {}

type LockedEventData struct {
	Sender ag_solanago.PublicKey
	Amount uint64
}

var LockedEventDataDiscriminator = [8]byte{188, 53, 118, 62, 64, 12, 198, 84}

func (obj LockedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LockedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LockedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[188 53 118 62 64 12 198 84]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*LockedEventData) isEventData() {}

type MintedEventData struct {
	Sender    ag_solanago.PublicKey
	Recipient ag_solanago.PublicKey
	Amount    uint64
}

var MintedEventDataDiscriminator = [8]byte{174, 131, 21, 57, 88, 117, 114, 121}

func (obj MintedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MintedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Recipient` param:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MintedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MintedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[174 131 21 57 88 117 114 121]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*MintedEventData) isEventData() {}

type RateLimitConfiguredEventData struct {
	ChainSelector     uint64
	OutboundRateLimit RateLimitConfig
	InboundRateLimit  RateLimitConfig
}

var RateLimitConfiguredEventDataDiscriminator = [8]byte{249, 210, 194, 93, 236, 75, 175, 59}

func (obj RateLimitConfiguredEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RateLimitConfiguredEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `OutboundRateLimit` param:
	err = encoder.Encode(obj.OutboundRateLimit)
	if err != nil {
		return err
	}
	// Serialize `InboundRateLimit` param:
	err = encoder.Encode(obj.InboundRateLimit)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RateLimitConfiguredEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RateLimitConfiguredEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[249 210 194 93 236 75 175 59]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `OutboundRateLimit`:
	err = decoder.Decode(&obj.OutboundRateLimit)
	if err != nil {
		return err
	}
	// Deserialize `InboundRateLimit`:
	err = decoder.Decode(&obj.InboundRateLimit)
	if err != nil {
		return err
	}
	return nil
}

func (*RateLimitConfiguredEventData) isEventData() {}

type ReleasedEventData struct {
	Sender    ag_solanago.PublicKey
	Recipient ag_solanago.PublicKey
	Amount    uint64
}

var ReleasedEventDataDiscriminator = [8]byte{232, 229, 255, 136, 101, 189, 15, 220}

func (obj ReleasedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ReleasedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Recipient` param:
	err = encoder.Encode(obj.Recipient)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReleasedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ReleasedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[232 229 255 136 101 189 15 220]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Recipient`:
	err = decoder.Decode(&obj.Recipient)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*ReleasedEventData) isEventData() {}

type RemoteChainConfiguredEventData struct {
	ChainSelector         uint64
	Token                 RemoteAddress
	PreviousToken         RemoteAddress
	PoolAddresses         []RemoteAddress
	PreviousPoolAddresses []RemoteAddress
}

var RemoteChainConfiguredEventDataDiscriminator = [8]byte{231, 252, 78, 228, 152, 49, 233, 226}

func (obj RemoteChainConfiguredEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RemoteChainConfiguredEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `PreviousToken` param:
	err = encoder.Encode(obj.PreviousToken)
	if err != nil {
		return err
	}
	// Serialize `PoolAddresses` param:
	err = encoder.Encode(obj.PoolAddresses)
	if err != nil {
		return err
	}
	// Serialize `PreviousPoolAddresses` param:
	err = encoder.Encode(obj.PreviousPoolAddresses)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoteChainConfiguredEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RemoteChainConfiguredEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[231 252 78 228 152 49 233 226]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `PreviousToken`:
	err = decoder.Decode(&obj.PreviousToken)
	if err != nil {
		return err
	}
	// Deserialize `PoolAddresses`:
	err = decoder.Decode(&obj.PoolAddresses)
	if err != nil {
		return err
	}
	// Deserialize `PreviousPoolAddresses`:
	err = decoder.Decode(&obj.PreviousPoolAddresses)
	if err != nil {
		return err
	}
	return nil
}

func (*RemoteChainConfiguredEventData) isEventData() {}

type RemoteChainRemovedEventData struct {
	ChainSelector uint64
}

var RemoteChainRemovedEventDataDiscriminator = [8]byte{4, 212, 235, 138, 165, 232, 75, 32}

func (obj RemoteChainRemovedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RemoteChainRemovedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoteChainRemovedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RemoteChainRemovedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[4 212 235 138 165 232 75 32]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	return nil
}

func (*RemoteChainRemovedEventData) isEventData() {}

type RemotePoolsAppendedEventData struct {
	ChainSelector         uint64
	PoolAddresses         []RemoteAddress
	PreviousPoolAddresses []RemoteAddress
}

var RemotePoolsAppendedEventDataDiscriminator = [8]byte{248, 177, 249, 167, 14, 247, 25, 223}

func (obj RemotePoolsAppendedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RemotePoolsAppendedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ChainSelector` param:
	err = encoder.Encode(obj.ChainSelector)
	if err != nil {
		return err
	}
	// Serialize `PoolAddresses` param:
	err = encoder.Encode(obj.PoolAddresses)
	if err != nil {
		return err
	}
	// Serialize `PreviousPoolAddresses` param:
	err = encoder.Encode(obj.PreviousPoolAddresses)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemotePoolsAppendedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RemotePoolsAppendedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[248 177 249 167 14 247 25 223]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ChainSelector`:
	err = decoder.Decode(&obj.ChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `PoolAddresses`:
	err = decoder.Decode(&obj.PoolAddresses)
	if err != nil {
		return err
	}
	// Deserialize `PreviousPoolAddresses`:
	err = decoder.Decode(&obj.PreviousPoolAddresses)
	if err != nil {
		return err
	}
	return nil
}

func (*RemotePoolsAppendedEventData) isEventData() {}

type RouterUpdatedEventData struct {
	OldAuthority ag_solanago.PublicKey
	NewAuthority ag_solanago.PublicKey
}

var RouterUpdatedEventDataDiscriminator = [8]byte{230, 116, 235, 209, 74, 144, 208, 95}

func (obj RouterUpdatedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RouterUpdatedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `OldAuthority` param:
	err = encoder.Encode(obj.OldAuthority)
	if err != nil {
		return err
	}
	// Serialize `NewAuthority` param:
	err = encoder.Encode(obj.NewAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RouterUpdatedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RouterUpdatedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[230 116 235 209 74 144 208 95]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `OldAuthority`:
	err = decoder.Decode(&obj.OldAuthority)
	if err != nil {
		return err
	}
	// Deserialize `NewAuthority`:
	err = decoder.Decode(&obj.NewAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (*RouterUpdatedEventData) isEventData() {}

type TokensConsumedEventData struct {
	Tokens uint64
}

var TokensConsumedEventDataDiscriminator = [8]byte{126, 8, 242, 245, 121, 78, 210, 0}

func (obj TokensConsumedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TokensConsumedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Tokens` param:
	err = encoder.Encode(obj.Tokens)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokensConsumedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TokensConsumedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[126 8 242 245 121 78 210 0]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Tokens`:
	err = decoder.Decode(&obj.Tokens)
	if err != nil {
		return err
	}
	return nil
}

func (*TokensConsumedEventData) isEventData() {}

var eventTypes = map[[8]byte]reflect.Type{
	BurnedEventDataDiscriminator:                reflect.TypeOf(BurnedEventData{}),
	ConfigChangedEventDataDiscriminator:         reflect.TypeOf(ConfigChangedEventData{}),
	LockedEventDataDiscriminator:                reflect.TypeOf(LockedEventData{}),
	MintedEventDataDiscriminator:                reflect.TypeOf(MintedEventData{}),
	RateLimitConfiguredEventDataDiscriminator:   reflect.TypeOf(RateLimitConfiguredEventData{}),
	ReleasedEventDataDiscriminator:              reflect.TypeOf(ReleasedEventData{}),
	RemoteChainConfiguredEventDataDiscriminator: reflect.TypeOf(RemoteChainConfiguredEventData{}),
	RemoteChainRemovedEventDataDiscriminator:    reflect.TypeOf(RemoteChainRemovedEventData{}),
	RemotePoolsAppendedEventDataDiscriminator:   reflect.TypeOf(RemotePoolsAppendedEventData{}),
	RouterUpdatedEventDataDiscriminator:         reflect.TypeOf(RouterUpdatedEventData{}),
	TokensConsumedEventDataDiscriminator:        reflect.TypeOf(TokensConsumedEventData{}),
}
var eventNames = map[[8]byte]string{
	BurnedEventDataDiscriminator:                "Burned",
	ConfigChangedEventDataDiscriminator:         "ConfigChanged",
	LockedEventDataDiscriminator:                "Locked",
	MintedEventDataDiscriminator:                "Minted",
	RateLimitConfiguredEventDataDiscriminator:   "RateLimitConfigured",
	ReleasedEventDataDiscriminator:              "Released",
	RemoteChainConfiguredEventDataDiscriminator: "RemoteChainConfigured",
	RemoteChainRemovedEventDataDiscriminator:    "RemoteChainRemoved",
	RemotePoolsAppendedEventDataDiscriminator:   "RemotePoolsAppended",
	RouterUpdatedEventDataDiscriminator:         "RouterUpdated",
	TokensConsumedEventDataDiscriminator:        "TokensConsumed",
}
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)
var (
	_ *ag_rpc.GetTransactionResult = nil
)
var (
	_ *ag_base58.Alphabet = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
}

const eventLogPrefix = "Program data: "

func DecodeEvents(txData *ag_rpc.GetTransactionResult, targetProgramId ag_solanago.PublicKey, getAddressTables func(altAddresses []ag_solanago.PublicKey) (tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice, err error)) (evts []*Event, err error) {
	var tx *ag_solanago.Transaction
	if tx, err = txData.Transaction.GetTransaction(); err != nil {
		return
	}

	altAddresses := make([]ag_solanago.PublicKey, len(tx.Message.AddressTableLookups))
	for i, alt := range tx.Message.AddressTableLookups {
		altAddresses[i] = alt.AccountKey
	}
	if len(altAddresses) > 0 {
		var tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice
		if tables, err = getAddressTables(altAddresses); err != nil {
			return
		}
		tx.Message.SetAddressTables(tables)
		if err = tx.Message.ResolveLookups(); err != nil {
			return
		}
	}

	var base64Binaries [][]byte
	logMessageEventBinaries, err := decodeEventsFromLogMessage(txData.Meta.LogMessages)
	if err != nil {
		return
	}

	emitedCPIEventBinaries, err := decodeEventsFromEmitCPI(txData.Meta.InnerInstructions, tx.Message.AccountKeys, targetProgramId)
	if err != nil {
		return
	}

	base64Binaries = append(base64Binaries, logMessageEventBinaries...)
	base64Binaries = append(base64Binaries, emitedCPIEventBinaries...)
	evts, err = parseEvents(base64Binaries)
	return
}

func decodeEventsFromLogMessage(logMessages []string) (eventBinaries [][]byte, err error) {
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode logMessage event: %s", eventBase64)
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func decodeEventsFromEmitCPI(InnerInstructions []ag_rpc.InnerInstruction, accountKeys ag_solanago.PublicKeySlice, targetProgramId ag_solanago.PublicKey) (eventBinaries [][]byte, err error) {
	for _, parsedIx := range InnerInstructions {
		for _, ix := range parsedIx.Instructions {
			if accountKeys[ix.ProgramIDIndex] != targetProgramId {
				continue
			}

			var ixData []byte
			if ixData, err = ag_base58.Decode(ix.Data.String()); err != nil {
				return
			}
			eventBase64 := base64.StdEncoding.EncodeToString(ixData[8:])
			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func parseEvents(base64Binaries [][]byte) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)

	for _, eventBinary := range base64Binaries {
		eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
		if eventType, ok := eventTypes[eventDiscriminator]; ok {
			eventData := reflect.New(eventType).Interface().(EventData)
			decoder.Reset(eventBinary)
			if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
				err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
				return
			}
			evts = append(evts, &Event{
				Name: eventNames[eventDiscriminator],
				Data: eventData,
			})
		}
	}
	return
}
