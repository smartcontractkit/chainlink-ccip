// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_offramp

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_rpc "github.com/gagliardetto/solana-go/rpc"
	ag_base58 "github.com/mr-tron/base58"
	"reflect"
	"strings"
)

type CommitReportAcceptedEventData struct {
	MerkleRoot   *MerkleRoot `bin:"optional"`
	PriceUpdates PriceUpdates
}

var CommitReportAcceptedEventDataDiscriminator = [8]byte{44, 46, 77, 237, 70, 187, 170, 133}

func (obj CommitReportAcceptedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CommitReportAcceptedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `MerkleRoot` param (optional):
	{
		if obj.MerkleRoot == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MerkleRoot)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PriceUpdates` param:
	err = encoder.Encode(obj.PriceUpdates)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CommitReportAcceptedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CommitReportAcceptedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[44 46 77 237 70 187 170 133]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `MerkleRoot` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MerkleRoot)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PriceUpdates`:
	err = decoder.Decode(&obj.PriceUpdates)
	if err != nil {
		return err
	}
	return nil
}

func (*CommitReportAcceptedEventData) isEventData() {}
func (obj *CommitReportAcceptedEventData) Self() any {
	return obj
}

type CommitReportPDAClosedEventData struct {
	SourceChainSelector uint64
	MerkleRoot          [32]uint8
}

var CommitReportPDAClosedEventDataDiscriminator = [8]byte{69, 240, 72, 149, 174, 18, 236, 46}

func (obj CommitReportPDAClosedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CommitReportPDAClosedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `MerkleRoot` param:
	err = encoder.Encode(obj.MerkleRoot)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CommitReportPDAClosedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CommitReportPDAClosedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[69 240 72 149 174 18 236 46]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `MerkleRoot`:
	err = decoder.Decode(&obj.MerkleRoot)
	if err != nil {
		return err
	}
	return nil
}

func (*CommitReportPDAClosedEventData) isEventData() {}
func (obj *CommitReportPDAClosedEventData) Self() any {
	return obj
}

type ConfigSetEventData struct {
	SvmChainSelector           uint64
	EnableManualExecutionAfter int64
}

var ConfigSetEventDataDiscriminator = [8]byte{15, 104, 59, 16, 236, 241, 8, 6}

func (obj ConfigSetEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ConfigSetEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SvmChainSelector` param:
	err = encoder.Encode(obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Serialize `EnableManualExecutionAfter` param:
	err = encoder.Encode(obj.EnableManualExecutionAfter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigSetEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ConfigSetEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[15 104 59 16 236 241 8 6]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SvmChainSelector`:
	err = decoder.Decode(&obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `EnableManualExecutionAfter`:
	err = decoder.Decode(&obj.EnableManualExecutionAfter)
	if err != nil {
		return err
	}
	return nil
}

func (*ConfigSetEventData) isEventData() {}
func (obj *ConfigSetEventData) Self() any {
	return obj
}

type ExecutionStateChangedEventData struct {
	SourceChainSelector uint64
	SequenceNumber      uint64
	MessageId           [32]uint8
	MessageHash         [32]uint8
	State               MessageExecutionState
}

var ExecutionStateChangedEventDataDiscriminator = [8]byte{185, 176, 140, 112, 239, 78, 31, 249}

func (obj ExecutionStateChangedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ExecutionStateChangedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Serialize `MessageId` param:
	err = encoder.Encode(obj.MessageId)
	if err != nil {
		return err
	}
	// Serialize `MessageHash` param:
	err = encoder.Encode(obj.MessageHash)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExecutionStateChangedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ExecutionStateChangedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[185 176 140 112 239 78 31 249]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	// Deserialize `MessageId`:
	err = decoder.Decode(&obj.MessageId)
	if err != nil {
		return err
	}
	// Deserialize `MessageHash`:
	err = decoder.Decode(&obj.MessageHash)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (*ExecutionStateChangedEventData) isEventData() {}
func (obj *ExecutionStateChangedEventData) Self() any {
	return obj
}

type OcrConfigSetEventData struct {
	OcrPluginType OcrPluginType
	ConfigDigest  [32]uint8
	Signers       [][20]uint8
	Transmitters  []ag_solanago.PublicKey
	F             uint8
}

var OcrConfigSetEventDataDiscriminator = [8]byte{136, 69, 4, 187, 69, 241, 211, 31}

func (obj OcrConfigSetEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OcrConfigSetEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `OcrPluginType` param:
	err = encoder.Encode(obj.OcrPluginType)
	if err != nil {
		return err
	}
	// Serialize `ConfigDigest` param:
	err = encoder.Encode(obj.ConfigDigest)
	if err != nil {
		return err
	}
	// Serialize `Signers` param:
	err = encoder.Encode(obj.Signers)
	if err != nil {
		return err
	}
	// Serialize `Transmitters` param:
	err = encoder.Encode(obj.Transmitters)
	if err != nil {
		return err
	}
	// Serialize `F` param:
	err = encoder.Encode(obj.F)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OcrConfigSetEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OcrConfigSetEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[136 69 4 187 69 241 211 31]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `OcrPluginType`:
	err = decoder.Decode(&obj.OcrPluginType)
	if err != nil {
		return err
	}
	// Deserialize `ConfigDigest`:
	err = decoder.Decode(&obj.ConfigDigest)
	if err != nil {
		return err
	}
	// Deserialize `Signers`:
	err = decoder.Decode(&obj.Signers)
	if err != nil {
		return err
	}
	// Deserialize `Transmitters`:
	err = decoder.Decode(&obj.Transmitters)
	if err != nil {
		return err
	}
	// Deserialize `F`:
	err = decoder.Decode(&obj.F)
	if err != nil {
		return err
	}
	return nil
}

func (*OcrConfigSetEventData) isEventData() {}
func (obj *OcrConfigSetEventData) Self() any {
	return obj
}

type OwnershipTransferRequestedEventData struct {
	From ag_solanago.PublicKey
	To   ag_solanago.PublicKey
}

var OwnershipTransferRequestedEventDataDiscriminator = [8]byte{79, 54, 99, 123, 57, 244, 134, 35}

func (obj OwnershipTransferRequestedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OwnershipTransferRequestedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OwnershipTransferRequestedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OwnershipTransferRequestedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[79 54 99 123 57 244 134 35]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (*OwnershipTransferRequestedEventData) isEventData() {}
func (obj *OwnershipTransferRequestedEventData) Self() any {
	return obj
}

type OwnershipTransferredEventData struct {
	From ag_solanago.PublicKey
	To   ag_solanago.PublicKey
}

var OwnershipTransferredEventDataDiscriminator = [8]byte{172, 61, 205, 183, 250, 50, 38, 98}

func (obj OwnershipTransferredEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OwnershipTransferredEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `To` param:
	err = encoder.Encode(obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OwnershipTransferredEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OwnershipTransferredEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[172 61 205 183 250 50 38 98]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `To`:
	err = decoder.Decode(&obj.To)
	if err != nil {
		return err
	}
	return nil
}

func (*OwnershipTransferredEventData) isEventData() {}
func (obj *OwnershipTransferredEventData) Self() any {
	return obj
}

type ReferenceAddressesSetEventData struct {
	Router             ag_solanago.PublicKey
	FeeQuoter          ag_solanago.PublicKey
	OfframpLookupTable ag_solanago.PublicKey
	RmnRemote          ag_solanago.PublicKey
}

var ReferenceAddressesSetEventDataDiscriminator = [8]byte{146, 234, 139, 115, 99, 143, 216, 191}

func (obj ReferenceAddressesSetEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ReferenceAddressesSetEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Router` param:
	err = encoder.Encode(obj.Router)
	if err != nil {
		return err
	}
	// Serialize `FeeQuoter` param:
	err = encoder.Encode(obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Serialize `OfframpLookupTable` param:
	err = encoder.Encode(obj.OfframpLookupTable)
	if err != nil {
		return err
	}
	// Serialize `RmnRemote` param:
	err = encoder.Encode(obj.RmnRemote)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReferenceAddressesSetEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ReferenceAddressesSetEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[146 234 139 115 99 143 216 191]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Router`:
	err = decoder.Decode(&obj.Router)
	if err != nil {
		return err
	}
	// Deserialize `FeeQuoter`:
	err = decoder.Decode(&obj.FeeQuoter)
	if err != nil {
		return err
	}
	// Deserialize `OfframpLookupTable`:
	err = decoder.Decode(&obj.OfframpLookupTable)
	if err != nil {
		return err
	}
	// Deserialize `RmnRemote`:
	err = decoder.Decode(&obj.RmnRemote)
	if err != nil {
		return err
	}
	return nil
}

func (*ReferenceAddressesSetEventData) isEventData() {}
func (obj *ReferenceAddressesSetEventData) Self() any {
	return obj
}

type SkippedAlreadyExecutedMessageEventData struct {
	SourceChainSelector uint64
	SequenceNumber      uint64
}

var SkippedAlreadyExecutedMessageEventDataDiscriminator = [8]byte{124, 136, 216, 231, 25, 232, 5, 239}

func (obj SkippedAlreadyExecutedMessageEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SkippedAlreadyExecutedMessageEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SkippedAlreadyExecutedMessageEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SkippedAlreadyExecutedMessageEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[124 136 216 231 25 232 5 239]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (*SkippedAlreadyExecutedMessageEventData) isEventData() {}
func (obj *SkippedAlreadyExecutedMessageEventData) Self() any {
	return obj
}

type SourceChainAddedEventData struct {
	SourceChainSelector uint64
	SourceChainConfig   SourceChainConfig
}

var SourceChainAddedEventDataDiscriminator = [8]byte{98, 127, 170, 88, 67, 55, 230, 8}

func (obj SourceChainAddedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SourceChainAddedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `SourceChainConfig` param:
	err = encoder.Encode(obj.SourceChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SourceChainAddedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SourceChainAddedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[98 127 170 88 67 55 230 8]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `SourceChainConfig`:
	err = decoder.Decode(&obj.SourceChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (*SourceChainAddedEventData) isEventData() {}
func (obj *SourceChainAddedEventData) Self() any {
	return obj
}

type SourceChainConfigUpdatedEventData struct {
	SourceChainSelector uint64
	SourceChainConfig   SourceChainConfig
}

var SourceChainConfigUpdatedEventDataDiscriminator = [8]byte{31, 205, 106, 132, 10, 220, 181, 30}

func (obj SourceChainConfigUpdatedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SourceChainConfigUpdatedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `SourceChainConfig` param:
	err = encoder.Encode(obj.SourceChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SourceChainConfigUpdatedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SourceChainConfigUpdatedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[31 205 106 132 10 220 181 30]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `SourceChainConfig`:
	err = decoder.Decode(&obj.SourceChainConfig)
	if err != nil {
		return err
	}
	return nil
}

func (*SourceChainConfigUpdatedEventData) isEventData() {}
func (obj *SourceChainConfigUpdatedEventData) Self() any {
	return obj
}

type TransmittedEventData struct {
	OcrPluginType  OcrPluginType
	ConfigDigest   [32]uint8
	SequenceNumber uint64
}

var TransmittedEventDataDiscriminator = [8]byte{144, 94, 142, 170, 49, 110, 67, 189}

func (obj TransmittedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TransmittedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `OcrPluginType` param:
	err = encoder.Encode(obj.OcrPluginType)
	if err != nil {
		return err
	}
	// Serialize `ConfigDigest` param:
	err = encoder.Encode(obj.ConfigDigest)
	if err != nil {
		return err
	}
	// Serialize `SequenceNumber` param:
	err = encoder.Encode(obj.SequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransmittedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TransmittedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[144 94 142 170 49 110 67 189]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `OcrPluginType`:
	err = decoder.Decode(&obj.OcrPluginType)
	if err != nil {
		return err
	}
	// Deserialize `ConfigDigest`:
	err = decoder.Decode(&obj.ConfigDigest)
	if err != nil {
		return err
	}
	// Deserialize `SequenceNumber`:
	err = decoder.Decode(&obj.SequenceNumber)
	if err != nil {
		return err
	}
	return nil
}

func (*TransmittedEventData) isEventData() {}
func (obj *TransmittedEventData) Self() any {
	return obj
}

var eventTypes = map[[8]byte]reflect.Type{
	CommitReportAcceptedEventDataDiscriminator:          reflect.TypeOf(CommitReportAcceptedEventData{}),
	CommitReportPDAClosedEventDataDiscriminator:         reflect.TypeOf(CommitReportPDAClosedEventData{}),
	ConfigSetEventDataDiscriminator:                     reflect.TypeOf(ConfigSetEventData{}),
	ExecutionStateChangedEventDataDiscriminator:         reflect.TypeOf(ExecutionStateChangedEventData{}),
	OcrConfigSetEventDataDiscriminator:                  reflect.TypeOf(OcrConfigSetEventData{}),
	OwnershipTransferRequestedEventDataDiscriminator:    reflect.TypeOf(OwnershipTransferRequestedEventData{}),
	OwnershipTransferredEventDataDiscriminator:          reflect.TypeOf(OwnershipTransferredEventData{}),
	ReferenceAddressesSetEventDataDiscriminator:         reflect.TypeOf(ReferenceAddressesSetEventData{}),
	SkippedAlreadyExecutedMessageEventDataDiscriminator: reflect.TypeOf(SkippedAlreadyExecutedMessageEventData{}),
	SourceChainAddedEventDataDiscriminator:              reflect.TypeOf(SourceChainAddedEventData{}),
	SourceChainConfigUpdatedEventDataDiscriminator:      reflect.TypeOf(SourceChainConfigUpdatedEventData{}),
	TransmittedEventDataDiscriminator:                   reflect.TypeOf(TransmittedEventData{}),
}
var eventNames = map[[8]byte]string{
	CommitReportAcceptedEventDataDiscriminator:          "CommitReportAccepted",
	CommitReportPDAClosedEventDataDiscriminator:         "CommitReportPDAClosed",
	ConfigSetEventDataDiscriminator:                     "ConfigSet",
	ExecutionStateChangedEventDataDiscriminator:         "ExecutionStateChanged",
	OcrConfigSetEventDataDiscriminator:                  "OcrConfigSet",
	OwnershipTransferRequestedEventDataDiscriminator:    "OwnershipTransferRequested",
	OwnershipTransferredEventDataDiscriminator:          "OwnershipTransferred",
	ReferenceAddressesSetEventDataDiscriminator:         "ReferenceAddressesSet",
	SkippedAlreadyExecutedMessageEventDataDiscriminator: "SkippedAlreadyExecutedMessage",
	SourceChainAddedEventDataDiscriminator:              "SourceChainAdded",
	SourceChainConfigUpdatedEventDataDiscriminator:      "SourceChainConfigUpdated",
	TransmittedEventDataDiscriminator:                   "Transmitted",
}
var (
	_ fmt.Formatter = nil
)
var (
	_ *ag_solanago.Transaction = nil
)
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)
var (
	_ *ag_rpc.GetTransactionResult = nil
)
var (
	_ *ag_base58.Alphabet = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
	Self() any
}

const eventLogPrefix = "Program data: "

func DecodeEvents(txData *ag_rpc.GetTransactionResult, targetProgramId ag_solanago.PublicKey, getAddressTables func(altAddresses []ag_solanago.PublicKey) (tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice, err error)) (evts []*Event, err error) {
	var tx *ag_solanago.Transaction
	if tx, err = txData.Transaction.GetTransaction(); err != nil {
		return
	}

	altAddresses := make([]ag_solanago.PublicKey, len(tx.Message.AddressTableLookups))
	for i, alt := range tx.Message.AddressTableLookups {
		altAddresses[i] = alt.AccountKey
	}
	if len(altAddresses) > 0 {
		var tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice
		if tables, err = getAddressTables(altAddresses); err != nil {
			return
		}
		tx.Message.SetAddressTables(tables)
		if err = tx.Message.ResolveLookups(); err != nil {
			return
		}
	}

	var base64Binaries [][]byte
	logMessageEventBinaries, err := decodeEventsFromLogMessage(txData.Meta.LogMessages)
	if err != nil {
		return
	}

	emitedCPIEventBinaries, err := decodeEventsFromEmitCPI(txData.Meta.InnerInstructions, tx.Message.AccountKeys, targetProgramId)
	if err != nil {
		return
	}

	base64Binaries = append(base64Binaries, logMessageEventBinaries...)
	base64Binaries = append(base64Binaries, emitedCPIEventBinaries...)
	evts, err = parseEvents(base64Binaries)
	return
}

func decodeEventsFromLogMessage(logMessages []string) (eventBinaries [][]byte, err error) {
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode logMessage event: %s", eventBase64)
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func decodeEventsFromEmitCPI(InnerInstructions []ag_rpc.InnerInstruction, accountKeys ag_solanago.PublicKeySlice, targetProgramId ag_solanago.PublicKey) (eventBinaries [][]byte, err error) {
	for _, parsedIx := range InnerInstructions {
		for _, ix := range parsedIx.Instructions {
			if accountKeys[ix.ProgramIDIndex] != targetProgramId {
				continue
			}

			var ixData []byte
			if ixData, err = ag_base58.Decode(ix.Data.String()); err != nil {
				return
			}
			if len(ixData) < 8 {
				continue
			}

			eventBase64 := base64.StdEncoding.EncodeToString(ixData[8:])
			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func parseEvents(base64Binaries [][]byte) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)

	for _, eventBinary := range base64Binaries {
		if len(eventBinary) < 8 {
			continue
		}
		eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
		if eventType, ok := eventTypes[eventDiscriminator]; ok {
			eventData := reflect.New(eventType).Interface().(EventData)
			decoder.Reset(eventBinary)
			if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
				err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
				return
			}
			evts = append(evts, &Event{
				Name: eventNames[eventDiscriminator],
				Data: eventData,
			})
		}
	}
	return
}
