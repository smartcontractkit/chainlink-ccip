// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_offramp

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Closes the execution report buffer to reclaim funds.
//
// Note this is only necessary when aborting a buffered transaction, or when a mistake
// was made when buffering data. The buffer account will otherwise automatically close
// and return funds to the caller whenever buffered execution succeeds.
type CloseExecutionReportBufferInstruction struct {
	BufferId *[]byte

	// [0] = [WRITE] execution_report_buffer
	//
	// [1] = [] config
	//
	// [2] = [WRITE, SIGNER] authority
	//
	// [3] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseExecutionReportBufferInstructionBuilder creates a new `CloseExecutionReportBufferInstruction` instruction builder.
func NewCloseExecutionReportBufferInstructionBuilder() *CloseExecutionReportBufferInstruction {
	nd := &CloseExecutionReportBufferInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetBufferId sets the "_buffer_id" parameter.
func (inst *CloseExecutionReportBufferInstruction) SetBufferId(_buffer_id []byte) *CloseExecutionReportBufferInstruction {
	inst.BufferId = &_buffer_id
	return inst
}

// SetExecutionReportBufferAccount sets the "execution_report_buffer" account.
func (inst *CloseExecutionReportBufferInstruction) SetExecutionReportBufferAccount(executionReportBuffer ag_solanago.PublicKey) *CloseExecutionReportBufferInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(executionReportBuffer).WRITE()
	return inst
}

// GetExecutionReportBufferAccount gets the "execution_report_buffer" account.
func (inst *CloseExecutionReportBufferInstruction) GetExecutionReportBufferAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *CloseExecutionReportBufferInstruction) SetConfigAccount(config ag_solanago.PublicKey) *CloseExecutionReportBufferInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *CloseExecutionReportBufferInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CloseExecutionReportBufferInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *CloseExecutionReportBufferInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CloseExecutionReportBufferInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CloseExecutionReportBufferInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CloseExecutionReportBufferInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CloseExecutionReportBufferInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst CloseExecutionReportBufferInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseExecutionReportBuffer,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseExecutionReportBufferInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseExecutionReportBufferInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BufferId == nil {
			return errors.New("BufferId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ExecutionReportBuffer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CloseExecutionReportBufferInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseExecutionReportBuffer")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  BufferId", *inst.BufferId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("execution_report_buffer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         system_program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CloseExecutionReportBufferInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BufferId` param:
	err = encoder.Encode(obj.BufferId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CloseExecutionReportBufferInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BufferId`:
	err = decoder.Decode(&obj.BufferId)
	if err != nil {
		return err
	}
	return nil
}

// NewCloseExecutionReportBufferInstruction declares a new CloseExecutionReportBuffer instruction with the provided parameters and accounts.
func NewCloseExecutionReportBufferInstruction(
	// Parameters:
	_buffer_id []byte,
	// Accounts:
	executionReportBuffer ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CloseExecutionReportBufferInstruction {
	return NewCloseExecutionReportBufferInstructionBuilder().
		SetBufferId(_buffer_id).
		SetExecutionReportBufferAccount(executionReportBuffer).
		SetConfigAccount(config).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
