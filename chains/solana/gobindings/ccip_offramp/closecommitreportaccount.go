// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_offramp

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseCommitReportAccount is the `close_commit_report_account` instruction.
type CloseCommitReportAccountInstruction struct {
	SourceChainSelector *uint64
	Root                *[]byte

	// [0] = [] config
	//
	// [1] = [WRITE] commit_report
	//
	// [2] = [] reference_addresses
	//
	// [3] = [] wsol_mint
	//
	// [4] = [WRITE] fee_token_receiver
	//
	// [5] = [] fee_billing_signer
	//
	// [6] = [] token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseCommitReportAccountInstructionBuilder creates a new `CloseCommitReportAccountInstruction` instruction builder.
func NewCloseCommitReportAccountInstructionBuilder() *CloseCommitReportAccountInstruction {
	nd := &CloseCommitReportAccountInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetSourceChainSelector sets the "source_chain_selector" parameter.
func (inst *CloseCommitReportAccountInstruction) SetSourceChainSelector(source_chain_selector uint64) *CloseCommitReportAccountInstruction {
	inst.SourceChainSelector = &source_chain_selector
	return inst
}

// SetRoot sets the "root" parameter.
func (inst *CloseCommitReportAccountInstruction) SetRoot(root []byte) *CloseCommitReportAccountInstruction {
	inst.Root = &root
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *CloseCommitReportAccountInstruction) SetConfigAccount(config ag_solanago.PublicKey) *CloseCommitReportAccountInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *CloseCommitReportAccountInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCommitReportAccount sets the "commit_report" account.
func (inst *CloseCommitReportAccountInstruction) SetCommitReportAccount(commitReport ag_solanago.PublicKey) *CloseCommitReportAccountInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(commitReport).WRITE()
	return inst
}

// GetCommitReportAccount gets the "commit_report" account.
func (inst *CloseCommitReportAccountInstruction) GetCommitReportAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetReferenceAddressesAccount sets the "reference_addresses" account.
func (inst *CloseCommitReportAccountInstruction) SetReferenceAddressesAccount(referenceAddresses ag_solanago.PublicKey) *CloseCommitReportAccountInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(referenceAddresses)
	return inst
}

// GetReferenceAddressesAccount gets the "reference_addresses" account.
func (inst *CloseCommitReportAccountInstruction) GetReferenceAddressesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWsolMintAccount sets the "wsol_mint" account.
func (inst *CloseCommitReportAccountInstruction) SetWsolMintAccount(wsolMint ag_solanago.PublicKey) *CloseCommitReportAccountInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(wsolMint)
	return inst
}

// GetWsolMintAccount gets the "wsol_mint" account.
func (inst *CloseCommitReportAccountInstruction) GetWsolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFeeTokenReceiverAccount sets the "fee_token_receiver" account.
func (inst *CloseCommitReportAccountInstruction) SetFeeTokenReceiverAccount(feeTokenReceiver ag_solanago.PublicKey) *CloseCommitReportAccountInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(feeTokenReceiver).WRITE()
	return inst
}

// GetFeeTokenReceiverAccount gets the "fee_token_receiver" account.
func (inst *CloseCommitReportAccountInstruction) GetFeeTokenReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeeBillingSignerAccount sets the "fee_billing_signer" account.
func (inst *CloseCommitReportAccountInstruction) SetFeeBillingSignerAccount(feeBillingSigner ag_solanago.PublicKey) *CloseCommitReportAccountInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feeBillingSigner)
	return inst
}

// GetFeeBillingSignerAccount gets the "fee_billing_signer" account.
func (inst *CloseCommitReportAccountInstruction) GetFeeBillingSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *CloseCommitReportAccountInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CloseCommitReportAccountInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *CloseCommitReportAccountInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst CloseCommitReportAccountInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseCommitReportAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseCommitReportAccountInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseCommitReportAccountInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SourceChainSelector == nil {
			return errors.New("SourceChainSelector parameter is not set")
		}
		if inst.Root == nil {
			return errors.New("Root parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CommitReport is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ReferenceAddresses is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.WsolMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FeeTokenReceiver is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeeBillingSigner is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CloseCommitReportAccountInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseCommitReportAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  SourceChainSelector", *inst.SourceChainSelector))
						paramsBranch.Child(ag_format.Param("                 Root", *inst.Root))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      commit_report", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("reference_addresses", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          wsol_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" fee_token_receiver", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" fee_billing_signer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      token_program", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj CloseCommitReportAccountInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Serialize `Root` param:
	err = encoder.Encode(obj.Root)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CloseCommitReportAccountInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `Root`:
	err = decoder.Decode(&obj.Root)
	if err != nil {
		return err
	}
	return nil
}

// NewCloseCommitReportAccountInstruction declares a new CloseCommitReportAccount instruction with the provided parameters and accounts.
func NewCloseCommitReportAccountInstruction(
	// Parameters:
	source_chain_selector uint64,
	root []byte,
	// Accounts:
	config ag_solanago.PublicKey,
	commitReport ag_solanago.PublicKey,
	referenceAddresses ag_solanago.PublicKey,
	wsolMint ag_solanago.PublicKey,
	feeTokenReceiver ag_solanago.PublicKey,
	feeBillingSigner ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CloseCommitReportAccountInstruction {
	return NewCloseCommitReportAccountInstructionBuilder().
		SetSourceChainSelector(source_chain_selector).
		SetRoot(root).
		SetConfigAccount(config).
		SetCommitReportAccount(commitReport).
		SetReferenceAddressesAccount(referenceAddresses).
		SetWsolMintAccount(wsolMint).
		SetFeeTokenReceiverAccount(feeTokenReceiver).
		SetFeeBillingSignerAccount(feeBillingSigner).
		SetTokenProgramAccount(tokenProgram)
}
