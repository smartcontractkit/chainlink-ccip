// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_offramp

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialization Flow //
// Initializes the CCIP Offramp.
//
// The initialization of the Offramp is responsibility of Admin, nothing more than calling this method should be done first.
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for initialization.
// * `svm_chain_selector` - The chain selector for SVM.
// * `enable_execution_after` - The minimum amount of time required between a message has been committed and can be manually executed.
type Initialize struct {
	SvmChainSelector     *uint64
	EnableExecutionAfter *int64

	// [0] = [WRITE] config
	//
	// [1] = [WRITE] reference_addresses
	//
	// [2] = [] router
	//
	// [3] = [] fee_quoter
	//
	// [4] = [] offramp_lookup_table
	//
	// [5] = [WRITE] state
	//
	// [6] = [WRITE] external_execution_config
	//
	// [7] = [WRITE] token_pools_signer
	//
	// [8] = [WRITE, SIGNER] authority
	//
	// [9] = [] system_program
	//
	// [10] = [] program
	//
	// [11] = [] program_data
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetSvmChainSelector sets the "svm_chain_selector" parameter.
func (inst *Initialize) SetSvmChainSelector(svm_chain_selector uint64) *Initialize {
	inst.SvmChainSelector = &svm_chain_selector
	return inst
}

// SetEnableExecutionAfter sets the "enable_execution_after" parameter.
func (inst *Initialize) SetEnableExecutionAfter(enable_execution_after int64) *Initialize {
	inst.EnableExecutionAfter = &enable_execution_after
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *Initialize) SetConfigAccount(config ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *Initialize) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetReferenceAddressesAccount sets the "reference_addresses" account.
func (inst *Initialize) SetReferenceAddressesAccount(referenceAddresses ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(referenceAddresses).WRITE()
	return inst
}

// GetReferenceAddressesAccount gets the "reference_addresses" account.
func (inst *Initialize) GetReferenceAddressesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRouterAccount sets the "router" account.
func (inst *Initialize) SetRouterAccount(router ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(router)
	return inst
}

// GetRouterAccount gets the "router" account.
func (inst *Initialize) GetRouterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFeeQuoterAccount sets the "fee_quoter" account.
func (inst *Initialize) SetFeeQuoterAccount(feeQuoter ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(feeQuoter)
	return inst
}

// GetFeeQuoterAccount gets the "fee_quoter" account.
func (inst *Initialize) GetFeeQuoterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOfframpLookupTableAccount sets the "offramp_lookup_table" account.
func (inst *Initialize) SetOfframpLookupTableAccount(offrampLookupTable ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(offrampLookupTable)
	return inst
}

// GetOfframpLookupTableAccount gets the "offramp_lookup_table" account.
func (inst *Initialize) GetOfframpLookupTableAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStateAccount sets the "state" account.
func (inst *Initialize) SetStateAccount(state ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *Initialize) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetExternalExecutionConfigAccount sets the "external_execution_config" account.
func (inst *Initialize) SetExternalExecutionConfigAccount(externalExecutionConfig ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(externalExecutionConfig).WRITE()
	return inst
}

// GetExternalExecutionConfigAccount gets the "external_execution_config" account.
func (inst *Initialize) GetExternalExecutionConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenPoolsSignerAccount sets the "token_pools_signer" account.
func (inst *Initialize) SetTokenPoolsSignerAccount(tokenPoolsSigner ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenPoolsSigner).WRITE()
	return inst
}

// GetTokenPoolsSignerAccount gets the "token_pools_signer" account.
func (inst *Initialize) GetTokenPoolsSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Initialize) SetAuthorityAccount(authority ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Initialize) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Initialize) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Initialize) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetProgramAccount sets the "program" account.
func (inst *Initialize) SetProgramAccount(program ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Initialize) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetProgramDataAccount sets the "program_data" account.
func (inst *Initialize) SetProgramDataAccount(programData ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(programData)
	return inst
}

// GetProgramDataAccount gets the "program_data" account.
func (inst *Initialize) GetProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SvmChainSelector == nil {
			return errors.New("SvmChainSelector parameter is not set")
		}
		if inst.EnableExecutionAfter == nil {
			return errors.New("EnableExecutionAfter parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ReferenceAddresses is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Router is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FeeQuoter is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OfframpLookupTable is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ExternalExecutionConfig is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenPoolsSigner is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.ProgramData is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      SvmChainSelector", *inst.SvmChainSelector))
						paramsBranch.Child(ag_format.Param("  EnableExecutionAfter", *inst.EnableExecutionAfter))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      reference_addresses", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                   router", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               fee_quoter", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     offramp_lookup_table", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                    state", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("external_execution_config", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       token_pools_signer", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                authority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           system_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                  program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("             program_data", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SvmChainSelector` param:
	err = encoder.Encode(obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Serialize `EnableExecutionAfter` param:
	err = encoder.Encode(obj.EnableExecutionAfter)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SvmChainSelector`:
	err = decoder.Decode(&obj.SvmChainSelector)
	if err != nil {
		return err
	}
	// Deserialize `EnableExecutionAfter`:
	err = decoder.Decode(&obj.EnableExecutionAfter)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	svm_chain_selector uint64,
	enable_execution_after int64,
	// Accounts:
	config ag_solanago.PublicKey,
	referenceAddresses ag_solanago.PublicKey,
	router ag_solanago.PublicKey,
	feeQuoter ag_solanago.PublicKey,
	offrampLookupTable ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	externalExecutionConfig ag_solanago.PublicKey,
	tokenPoolsSigner ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	program ag_solanago.PublicKey,
	programData ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetSvmChainSelector(svm_chain_selector).
		SetEnableExecutionAfter(enable_execution_after).
		SetConfigAccount(config).
		SetReferenceAddressesAccount(referenceAddresses).
		SetRouterAccount(router).
		SetFeeQuoterAccount(feeQuoter).
		SetOfframpLookupTableAccount(offrampLookupTable).
		SetStateAccount(state).
		SetExternalExecutionConfigAccount(externalExecutionConfig).
		SetTokenPoolsSignerAccount(tokenPoolsSigner).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram).
		SetProgramAccount(program).
		SetProgramDataAccount(programData)
}
