// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_offramp

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrInvalidSequenceInterval = &customErrorDef{
		code: 9000,
		msg:  "The given sequence interval is invalid",
		name: "InvalidSequenceInterval",
	}
	ErrRootNotCommitted = &customErrorDef{
		code: 9001,
		msg:  "The given Merkle Root is missing",
		name: "RootNotCommitted",
	}
	ErrInvalidRMNRemoteAddress = &customErrorDef{
		code: 9002,
		msg:  "Invalid RMN Remote Address",
		name: "InvalidRMNRemoteAddress",
	}
	ErrExistingMerkleRoot = &customErrorDef{
		code: 9003,
		msg:  "The given Merkle Root is already committed",
		name: "ExistingMerkleRoot",
	}
	ErrUnauthorized = &customErrorDef{
		code: 9004,
		msg:  "The signer is unauthorized",
		name: "Unauthorized",
	}
	ErrInvalidNonce = &customErrorDef{
		code: 9005,
		msg:  "Invalid Nonce",
		name: "InvalidNonce",
	}
	ErrInvalidInputsMissingWritable = &customErrorDef{
		code: 9006,
		msg:  "Account should be writable",
		name: "InvalidInputsMissingWritable",
	}
	ErrOnrampNotConfigured = &customErrorDef{
		code: 9007,
		msg:  "Onramp was not configured",
		name: "OnrampNotConfigured",
	}
	ErrFailedToDeserializeReport = &customErrorDef{
		code: 9008,
		msg:  "Failed to deserialize report",
		name: "FailedToDeserializeReport",
	}
	ErrInvalidPluginType = &customErrorDef{
		code: 9009,
		msg:  "Invalid plugin type",
		name: "InvalidPluginType",
	}
	ErrInvalidVersion = &customErrorDef{
		code: 9010,
		msg:  "Invalid version of the onchain state",
		name: "InvalidVersion",
	}
	ErrMissingExpectedPriceUpdates = &customErrorDef{
		code: 9011,
		msg:  "Commit report is missing expected price updates",
		name: "MissingExpectedPriceUpdates",
	}
	ErrMissingExpectedMerkleRoot = &customErrorDef{
		code: 9012,
		msg:  "Commit report is missing expected merkle root",
		name: "MissingExpectedMerkleRoot",
	}
	ErrUnexpectedMerkleRoot = &customErrorDef{
		code: 9013,
		msg:  "Commit report contains unexpected merkle root",
		name: "UnexpectedMerkleRoot",
	}
	ErrRedundantOwnerProposal = &customErrorDef{
		code: 9014,
		msg:  "Proposed owner is the current owner",
		name: "RedundantOwnerProposal",
	}
	ErrUnsupportedSourceChainSelector = &customErrorDef{
		code: 9015,
		msg:  "Source chain selector not supported",
		name: "UnsupportedSourceChainSelector",
	}
	ErrUnsupportedDestinationChainSelector = &customErrorDef{
		code: 9016,
		msg:  "Destination chain selector not supported",
		name: "UnsupportedDestinationChainSelector",
	}
	ErrInvalidProof = &customErrorDef{
		code: 9017,
		msg:  "Invalid Proof for Merkle Root",
		name: "InvalidProof",
	}
	ErrInvalidMessage = &customErrorDef{
		code: 9018,
		msg:  "Invalid message format",
		name: "InvalidMessage",
	}
	ErrReachedMaxSequenceNumber = &customErrorDef{
		code: 9019,
		msg:  "Reached max sequence number",
		name: "ReachedMaxSequenceNumber",
	}
	ErrManualExecutionNotAllowed = &customErrorDef{
		code: 9020,
		msg:  "Manual execution not allowed",
		name: "ManualExecutionNotAllowed",
	}
	ErrInvalidInputsNumberOfAccounts = &customErrorDef{
		code: 9021,
		msg:  "Number of accounts is invalid",
		name: "InvalidInputsNumberOfAccounts",
	}
	ErrInvalidInputsGlobalStateAccount = &customErrorDef{
		code: 9022,
		msg:  "Invalid global state account address",
		name: "InvalidInputsGlobalStateAccount",
	}
	ErrInvalidInputsTokenIndices = &customErrorDef{
		code: 9023,
		msg:  "Invalid pool account account indices",
		name: "InvalidInputsTokenIndices",
	}
	ErrInvalidInputsPoolAccounts = &customErrorDef{
		code: 9024,
		msg:  "Invalid pool accounts",
		name: "InvalidInputsPoolAccounts",
	}
	ErrInvalidInputsTokenAccounts = &customErrorDef{
		code: 9025,
		msg:  "Invalid token accounts",
		name: "InvalidInputsTokenAccounts",
	}
	ErrInvalidInputsSysvarAccount = &customErrorDef{
		code: 9026,
		msg:  "Invalid sysvar instructions account",
		name: "InvalidInputsSysvarAccount",
	}
	ErrInvalidInputsFeeQuoterAccount = &customErrorDef{
		code: 9027,
		msg:  "Invalid fee quoter account",
		name: "InvalidInputsFeeQuoterAccount",
	}
	ErrInvalidInputsAllowedOfframpAccount = &customErrorDef{
		code: 9028,
		msg:  "Invalid offramp authorization account",
		name: "InvalidInputsAllowedOfframpAccount",
	}
	ErrInvalidInputsTokenAdminRegistryAccounts = &customErrorDef{
		code: 9029,
		msg:  "Invalid Token Admin Registry account",
		name: "InvalidInputsTokenAdminRegistryAccounts",
	}
	ErrInvalidInputsLookupTableAccounts = &customErrorDef{
		code: 9030,
		msg:  "Invalid LookupTable account",
		name: "InvalidInputsLookupTableAccounts",
	}
	ErrInvalidInputsLookupTableAccountWritable = &customErrorDef{
		code: 9031,
		msg:  "Invalid LookupTable account writable access",
		name: "InvalidInputsLookupTableAccountWritable",
	}
	ErrOfframpReleaseMintBalanceMismatch = &customErrorDef{
		code: 9032,
		msg:  "Release or mint balance mismatch",
		name: "OfframpReleaseMintBalanceMismatch",
	}
	ErrOfframpInvalidDataLength = &customErrorDef{
		code: 9033,
		msg:  "Invalid data length",
		name: "OfframpInvalidDataLength",
	}
	ErrStaleCommitReport = &customErrorDef{
		code: 9034,
		msg:  "Stale commit report",
		name: "StaleCommitReport",
	}
	ErrInvalidWritabilityBitmap = &customErrorDef{
		code: 9035,
		msg:  "Invalid writability bitmap",
		name: "InvalidWritabilityBitmap",
	}
	ErrInvalidCodeVersion = &customErrorDef{
		code: 9036,
		msg:  "Invalid code version",
		name: "InvalidCodeVersion",
	}
	ErrOcr3InvalidConfigFMustBePositive = &customErrorDef{
		code: 9037,
		msg:  "Invalid config: F must be positive",
		name: "Ocr3InvalidConfigFMustBePositive",
	}
	ErrOcr3InvalidConfigTooManyTransmitters = &customErrorDef{
		code: 9038,
		msg:  "Invalid config: Too many transmitters",
		name: "Ocr3InvalidConfigTooManyTransmitters",
	}
	ErrOcr3InvalidConfigNoTransmitters = &customErrorDef{
		code: 9039,
		msg:  "Invalid config: No transmitters",
		name: "Ocr3InvalidConfigNoTransmitters",
	}
	ErrOcr3InvalidConfigTooManySigners = &customErrorDef{
		code: 9040,
		msg:  "Invalid config: Too many signers",
		name: "Ocr3InvalidConfigTooManySigners",
	}
	ErrOcr3InvalidConfigFIsTooHigh = &customErrorDef{
		code: 9041,
		msg:  "Invalid config: F is too high",
		name: "Ocr3InvalidConfigFIsTooHigh",
	}
	ErrOcr3InvalidConfigRepeatedOracle = &customErrorDef{
		code: 9042,
		msg:  "Invalid config: Repeated oracle address",
		name: "Ocr3InvalidConfigRepeatedOracle",
	}
	ErrOcr3WrongMessageLength = &customErrorDef{
		code: 9043,
		msg:  "Wrong message length",
		name: "Ocr3WrongMessageLength",
	}
	ErrOcr3ConfigDigestMismatch = &customErrorDef{
		code: 9044,
		msg:  "Config digest mismatch",
		name: "Ocr3ConfigDigestMismatch",
	}
	ErrOcr3WrongNumberOfSignatures = &customErrorDef{
		code: 9045,
		msg:  "Wrong number signatures",
		name: "Ocr3WrongNumberOfSignatures",
	}
	ErrOcr3UnauthorizedTransmitter = &customErrorDef{
		code: 9046,
		msg:  "Unauthorized transmitter",
		name: "Ocr3UnauthorizedTransmitter",
	}
	ErrOcr3UnauthorizedSigner = &customErrorDef{
		code: 9047,
		msg:  "Unauthorized signer",
		name: "Ocr3UnauthorizedSigner",
	}
	ErrOcr3NonUniqueSignatures = &customErrorDef{
		code: 9048,
		msg:  "Non unique signatures",
		name: "Ocr3NonUniqueSignatures",
	}
	ErrOcr3OracleCannotBeZeroAddress = &customErrorDef{
		code: 9049,
		msg:  "Oracle cannot be zero address",
		name: "Ocr3OracleCannotBeZeroAddress",
	}
	ErrOcr3StaticConfigCannotBeChanged = &customErrorDef{
		code: 9050,
		msg:  "Static config cannot be changed",
		name: "Ocr3StaticConfigCannotBeChanged",
	}
	ErrOcr3InvalidPluginType = &customErrorDef{
		code: 9051,
		msg:  "Incorrect plugin type",
		name: "Ocr3InvalidPluginType",
	}
	ErrOcr3InvalidSignature = &customErrorDef{
		code: 9052,
		msg:  "Invalid signature",
		name: "Ocr3InvalidSignature",
	}
	ErrOcr3SignaturesOutOfRegistration = &customErrorDef{
		code: 9053,
		msg:  "Signatures out of registration",
		name: "Ocr3SignaturesOutOfRegistration",
	}
	ErrInvalidOnrampAddress = &customErrorDef{
		code: 9054,
		msg:  "Invalid onramp address",
		name: "InvalidOnrampAddress",
	}
	ErrInvalidInputsExternalExecutionSignerAccount = &customErrorDef{
		code: 9055,
		msg:  "Invalid external execution signer account",
		name: "InvalidInputsExternalExecutionSignerAccount",
	}
	ErrCommitReportHasPendingMessages = &customErrorDef{
		code: 9056,
		msg:  "Commit report has pending messages",
		name: "CommitReportHasPendingMessages",
	}
	ErrExecutionReportBufferAlreadyContainsChunk = &customErrorDef{
		code: 9057,
		msg:  "The execution report buffer already contains that chunk",
		name: "ExecutionReportBufferAlreadyContainsChunk",
	}
	ErrExecutionReportBufferAlreadyInitialized = &customErrorDef{
		code: 9058,
		msg:  "The execution report buffer is already initialized",
		name: "ExecutionReportBufferAlreadyInitialized",
	}
	ErrExecutionReportBufferInvalidLength = &customErrorDef{
		code: 9059,
		msg:  "Invalid length for execution report buffer",
		name: "ExecutionReportBufferInvalidLength",
	}
	ErrExecutionReportBufferInvalidChunkIndex = &customErrorDef{
		code: 9060,
		msg:  "Chunk lies outside the execution report buffer",
		name: "ExecutionReportBufferInvalidChunkIndex",
	}
	ErrExecutionReportBufferInvalidChunkNumber = &customErrorDef{
		code: 9061,
		msg:  "Total number of chunks is not consistent",
		name: "ExecutionReportBufferInvalidChunkNumber",
	}
	ErrExecutionReportBufferChunkSizeTooSmall = &customErrorDef{
		code: 9062,
		msg:  "Chunk size is too small",
		name: "ExecutionReportBufferChunkSizeTooSmall",
	}
	ErrExecutionReportBufferInvalidChunkSize = &customErrorDef{
		code: 9063,
		msg:  "Invalid chunk size",
		name: "ExecutionReportBufferInvalidChunkSize",
	}
	ErrExecutionReportBufferIncomplete = &customErrorDef{
		code: 9064,
		msg:  "Execution report buffer is not complete: chunks are missing",
		name: "ExecutionReportBufferIncomplete",
	}
	ErrExecutionReportUnavailable = &customErrorDef{
		code: 9065,
		msg:  "Execution report wasn't provided either directly or via buffer",
		name: "ExecutionReportUnavailable",
	}
	Errors = map[int]CustomError{
		9000: ErrInvalidSequenceInterval,
		9001: ErrRootNotCommitted,
		9002: ErrInvalidRMNRemoteAddress,
		9003: ErrExistingMerkleRoot,
		9004: ErrUnauthorized,
		9005: ErrInvalidNonce,
		9006: ErrInvalidInputsMissingWritable,
		9007: ErrOnrampNotConfigured,
		9008: ErrFailedToDeserializeReport,
		9009: ErrInvalidPluginType,
		9010: ErrInvalidVersion,
		9011: ErrMissingExpectedPriceUpdates,
		9012: ErrMissingExpectedMerkleRoot,
		9013: ErrUnexpectedMerkleRoot,
		9014: ErrRedundantOwnerProposal,
		9015: ErrUnsupportedSourceChainSelector,
		9016: ErrUnsupportedDestinationChainSelector,
		9017: ErrInvalidProof,
		9018: ErrInvalidMessage,
		9019: ErrReachedMaxSequenceNumber,
		9020: ErrManualExecutionNotAllowed,
		9021: ErrInvalidInputsNumberOfAccounts,
		9022: ErrInvalidInputsGlobalStateAccount,
		9023: ErrInvalidInputsTokenIndices,
		9024: ErrInvalidInputsPoolAccounts,
		9025: ErrInvalidInputsTokenAccounts,
		9026: ErrInvalidInputsSysvarAccount,
		9027: ErrInvalidInputsFeeQuoterAccount,
		9028: ErrInvalidInputsAllowedOfframpAccount,
		9029: ErrInvalidInputsTokenAdminRegistryAccounts,
		9030: ErrInvalidInputsLookupTableAccounts,
		9031: ErrInvalidInputsLookupTableAccountWritable,
		9032: ErrOfframpReleaseMintBalanceMismatch,
		9033: ErrOfframpInvalidDataLength,
		9034: ErrStaleCommitReport,
		9035: ErrInvalidWritabilityBitmap,
		9036: ErrInvalidCodeVersion,
		9037: ErrOcr3InvalidConfigFMustBePositive,
		9038: ErrOcr3InvalidConfigTooManyTransmitters,
		9039: ErrOcr3InvalidConfigNoTransmitters,
		9040: ErrOcr3InvalidConfigTooManySigners,
		9041: ErrOcr3InvalidConfigFIsTooHigh,
		9042: ErrOcr3InvalidConfigRepeatedOracle,
		9043: ErrOcr3WrongMessageLength,
		9044: ErrOcr3ConfigDigestMismatch,
		9045: ErrOcr3WrongNumberOfSignatures,
		9046: ErrOcr3UnauthorizedTransmitter,
		9047: ErrOcr3UnauthorizedSigner,
		9048: ErrOcr3NonUniqueSignatures,
		9049: ErrOcr3OracleCannotBeZeroAddress,
		9050: ErrOcr3StaticConfigCannotBeChanged,
		9051: ErrOcr3InvalidPluginType,
		9052: ErrOcr3InvalidSignature,
		9053: ErrOcr3SignaturesOutOfRegistration,
		9054: ErrInvalidOnrampAddress,
		9055: ErrInvalidInputsExternalExecutionSignerAccount,
		9056: ErrCommitReportHasPendingMessages,
		9057: ErrExecutionReportBufferAlreadyContainsChunk,
		9058: ErrExecutionReportBufferAlreadyInitialized,
		9059: ErrExecutionReportBufferInvalidLength,
		9060: ErrExecutionReportBufferInvalidChunkIndex,
		9061: ErrExecutionReportBufferInvalidChunkNumber,
		9062: ErrExecutionReportBufferChunkSizeTooSmall,
		9063: ErrExecutionReportBufferInvalidChunkSize,
		9064: ErrExecutionReportBufferIncomplete,
		9065: ErrExecutionReportUnavailable,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
