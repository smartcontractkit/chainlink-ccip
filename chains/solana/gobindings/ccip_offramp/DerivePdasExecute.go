// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_offramp

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DerivePdasExecute is the `derivePdasExecute` instruction.
type DerivePdasExecute struct {
	RawExecutionReport *[]byte
	TokenIndexes       *[]byte
	ExecuteCaller      *ag_solanago.PublicKey
	MessageAccounts    *[]CcipAccountMeta

	// [0] = [] config
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewDerivePdasExecuteInstructionBuilder creates a new `DerivePdasExecute` instruction builder.
func NewDerivePdasExecuteInstructionBuilder() *DerivePdasExecute {
	nd := &DerivePdasExecute{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetRawExecutionReport sets the "rawExecutionReport" parameter.
func (inst *DerivePdasExecute) SetRawExecutionReport(rawExecutionReport []byte) *DerivePdasExecute {
	inst.RawExecutionReport = &rawExecutionReport
	return inst
}

// SetTokenIndexes sets the "tokenIndexes" parameter.
func (inst *DerivePdasExecute) SetTokenIndexes(tokenIndexes []byte) *DerivePdasExecute {
	inst.TokenIndexes = &tokenIndexes
	return inst
}

// SetExecuteCaller sets the "executeCaller" parameter.
func (inst *DerivePdasExecute) SetExecuteCaller(executeCaller ag_solanago.PublicKey) *DerivePdasExecute {
	inst.ExecuteCaller = &executeCaller
	return inst
}

// SetMessageAccounts sets the "messageAccounts" parameter.
func (inst *DerivePdasExecute) SetMessageAccounts(messageAccounts []CcipAccountMeta) *DerivePdasExecute {
	inst.MessageAccounts = &messageAccounts
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *DerivePdasExecute) SetConfigAccount(config ag_solanago.PublicKey) *DerivePdasExecute {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *DerivePdasExecute) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

func (inst DerivePdasExecute) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DerivePdasExecute,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DerivePdasExecute) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DerivePdasExecute) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RawExecutionReport == nil {
			return errors.New("RawExecutionReport parameter is not set")
		}
		if inst.TokenIndexes == nil {
			return errors.New("TokenIndexes parameter is not set")
		}
		if inst.ExecuteCaller == nil {
			return errors.New("ExecuteCaller parameter is not set")
		}
		if inst.MessageAccounts == nil {
			return errors.New("MessageAccounts parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
	}
	return nil
}

func (inst *DerivePdasExecute) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DerivePdasExecute")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RawExecutionReport", *inst.RawExecutionReport))
						paramsBranch.Child(ag_format.Param("      TokenIndexes", *inst.TokenIndexes))
						paramsBranch.Child(ag_format.Param("     ExecuteCaller", *inst.ExecuteCaller))
						paramsBranch.Child(ag_format.Param("   MessageAccounts", *inst.MessageAccounts))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("config", inst.AccountMetaSlice[0]))
					})
				})
		})
}

func (obj DerivePdasExecute) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RawExecutionReport` param:
	err = encoder.Encode(obj.RawExecutionReport)
	if err != nil {
		return err
	}
	// Serialize `TokenIndexes` param:
	err = encoder.Encode(obj.TokenIndexes)
	if err != nil {
		return err
	}
	// Serialize `ExecuteCaller` param:
	err = encoder.Encode(obj.ExecuteCaller)
	if err != nil {
		return err
	}
	// Serialize `MessageAccounts` param:
	err = encoder.Encode(obj.MessageAccounts)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DerivePdasExecute) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RawExecutionReport`:
	err = decoder.Decode(&obj.RawExecutionReport)
	if err != nil {
		return err
	}
	// Deserialize `TokenIndexes`:
	err = decoder.Decode(&obj.TokenIndexes)
	if err != nil {
		return err
	}
	// Deserialize `ExecuteCaller`:
	err = decoder.Decode(&obj.ExecuteCaller)
	if err != nil {
		return err
	}
	// Deserialize `MessageAccounts`:
	err = decoder.Decode(&obj.MessageAccounts)
	if err != nil {
		return err
	}
	return nil
}

// NewDerivePdasExecuteInstruction declares a new DerivePdasExecute instruction with the provided parameters and accounts.
func NewDerivePdasExecuteInstruction(
	// Parameters:
	rawExecutionReport []byte,
	tokenIndexes []byte,
	executeCaller ag_solanago.PublicKey,
	messageAccounts []CcipAccountMeta,
	// Accounts:
	config ag_solanago.PublicKey) *DerivePdasExecute {
	return NewDerivePdasExecuteInstructionBuilder().
		SetRawExecutionReport(rawExecutionReport).
		SetTokenIndexes(tokenIndexes).
		SetExecuteCaller(executeCaller).
		SetMessageAccounts(messageAccounts).
		SetConfigAccount(config)
}
