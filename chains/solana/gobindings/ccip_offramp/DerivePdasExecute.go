// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package ccip_offramp

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Automatically derives all acounts required to call `ccip_execute`.
//
// This methods receives the bare minimum amount of information needed to construct
// the entire account list to execute a transaction, and builds it iteratively
// over the course of multiple calls.
//
// The return type contains two fields:
//
// * `accounts_to_save`: The caller must append these accounts to a list they maintain.
// When complete, this list will contain all accounts needed to call `ccip_execute`
// * `ask_again_with`: When this list is not empty, the caller must call `derive_pdas_execute`
// again, including exactly these accounts as the `remaining_accounts`.
//
// Therefore, and starting with an empty `remaining_accounts` list, the caller must repeteadly
// call `derive_pdas_execute` until `ask_again_with` is returned empty.
//
// # Arguments
//
// * `ctx`: Context containing only the offramp config.
// * `report_or_buffer_id`: Either the serialized execution report, or the buffer id where it was
// buffered by the `execute_caller`.
// * `execute_caller`: Public key of the account that will sign the call to `ccip_execute`.
// * `message_accounts`: If the transaction involves messaging, the message accounts.
// * `source_chain_selector`: CCIP chain selector for the source chain.
type DerivePdasExecute struct {
	ReportOrBufferId    *[]byte
	ExecuteCaller       *ag_solanago.PublicKey
	MessageAccounts     *[]CcipAccountMeta
	SourceChainSelector *uint64

	// [0] = [] config
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewDerivePdasExecuteInstructionBuilder creates a new `DerivePdasExecute` instruction builder.
func NewDerivePdasExecuteInstructionBuilder() *DerivePdasExecute {
	nd := &DerivePdasExecute{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetReportOrBufferId sets the "reportOrBufferId" parameter.
func (inst *DerivePdasExecute) SetReportOrBufferId(reportOrBufferId []byte) *DerivePdasExecute {
	inst.ReportOrBufferId = &reportOrBufferId
	return inst
}

// SetExecuteCaller sets the "executeCaller" parameter.
func (inst *DerivePdasExecute) SetExecuteCaller(executeCaller ag_solanago.PublicKey) *DerivePdasExecute {
	inst.ExecuteCaller = &executeCaller
	return inst
}

// SetMessageAccounts sets the "messageAccounts" parameter.
func (inst *DerivePdasExecute) SetMessageAccounts(messageAccounts []CcipAccountMeta) *DerivePdasExecute {
	inst.MessageAccounts = &messageAccounts
	return inst
}

// SetSourceChainSelector sets the "sourceChainSelector" parameter.
func (inst *DerivePdasExecute) SetSourceChainSelector(sourceChainSelector uint64) *DerivePdasExecute {
	inst.SourceChainSelector = &sourceChainSelector
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *DerivePdasExecute) SetConfigAccount(config ag_solanago.PublicKey) *DerivePdasExecute {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *DerivePdasExecute) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

func (inst DerivePdasExecute) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DerivePdasExecute,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DerivePdasExecute) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DerivePdasExecute) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ReportOrBufferId == nil {
			return errors.New("ReportOrBufferId parameter is not set")
		}
		if inst.ExecuteCaller == nil {
			return errors.New("ExecuteCaller parameter is not set")
		}
		if inst.MessageAccounts == nil {
			return errors.New("MessageAccounts parameter is not set")
		}
		if inst.SourceChainSelector == nil {
			return errors.New("SourceChainSelector parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
	}
	return nil
}

func (inst *DerivePdasExecute) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DerivePdasExecute")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   ReportOrBufferId", *inst.ReportOrBufferId))
						paramsBranch.Child(ag_format.Param("      ExecuteCaller", *inst.ExecuteCaller))
						paramsBranch.Child(ag_format.Param("    MessageAccounts", *inst.MessageAccounts))
						paramsBranch.Child(ag_format.Param("SourceChainSelector", *inst.SourceChainSelector))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("config", inst.AccountMetaSlice[0]))
					})
				})
		})
}

func (obj DerivePdasExecute) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReportOrBufferId` param:
	err = encoder.Encode(obj.ReportOrBufferId)
	if err != nil {
		return err
	}
	// Serialize `ExecuteCaller` param:
	err = encoder.Encode(obj.ExecuteCaller)
	if err != nil {
		return err
	}
	// Serialize `MessageAccounts` param:
	err = encoder.Encode(obj.MessageAccounts)
	if err != nil {
		return err
	}
	// Serialize `SourceChainSelector` param:
	err = encoder.Encode(obj.SourceChainSelector)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DerivePdasExecute) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReportOrBufferId`:
	err = decoder.Decode(&obj.ReportOrBufferId)
	if err != nil {
		return err
	}
	// Deserialize `ExecuteCaller`:
	err = decoder.Decode(&obj.ExecuteCaller)
	if err != nil {
		return err
	}
	// Deserialize `MessageAccounts`:
	err = decoder.Decode(&obj.MessageAccounts)
	if err != nil {
		return err
	}
	// Deserialize `SourceChainSelector`:
	err = decoder.Decode(&obj.SourceChainSelector)
	if err != nil {
		return err
	}
	return nil
}

// NewDerivePdasExecuteInstruction declares a new DerivePdasExecute instruction with the provided parameters and accounts.
func NewDerivePdasExecuteInstruction(
	// Parameters:
	reportOrBufferId []byte,
	executeCaller ag_solanago.PublicKey,
	messageAccounts []CcipAccountMeta,
	sourceChainSelector uint64,
	// Accounts:
	config ag_solanago.PublicKey) *DerivePdasExecute {
	return NewDerivePdasExecuteInstructionBuilder().
		SetReportOrBufferId(reportOrBufferId).
		SetExecuteCaller(executeCaller).
		SetMessageAccounts(messageAccounts).
		SetSourceChainSelector(sourceChainSelector).
		SetConfigAccount(config)
}
