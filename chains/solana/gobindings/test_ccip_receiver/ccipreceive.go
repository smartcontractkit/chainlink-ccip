// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package test_ccip_receiver

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// This function is called by the CCIP Router to execute the CCIP message.
// The method name needs to be ccip_receive with Anchor encoding,
// if not using Anchor the discriminator needs to be [0x0b, 0xf4, 0x09, 0xf9, 0x2c, 0x53, 0x2f, 0xf5]
// You can send as many accounts as you need, specifying if mutable or not.
// But none of them could be an init, realloc or close.
// In this case, it increments the counter value by 1 and logs the parsed message.
type CcipReceiveInstruction struct {
	Message *Any2SVMMessage

	// [0] = [SIGNER] authority
	//
	// [1] = [] offramp_program
	// ··········· CHECK offramp program: exists only to derive the allowed offramp PDA
	// ··········· and the authority PDA. Must be second.
	//
	// [2] = [] allowed_offramp
	// ··········· CHECK PDA of the router program verifying the signer is an allowed offramp.
	// ··········· If PDA does not exist, the router doesn't allow this offramp
	//
	// [3] = [WRITE] external_execution_config
	//
	// [4] = [WRITE] counter
	//
	// [5] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCcipReceiveInstructionBuilder creates a new `CcipReceiveInstruction` instruction builder.
func NewCcipReceiveInstructionBuilder() *CcipReceiveInstruction {
	nd := &CcipReceiveInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetMessage sets the "message" parameter.
func (inst *CcipReceiveInstruction) SetMessage(message Any2SVMMessage) *CcipReceiveInstruction {
	inst.Message = &message
	return inst
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CcipReceiveInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CcipReceiveInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOfframpProgramAccount sets the "offramp_program" account.
// CHECK offramp program: exists only to derive the allowed offramp PDA
// and the authority PDA. Must be second.
func (inst *CcipReceiveInstruction) SetOfframpProgramAccount(offrampProgram ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(offrampProgram)
	return inst
}

// GetOfframpProgramAccount gets the "offramp_program" account.
// CHECK offramp program: exists only to derive the allowed offramp PDA
// and the authority PDA. Must be second.
func (inst *CcipReceiveInstruction) GetOfframpProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAllowedOfframpAccount sets the "allowed_offramp" account.
// CHECK PDA of the router program verifying the signer is an allowed offramp.
// If PDA does not exist, the router doesn't allow this offramp
func (inst *CcipReceiveInstruction) SetAllowedOfframpAccount(allowedOfframp ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(allowedOfframp)
	return inst
}

// GetAllowedOfframpAccount gets the "allowed_offramp" account.
// CHECK PDA of the router program verifying the signer is an allowed offramp.
// If PDA does not exist, the router doesn't allow this offramp
func (inst *CcipReceiveInstruction) GetAllowedOfframpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetExternalExecutionConfigAccount sets the "external_execution_config" account.
func (inst *CcipReceiveInstruction) SetExternalExecutionConfigAccount(externalExecutionConfig ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(externalExecutionConfig).WRITE()
	return inst
}

// GetExternalExecutionConfigAccount gets the "external_execution_config" account.
func (inst *CcipReceiveInstruction) GetExternalExecutionConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCounterAccount sets the "counter" account.
func (inst *CcipReceiveInstruction) SetCounterAccount(counter ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(counter).WRITE()
	return inst
}

// GetCounterAccount gets the "counter" account.
func (inst *CcipReceiveInstruction) GetCounterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CcipReceiveInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CcipReceiveInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CcipReceiveInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst CcipReceiveInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CcipReceive,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CcipReceiveInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CcipReceiveInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Message == nil {
			return errors.New("Message parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OfframpProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AllowedOfframp is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ExternalExecutionConfig is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Counter is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CcipReceiveInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CcipReceive")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Message", *inst.Message))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          offramp_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          allowed_offramp", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("external_execution_config", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                  counter", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           system_program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CcipReceiveInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Message` param:
	err = encoder.Encode(obj.Message)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CcipReceiveInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Message`:
	err = decoder.Decode(&obj.Message)
	if err != nil {
		return err
	}
	return nil
}

// NewCcipReceiveInstruction declares a new CcipReceive instruction with the provided parameters and accounts.
func NewCcipReceiveInstruction(
	// Parameters:
	message Any2SVMMessage,
	// Accounts:
	authority ag_solanago.PublicKey,
	offrampProgram ag_solanago.PublicKey,
	allowedOfframp ag_solanago.PublicKey,
	externalExecutionConfig ag_solanago.PublicKey,
	counter ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CcipReceiveInstruction {
	return NewCcipReceiveInstructionBuilder().
		SetMessage(message).
		SetAuthorityAccount(authority).
		SetOfframpProgramAccount(offrampProgram).
		SetAllowedOfframpAccount(allowedOfframp).
		SetExternalExecutionConfigAccount(externalExecutionConfig).
		SetCounterAccount(counter).
		SetSystemProgramAccount(systemProgram)
}
