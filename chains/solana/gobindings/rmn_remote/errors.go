// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package rmn_remote

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrUnauthorized = &customErrorDef{
		code: 9000,
		msg:  "The signer is unauthorized",
		name: "Unauthorized",
	}
	ErrSubjectIsAlreadyCursed = &customErrorDef{
		code: 9001,
		msg:  "Subject is already cursed",
		name: "SubjectIsAlreadyCursed",
	}
	ErrSubjectWasNotCursed = &customErrorDef{
		code: 9002,
		msg:  "Subject was not cursed",
		name: "SubjectWasNotCursed",
	}
	ErrRedundantOwnerProposal = &customErrorDef{
		code: 9003,
		msg:  "Proposed owner is the current owner",
		name: "RedundantOwnerProposal",
	}
	ErrInvalidVersion = &customErrorDef{
		code: 9004,
		msg:  "Invalid version of the onchain state",
		name: "InvalidVersion",
	}
	ErrSubjectCursed = &customErrorDef{
		code: 9005,
		msg:  "The subject is actively cursed",
		name: "SubjectCursed",
	}
	ErrGloballyCursed = &customErrorDef{
		code: 9006,
		msg:  "This chain is globally cursed",
		name: "GloballyCursed",
	}
	ErrInvalidCodeVersion = &customErrorDef{
		code: 9007,
		msg:  "Invalid code version",
		name: "InvalidCodeVersion",
	}
	Errors = map[int]CustomError{
		9000: ErrUnauthorized,
		9001: ErrSubjectIsAlreadyCursed,
		9002: ErrSubjectWasNotCursed,
		9003: ErrRedundantOwnerProposal,
		9004: ErrInvalidVersion,
		9005: ErrSubjectCursed,
		9006: ErrGloballyCursed,
		9007: ErrInvalidCodeVersion,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
