// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package rmn_remote

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Retrieves a list of cursed subjects. Note this function will not revert if there's an active
// curse: It is to be used to retrieve information only.
//
// # Arguments
//
// * `ctx` - The context containing the accounts required to inspect curses.
type GetCursedSubjects struct {

	// [0] = [] curses
	//
	// [1] = [] config
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewGetCursedSubjectsInstructionBuilder creates a new `GetCursedSubjects` instruction builder.
func NewGetCursedSubjectsInstructionBuilder() *GetCursedSubjects {
	nd := &GetCursedSubjects{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetCursesAccount sets the "curses" account.
func (inst *GetCursedSubjects) SetCursesAccount(curses ag_solanago.PublicKey) *GetCursedSubjects {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(curses)
	return inst
}

// GetCursesAccount gets the "curses" account.
func (inst *GetCursedSubjects) GetCursesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetConfigAccount sets the "config" account.
func (inst *GetCursedSubjects) SetConfigAccount(config ag_solanago.PublicKey) *GetCursedSubjects {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *GetCursedSubjects) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

func (inst GetCursedSubjects) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_GetCursedSubjects,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst GetCursedSubjects) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *GetCursedSubjects) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Curses is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
	}
	return nil
}

func (inst *GetCursedSubjects) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("GetCursedSubjects")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("curses", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("config", inst.AccountMetaSlice[1]))
					})
				})
		})
}

func (obj GetCursedSubjects) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *GetCursedSubjects) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewGetCursedSubjectsInstruction declares a new GetCursedSubjects instruction with the provided parameters and accounts.
func NewGetCursedSubjectsInstruction(
	// Accounts:
	curses ag_solanago.PublicKey,
	config ag_solanago.PublicKey) *GetCursedSubjects {
	return NewGetCursedSubjectsInstructionBuilder().
		SetCursesAccount(curses).
		SetConfigAccount(config)
}
