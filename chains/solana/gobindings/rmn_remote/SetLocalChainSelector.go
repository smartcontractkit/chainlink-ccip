// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package rmn_remote

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sets the local chain selector. This chain selector will be used to verify if this chain is globally
// cursed, by transforming it into a curse subject (EVM equivalent: `bytes16(u128(selector))`)
//
// This should only be called in case of a previous misconfiguration during initialization.
//
// # Arguments
//
// * `ctx` - The context containing the accounts required for updating the configuration.
// * `local_chain_selector` - The local chain selector.
type SetLocalChainSelector struct {
	LocalChainSelector *uint64

	// [0] = [WRITE] config
	//
	// [1] = [WRITE] cursed
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewSetLocalChainSelectorInstructionBuilder creates a new `SetLocalChainSelector` instruction builder.
func NewSetLocalChainSelectorInstructionBuilder() *SetLocalChainSelector {
	nd := &SetLocalChainSelector{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetLocalChainSelector sets the "localChainSelector" parameter.
func (inst *SetLocalChainSelector) SetLocalChainSelector(localChainSelector uint64) *SetLocalChainSelector {
	inst.LocalChainSelector = &localChainSelector
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *SetLocalChainSelector) SetConfigAccount(config ag_solanago.PublicKey) *SetLocalChainSelector {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *SetLocalChainSelector) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetCursedAccount sets the "cursed" account.
func (inst *SetLocalChainSelector) SetCursedAccount(cursed ag_solanago.PublicKey) *SetLocalChainSelector {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(cursed).WRITE()
	return inst
}

// GetCursedAccount gets the "cursed" account.
func (inst *SetLocalChainSelector) GetCursedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SetLocalChainSelector) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetLocalChainSelector {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SetLocalChainSelector) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

func (inst SetLocalChainSelector) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetLocalChainSelector,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetLocalChainSelector) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetLocalChainSelector) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LocalChainSelector == nil {
			return errors.New("LocalChainSelector parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Cursed is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *SetLocalChainSelector) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetLocalChainSelector")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("LocalChainSelector", *inst.LocalChainSelector))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   config", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("   cursed", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice[2]))
					})
				})
		})
}

func (obj SetLocalChainSelector) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LocalChainSelector` param:
	err = encoder.Encode(obj.LocalChainSelector)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetLocalChainSelector) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LocalChainSelector`:
	err = decoder.Decode(&obj.LocalChainSelector)
	if err != nil {
		return err
	}
	return nil
}

// NewSetLocalChainSelectorInstruction declares a new SetLocalChainSelector instruction with the provided parameters and accounts.
func NewSetLocalChainSelectorInstruction(
	// Parameters:
	localChainSelector uint64,
	// Accounts:
	config ag_solanago.PublicKey,
	cursed ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *SetLocalChainSelector {
	return NewSetLocalChainSelectorInstructionBuilder().
		SetLocalChainSelector(localChainSelector).
		SetConfigAccount(config).
		SetCursedAccount(cursed).
		SetAuthorityAccount(authority)
}
