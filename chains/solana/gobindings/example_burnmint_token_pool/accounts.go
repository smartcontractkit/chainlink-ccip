// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package example_burnmint_token_pool

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
)

type BaseChain struct {
	Remote            RemoteConfig
	InboundRateLimit  RateLimitTokenBucket
	OutboundRateLimit RateLimitTokenBucket
}

var BaseChainDiscriminator = [8]byte{42, 3, 25, 254, 150, 57, 252, 244}

func (obj BaseChain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BaseChainDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Remote` param:
	err = encoder.Encode(obj.Remote)
	if err != nil {
		return err
	}
	// Serialize `InboundRateLimit` param:
	err = encoder.Encode(obj.InboundRateLimit)
	if err != nil {
		return err
	}
	// Serialize `OutboundRateLimit` param:
	err = encoder.Encode(obj.OutboundRateLimit)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BaseChain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BaseChainDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[42 3 25 254 150 57 252 244]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Remote`:
	err = decoder.Decode(&obj.Remote)
	if err != nil {
		return err
	}
	// Deserialize `InboundRateLimit`:
	err = decoder.Decode(&obj.InboundRateLimit)
	if err != nil {
		return err
	}
	// Deserialize `OutboundRateLimit`:
	err = decoder.Decode(&obj.OutboundRateLimit)
	if err != nil {
		return err
	}
	return nil
}

type State struct {
	Version uint8
	Config  BaseConfig
}

var StateDiscriminator = [8]byte{216, 146, 107, 94, 104, 75, 182, 177}

func (obj State) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *State) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[216 146 107 94 104 75 182 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

type ChainConfig struct {
	Base BaseChain
}

var ChainConfigDiscriminator = [8]byte{13, 177, 233, 141, 212, 29, 148, 56}

func (obj ChainConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ChainConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Base` param:
	err = encoder.Encode(obj.Base)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ChainConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ChainConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[13 177 233 141 212 29 148 56]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Base`:
	err = decoder.Decode(&obj.Base)
	if err != nil {
		return err
	}
	return nil
}
