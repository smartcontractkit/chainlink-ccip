// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package example_ccip_sender

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawTokens is the `withdraw_tokens` instruction.
type WithdrawTokensInstruction struct {
	Amount   *uint64
	Decimals *uint8

	// [0] = [WRITE] state
	//
	// [1] = [WRITE] program_token_account
	//
	// [2] = [WRITE] to_token_account
	//
	// [3] = [] mint
	//
	// [4] = [] token_program
	//
	// [5] = [] ccip_sender
	//
	// [6] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawTokensInstructionBuilder creates a new `WithdrawTokensInstruction` instruction builder.
func NewWithdrawTokensInstructionBuilder() *WithdrawTokensInstruction {
	nd := &WithdrawTokensInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *WithdrawTokensInstruction) SetAmount(amount uint64) *WithdrawTokensInstruction {
	inst.Amount = &amount
	return inst
}

// SetDecimals sets the "decimals" parameter.
func (inst *WithdrawTokensInstruction) SetDecimals(decimals uint8) *WithdrawTokensInstruction {
	inst.Decimals = &decimals
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *WithdrawTokensInstruction) SetStateAccount(state ag_solanago.PublicKey) *WithdrawTokensInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *WithdrawTokensInstruction) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProgramTokenAccountAccount sets the "program_token_account" account.
func (inst *WithdrawTokensInstruction) SetProgramTokenAccountAccount(programTokenAccount ag_solanago.PublicKey) *WithdrawTokensInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(programTokenAccount).WRITE()
	return inst
}

// GetProgramTokenAccountAccount gets the "program_token_account" account.
func (inst *WithdrawTokensInstruction) GetProgramTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetToTokenAccountAccount sets the "to_token_account" account.
func (inst *WithdrawTokensInstruction) SetToTokenAccountAccount(toTokenAccount ag_solanago.PublicKey) *WithdrawTokensInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(toTokenAccount).WRITE()
	return inst
}

// GetToTokenAccountAccount gets the "to_token_account" account.
func (inst *WithdrawTokensInstruction) GetToTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *WithdrawTokensInstruction) SetMintAccount(mint ag_solanago.PublicKey) *WithdrawTokensInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *WithdrawTokensInstruction) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *WithdrawTokensInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawTokensInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *WithdrawTokensInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCcipSenderAccount sets the "ccip_sender" account.
func (inst *WithdrawTokensInstruction) SetCcipSenderAccount(ccipSender ag_solanago.PublicKey) *WithdrawTokensInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(ccipSender)
	return inst
}

// GetCcipSenderAccount gets the "ccip_sender" account.
func (inst *WithdrawTokensInstruction) GetCcipSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *WithdrawTokensInstruction) SetAuthorityAccount(authority ag_solanago.PublicKey) *WithdrawTokensInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *WithdrawTokensInstruction) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst WithdrawTokensInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawTokens,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawTokensInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawTokensInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.Decimals == nil {
			return errors.New("Decimals parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProgramTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ToTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CcipSender is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *WithdrawTokensInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawTokens")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("Decimals", *inst.Decimals))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("program_token_", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     to_token_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" token_program", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   ccip_sender", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj WithdrawTokensInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawTokensInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawTokensInstruction declares a new WithdrawTokens instruction with the provided parameters and accounts.
func NewWithdrawTokensInstruction(
	// Parameters:
	amount uint64,
	decimals uint8,
	// Accounts:
	state ag_solanago.PublicKey,
	programTokenAccount ag_solanago.PublicKey,
	toTokenAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	ccipSender ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *WithdrawTokensInstruction {
	return NewWithdrawTokensInstructionBuilder().
		SetAmount(amount).
		SetDecimals(decimals).
		SetStateAccount(state).
		SetProgramTokenAccountAccount(programTokenAccount).
		SetToTokenAccountAccount(toTokenAccount).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetCcipSenderAccount(ccipSender).
		SetAuthorityAccount(authority)
}
