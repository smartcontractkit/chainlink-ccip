// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package external_program_cpi_stub

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AccountMut is the `account_mut` instruction.
type AccountMutInstruction struct {

	// [0] = [WRITE] u8_value
	//
	// [1] = [SIGNER] stub_caller
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAccountMutInstructionBuilder creates a new `AccountMutInstruction` instruction builder.
func NewAccountMutInstructionBuilder() *AccountMutInstruction {
	nd := &AccountMutInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetU8ValueAccount sets the "u8_value" account.
func (inst *AccountMutInstruction) SetU8ValueAccount(u8Value ag_solanago.PublicKey) *AccountMutInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(u8Value).WRITE()
	return inst
}

// GetU8ValueAccount gets the "u8_value" account.
func (inst *AccountMutInstruction) GetU8ValueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStubCallerAccount sets the "stub_caller" account.
func (inst *AccountMutInstruction) SetStubCallerAccount(stubCaller ag_solanago.PublicKey) *AccountMutInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(stubCaller).SIGNER()
	return inst
}

// GetStubCallerAccount gets the "stub_caller" account.
func (inst *AccountMutInstruction) GetStubCallerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *AccountMutInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AccountMutInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *AccountMutInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst AccountMutInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AccountMut,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AccountMutInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AccountMutInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.U8Value is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StubCaller is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AccountMutInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AccountMut")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      u8_value", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   stub_caller", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj AccountMutInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AccountMutInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAccountMutInstruction declares a new AccountMut instruction with the provided parameters and accounts.
func NewAccountMutInstruction(
	// Accounts:
	u8Value ag_solanago.PublicKey,
	stubCaller ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AccountMutInstruction {
	return NewAccountMutInstructionBuilder().
		SetU8ValueAccount(u8Value).
		SetStubCallerAccount(stubCaller).
		SetSystemProgramAccount(systemProgram)
}
