// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package external_program_cpi_stub

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ManyAccountsInstruction is the `manyAccountsInstruction` instruction.
type ManyAccountsInstruction struct {

	// [0] = [SIGNER] stubCaller
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewManyAccountsInstructionInstructionBuilder creates a new `ManyAccountsInstruction` instruction builder.
func NewManyAccountsInstructionInstructionBuilder() *ManyAccountsInstruction {
	nd := &ManyAccountsInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetStubCallerAccount sets the "stubCaller" account.
func (inst *ManyAccountsInstruction) SetStubCallerAccount(stubCaller ag_solanago.PublicKey) *ManyAccountsInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(stubCaller).SIGNER()
	return inst
}

// GetStubCallerAccount gets the "stubCaller" account.
func (inst *ManyAccountsInstruction) GetStubCallerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

func (inst ManyAccountsInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ManyAccountsInstruction,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ManyAccountsInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ManyAccountsInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.StubCaller is not set")
		}
	}
	return nil
}

func (inst *ManyAccountsInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ManyAccountsInstruction")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("stubCaller", inst.AccountMetaSlice[0]))
					})
				})
		})
}

func (obj ManyAccountsInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ManyAccountsInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewManyAccountsInstructionInstruction declares a new ManyAccountsInstruction instruction with the provided parameters and accounts.
func NewManyAccountsInstructionInstruction(
	// Accounts:
	stubCaller ag_solanago.PublicKey) *ManyAccountsInstruction {
	return NewManyAccountsInstructionInstructionBuilder().
		SetStubCallerAccount(stubCaller)
}
