// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package external_program_cpi_stub

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AccountMut is the `accountMut` instruction.
type AccountMut struct {

	// [0] = [WRITE] u8Value
	//
	// [1] = [SIGNER] stubCaller
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewAccountMutInstructionBuilder creates a new `AccountMut` instruction builder.
func NewAccountMutInstructionBuilder() *AccountMut {
	nd := &AccountMut{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetU8ValueAccount sets the "u8Value" account.
func (inst *AccountMut) SetU8ValueAccount(u8Value ag_solanago.PublicKey) *AccountMut {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(u8Value).WRITE()
	return inst
}

// GetU8ValueAccount gets the "u8Value" account.
func (inst *AccountMut) GetU8ValueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetStubCallerAccount sets the "stubCaller" account.
func (inst *AccountMut) SetStubCallerAccount(stubCaller ag_solanago.PublicKey) *AccountMut {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(stubCaller).SIGNER()
	return inst
}

// GetStubCallerAccount gets the "stubCaller" account.
func (inst *AccountMut) GetStubCallerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AccountMut) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AccountMut {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AccountMut) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

func (inst AccountMut) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AccountMut,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AccountMut) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AccountMut) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.U8Value is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StubCaller is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AccountMut) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AccountMut")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      u8Value", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("   stubCaller", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice[2]))
					})
				})
		})
}

func (obj AccountMut) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AccountMut) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAccountMutInstruction declares a new AccountMut instruction with the provided parameters and accounts.
func NewAccountMutInstruction(
	// Accounts:
	u8Value ag_solanago.PublicKey,
	stubCaller ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AccountMut {
	return NewAccountMutInstructionBuilder().
		SetU8ValueAccount(u8Value).
		SetStubCallerAccount(stubCaller).
		SetSystemProgramAccount(systemProgram)
}
