// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ccipocr3 "github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"

	mock "github.com/stretchr/testify/mock"
)

// TokenDataReader is an autogenerated mock type for the TokenDataReader type
type TokenDataReader struct {
	mock.Mock
}

// ReadTokenData provides a mock function with given fields: ctx, srcChain, num
func (_m *TokenDataReader) ReadTokenData(ctx context.Context, srcChain ccipocr3.ChainSelector, num ccipocr3.SeqNum) ([][]byte, error) {
	ret := _m.Called(ctx, srcChain, num)

	if len(ret) == 0 {
		panic("no return value specified for ReadTokenData")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.SeqNum) ([][]byte, error)); ok {
		return rf(ctx, srcChain, num)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.SeqNum) [][]byte); ok {
		r0 = rf(ctx, srcChain, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.SeqNum) error); ok {
		r1 = rf(ctx, srcChain, num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenDataReader creates a new instance of TokenDataReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenDataReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenDataReader {
	mock := &TokenDataReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
