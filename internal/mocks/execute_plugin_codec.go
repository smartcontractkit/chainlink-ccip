// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"

	"github.com/stretchr/testify/mock"
)

// ExecutePluginCodec is an autogenerated mock type for the ExecutePluginCodec type
type ExecutePluginCodec struct {
	mock.Mock
}

// Decode provides a mock function with given fields: _a0, _a1
func (_m *ExecutePluginCodec) Decode(_a0 context.Context, _a1 []byte) (ccipocr3.ExecutePluginReport, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 ccipocr3.ExecutePluginReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (ccipocr3.ExecutePluginReport, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ccipocr3.ExecutePluginReport); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(ccipocr3.ExecutePluginReport)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encode provides a mock function with given fields: _a0, _a1
func (_m *ExecutePluginCodec) Encode(_a0 context.Context, _a1 ccipocr3.ExecutePluginReport) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ExecutePluginReport) ([]byte, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ExecutePluginReport) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccipocr3.ExecutePluginReport) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExecutePluginCodec creates a new instance of ExecutePluginCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutePluginCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutePluginCodec {
	mock := &ExecutePluginCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
