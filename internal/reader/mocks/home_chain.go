// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ccipocr3 "github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"

	mapset "github.com/deckarep/golang-set/v2"

	mock "github.com/stretchr/testify/mock"

	reader "github.com/smartcontractkit/chainlink-ccip/internal/reader"

	types "github.com/smartcontractkit/libocr/ragep2p/types"
)

// HomeChain is an autogenerated mock type for the HomeChain type
type HomeChain struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *HomeChain) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllChainConfigs provides a mock function with given fields:
func (_m *HomeChain) GetAllChainConfigs() (map[ccipocr3.ChainSelector]reader.ChainConfig, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllChainConfigs")
	}

	var r0 map[ccipocr3.ChainSelector]reader.ChainConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[ccipocr3.ChainSelector]reader.ChainConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[ccipocr3.ChainSelector]reader.ChainConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ccipocr3.ChainSelector]reader.ChainConfig)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChainConfig provides a mock function with given fields: chainSelector
func (_m *HomeChain) GetChainConfig(chainSelector ccipocr3.ChainSelector) (reader.ChainConfig, error) {
	ret := _m.Called(chainSelector)

	if len(ret) == 0 {
		panic("no return value specified for GetChainConfig")
	}

	var r0 reader.ChainConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(ccipocr3.ChainSelector) (reader.ChainConfig, error)); ok {
		return rf(chainSelector)
	}
	if rf, ok := ret.Get(0).(func(ccipocr3.ChainSelector) reader.ChainConfig); ok {
		r0 = rf(chainSelector)
	} else {
		r0 = ret.Get(0).(reader.ChainConfig)
	}

	if rf, ok := ret.Get(1).(func(ccipocr3.ChainSelector) error); ok {
		r1 = rf(chainSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFChain provides a mock function with given fields:
func (_m *HomeChain) GetFChain() (map[ccipocr3.ChainSelector]int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFChain")
	}

	var r0 map[ccipocr3.ChainSelector]int
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[ccipocr3.ChainSelector]int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[ccipocr3.ChainSelector]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ccipocr3.ChainSelector]int)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKnownCCIPChains provides a mock function with given fields:
func (_m *HomeChain) GetKnownCCIPChains() (mapset.Set[ccipocr3.ChainSelector], error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetKnownCCIPChains")
	}

	var r0 mapset.Set[ccipocr3.ChainSelector]
	var r1 error
	if rf, ok := ret.Get(0).(func() (mapset.Set[ccipocr3.ChainSelector], error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mapset.Set[ccipocr3.ChainSelector]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapset.Set[ccipocr3.ChainSelector])
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOCRConfigs provides a mock function with given fields: ctx, donID, pluginType
func (_m *HomeChain) GetOCRConfigs(ctx context.Context, donID uint32, pluginType uint8) ([]reader.OCR3ConfigWithMeta, error) {
	ret := _m.Called(ctx, donID, pluginType)

	if len(ret) == 0 {
		panic("no return value specified for GetOCRConfigs")
	}

	var r0 []reader.OCR3ConfigWithMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint8) ([]reader.OCR3ConfigWithMeta, error)); ok {
		return rf(ctx, donID, pluginType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint8) []reader.OCR3ConfigWithMeta); ok {
		r0 = rf(ctx, donID, pluginType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]reader.OCR3ConfigWithMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint8) error); ok {
		r1 = rf(ctx, donID, pluginType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupportedChainsForPeer provides a mock function with given fields: id
func (_m *HomeChain) GetSupportedChainsForPeer(id types.PeerID) (mapset.Set[ccipocr3.ChainSelector], error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedChainsForPeer")
	}

	var r0 mapset.Set[ccipocr3.ChainSelector]
	var r1 error
	if rf, ok := ret.Get(0).(func(types.PeerID) (mapset.Set[ccipocr3.ChainSelector], error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(types.PeerID) mapset.Set[ccipocr3.ChainSelector]); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mapset.Set[ccipocr3.ChainSelector])
		}
	}

	if rf, ok := ret.Get(1).(func(types.PeerID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthReport provides a mock function with given fields:
func (_m *HomeChain) HealthReport() map[string]error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthReport")
	}

	var r0 map[string]error
	if rf, ok := ret.Get(0).(func() map[string]error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]error)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *HomeChain) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *HomeChain) Ready() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *HomeChain) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHomeChain creates a new instance of HomeChain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHomeChain(t interface {
	mock.TestingT
	Cleanup(func())
}) *HomeChain {
	mock := &HomeChain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
