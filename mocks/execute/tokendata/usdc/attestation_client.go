// Code generated by mockery v2.43.2. DO NOT EDIT.

package usdc

import (
	context "context"

	ccipocr3 "github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"

	mock "github.com/stretchr/testify/mock"

	usdc "github.com/smartcontractkit/chainlink-ccip/execute/tokendata/usdc"
)

// MockAttestationClient is an autogenerated mock type for the AttestationClient type
type MockAttestationClient struct {
	mock.Mock
}

type MockAttestationClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAttestationClient) EXPECT() *MockAttestationClient_Expecter {
	return &MockAttestationClient_Expecter{mock: &_m.Mock}
}

// Attestations provides a mock function with given fields: ctx, msgs
func (_m *MockAttestationClient) Attestations(ctx context.Context, msgs map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int][]byte) (map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int]usdc.AttestationStatus, error) {
	ret := _m.Called(ctx, msgs)

	if len(ret) == 0 {
		panic("no return value specified for Attestations")
	}

	var r0 map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int]usdc.AttestationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int][]byte) (map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int]usdc.AttestationStatus, error)); ok {
		return rf(ctx, msgs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int][]byte) map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int]usdc.AttestationStatus); ok {
		r0 = rf(ctx, msgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int]usdc.AttestationStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int][]byte) error); ok {
		r1 = rf(ctx, msgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAttestationClient_Attestations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attestations'
type MockAttestationClient_Attestations_Call struct {
	*mock.Call
}

// Attestations is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int][]byte
func (_e *MockAttestationClient_Expecter) Attestations(ctx interface{}, msgs interface{}) *MockAttestationClient_Attestations_Call {
	return &MockAttestationClient_Attestations_Call{Call: _e.mock.On("Attestations", ctx, msgs)}
}

func (_c *MockAttestationClient_Attestations_Call) Run(run func(ctx context.Context, msgs map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int][]byte)) *MockAttestationClient_Attestations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int][]byte))
	})
	return _c
}

func (_c *MockAttestationClient_Attestations_Call) Return(_a0 map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int]usdc.AttestationStatus, _a1 error) *MockAttestationClient_Attestations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAttestationClient_Attestations_Call) RunAndReturn(run func(context.Context, map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int][]byte) (map[ccipocr3.ChainSelector]map[ccipocr3.SeqNum]map[int]usdc.AttestationStatus, error)) *MockAttestationClient_Attestations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAttestationClient creates a new instance of MockAttestationClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAttestationClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAttestationClient {
	mock := &MockAttestationClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
