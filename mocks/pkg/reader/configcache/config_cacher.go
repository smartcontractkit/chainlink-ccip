// Code generated by mockery v2.43.2. DO NOT EDIT.

package configcache

import (
	ccipocr3 "github.com/smartcontractkit/chainlink-ccip/pkg/types/ccipocr3"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigCacher is an autogenerated mock type for the ConfigCacher type
type MockConfigCacher struct {
	mock.Mock
}

type MockConfigCacher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigCacher) EXPECT() *MockConfigCacher_Expecter {
	return &MockConfigCacher_Expecter{mock: &_m.Mock}
}

// GetFeeQuoterConfig provides a mock function with given fields: ctx
func (_m *MockConfigCacher) GetFeeQuoterConfig(ctx context.Context) (ccipocr3.FeeQuoterStaticConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFeeQuoterConfig")
	}

	var r0 ccipocr3.FeeQuoterStaticConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ccipocr3.FeeQuoterStaticConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ccipocr3.FeeQuoterStaticConfig); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ccipocr3.FeeQuoterStaticConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetFeeQuoterConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeQuoterConfig'
type MockConfigCacher_GetFeeQuoterConfig_Call struct {
	*mock.Call
}

// GetFeeQuoterConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigCacher_Expecter) GetFeeQuoterConfig(ctx interface{}) *MockConfigCacher_GetFeeQuoterConfig_Call {
	return &MockConfigCacher_GetFeeQuoterConfig_Call{Call: _e.mock.On("GetFeeQuoterConfig", ctx)}
}

func (_c *MockConfigCacher_GetFeeQuoterConfig_Call) Run(run func(ctx context.Context)) *MockConfigCacher_GetFeeQuoterConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigCacher_GetFeeQuoterConfig_Call) Return(_a0 ccipocr3.FeeQuoterStaticConfig, _a1 error) *MockConfigCacher_GetFeeQuoterConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetFeeQuoterConfig_Call) RunAndReturn(run func(context.Context) (ccipocr3.FeeQuoterStaticConfig, error)) *MockConfigCacher_GetFeeQuoterConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetNativeTokenAddress provides a mock function with given fields: ctx
func (_m *MockConfigCacher) GetNativeTokenAddress(ctx context.Context) (ccipocr3.Bytes, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNativeTokenAddress")
	}

	var r0 ccipocr3.Bytes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ccipocr3.Bytes, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ccipocr3.Bytes); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ccipocr3.Bytes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetNativeTokenAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNativeTokenAddress'
type MockConfigCacher_GetNativeTokenAddress_Call struct {
	*mock.Call
}

// GetNativeTokenAddress is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigCacher_Expecter) GetNativeTokenAddress(ctx interface{}) *MockConfigCacher_GetNativeTokenAddress_Call {
	return &MockConfigCacher_GetNativeTokenAddress_Call{Call: _e.mock.On("GetNativeTokenAddress", ctx)}
}

func (_c *MockConfigCacher_GetNativeTokenAddress_Call) Run(run func(ctx context.Context)) *MockConfigCacher_GetNativeTokenAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigCacher_GetNativeTokenAddress_Call) Return(_a0 ccipocr3.Bytes, _a1 error) *MockConfigCacher_GetNativeTokenAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetNativeTokenAddress_Call) RunAndReturn(run func(context.Context) (ccipocr3.Bytes, error)) *MockConfigCacher_GetNativeTokenAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetOffRampAllChains provides a mock function with given fields: ctx
func (_m *MockConfigCacher) GetOffRampAllChains(ctx context.Context) (ccipocr3.SelectorsAndConfigs, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOffRampAllChains")
	}

	var r0 ccipocr3.SelectorsAndConfigs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ccipocr3.SelectorsAndConfigs, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ccipocr3.SelectorsAndConfigs); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ccipocr3.SelectorsAndConfigs)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetOffRampAllChains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOffRampAllChains'
type MockConfigCacher_GetOffRampAllChains_Call struct {
	*mock.Call
}

// GetOffRampAllChains is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigCacher_Expecter) GetOffRampAllChains(ctx interface{}) *MockConfigCacher_GetOffRampAllChains_Call {
	return &MockConfigCacher_GetOffRampAllChains_Call{Call: _e.mock.On("GetOffRampAllChains", ctx)}
}

func (_c *MockConfigCacher_GetOffRampAllChains_Call) Run(run func(ctx context.Context)) *MockConfigCacher_GetOffRampAllChains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigCacher_GetOffRampAllChains_Call) Return(_a0 ccipocr3.SelectorsAndConfigs, _a1 error) *MockConfigCacher_GetOffRampAllChains_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetOffRampAllChains_Call) RunAndReturn(run func(context.Context) (ccipocr3.SelectorsAndConfigs, error)) *MockConfigCacher_GetOffRampAllChains_Call {
	_c.Call.Return(run)
	return _c
}

// GetOffRampConfigDigest provides a mock function with given fields: ctx, pluginType
func (_m *MockConfigCacher) GetOffRampConfigDigest(ctx context.Context, pluginType uint8) ([32]byte, error) {
	ret := _m.Called(ctx, pluginType)

	if len(ret) == 0 {
		panic("no return value specified for GetOffRampConfigDigest")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint8) ([32]byte, error)); ok {
		return rf(ctx, pluginType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint8) [32]byte); ok {
		r0 = rf(ctx, pluginType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint8) error); ok {
		r1 = rf(ctx, pluginType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetOffRampConfigDigest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOffRampConfigDigest'
type MockConfigCacher_GetOffRampConfigDigest_Call struct {
	*mock.Call
}

// GetOffRampConfigDigest is a helper method to define mock.On call
//   - ctx context.Context
//   - pluginType uint8
func (_e *MockConfigCacher_Expecter) GetOffRampConfigDigest(ctx interface{}, pluginType interface{}) *MockConfigCacher_GetOffRampConfigDigest_Call {
	return &MockConfigCacher_GetOffRampConfigDigest_Call{Call: _e.mock.On("GetOffRampConfigDigest", ctx, pluginType)}
}

func (_c *MockConfigCacher_GetOffRampConfigDigest_Call) Run(run func(ctx context.Context, pluginType uint8)) *MockConfigCacher_GetOffRampConfigDigest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint8))
	})
	return _c
}

func (_c *MockConfigCacher_GetOffRampConfigDigest_Call) Return(_a0 [32]byte, _a1 error) *MockConfigCacher_GetOffRampConfigDigest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetOffRampConfigDigest_Call) RunAndReturn(run func(context.Context, uint8) ([32]byte, error)) *MockConfigCacher_GetOffRampConfigDigest_Call {
	_c.Call.Return(run)
	return _c
}

// GetOffRampDynamicConfig provides a mock function with given fields: ctx
func (_m *MockConfigCacher) GetOffRampDynamicConfig(ctx context.Context) (ccipocr3.OffRampDynamicChainConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOffRampDynamicConfig")
	}

	var r0 ccipocr3.OffRampDynamicChainConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ccipocr3.OffRampDynamicChainConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ccipocr3.OffRampDynamicChainConfig); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ccipocr3.OffRampDynamicChainConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetOffRampDynamicConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOffRampDynamicConfig'
type MockConfigCacher_GetOffRampDynamicConfig_Call struct {
	*mock.Call
}

// GetOffRampDynamicConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigCacher_Expecter) GetOffRampDynamicConfig(ctx interface{}) *MockConfigCacher_GetOffRampDynamicConfig_Call {
	return &MockConfigCacher_GetOffRampDynamicConfig_Call{Call: _e.mock.On("GetOffRampDynamicConfig", ctx)}
}

func (_c *MockConfigCacher_GetOffRampDynamicConfig_Call) Run(run func(ctx context.Context)) *MockConfigCacher_GetOffRampDynamicConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigCacher_GetOffRampDynamicConfig_Call) Return(_a0 ccipocr3.OffRampDynamicChainConfig, _a1 error) *MockConfigCacher_GetOffRampDynamicConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetOffRampDynamicConfig_Call) RunAndReturn(run func(context.Context) (ccipocr3.OffRampDynamicChainConfig, error)) *MockConfigCacher_GetOffRampDynamicConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetOffRampStaticConfig provides a mock function with given fields: ctx
func (_m *MockConfigCacher) GetOffRampStaticConfig(ctx context.Context) (ccipocr3.OffRampStaticChainConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOffRampStaticConfig")
	}

	var r0 ccipocr3.OffRampStaticChainConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ccipocr3.OffRampStaticChainConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ccipocr3.OffRampStaticChainConfig); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ccipocr3.OffRampStaticChainConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetOffRampStaticConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOffRampStaticConfig'
type MockConfigCacher_GetOffRampStaticConfig_Call struct {
	*mock.Call
}

// GetOffRampStaticConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigCacher_Expecter) GetOffRampStaticConfig(ctx interface{}) *MockConfigCacher_GetOffRampStaticConfig_Call {
	return &MockConfigCacher_GetOffRampStaticConfig_Call{Call: _e.mock.On("GetOffRampStaticConfig", ctx)}
}

func (_c *MockConfigCacher_GetOffRampStaticConfig_Call) Run(run func(ctx context.Context)) *MockConfigCacher_GetOffRampStaticConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigCacher_GetOffRampStaticConfig_Call) Return(_a0 ccipocr3.OffRampStaticChainConfig, _a1 error) *MockConfigCacher_GetOffRampStaticConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetOffRampStaticConfig_Call) RunAndReturn(run func(context.Context) (ccipocr3.OffRampStaticChainConfig, error)) *MockConfigCacher_GetOffRampStaticConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnRampDynamicConfig provides a mock function with given fields: ctx
func (_m *MockConfigCacher) GetOnRampDynamicConfig(ctx context.Context) (ccipocr3.GetOnRampDynamicConfigResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOnRampDynamicConfig")
	}

	var r0 ccipocr3.GetOnRampDynamicConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ccipocr3.GetOnRampDynamicConfigResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ccipocr3.GetOnRampDynamicConfigResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ccipocr3.GetOnRampDynamicConfigResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetOnRampDynamicConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnRampDynamicConfig'
type MockConfigCacher_GetOnRampDynamicConfig_Call struct {
	*mock.Call
}

// GetOnRampDynamicConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigCacher_Expecter) GetOnRampDynamicConfig(ctx interface{}) *MockConfigCacher_GetOnRampDynamicConfig_Call {
	return &MockConfigCacher_GetOnRampDynamicConfig_Call{Call: _e.mock.On("GetOnRampDynamicConfig", ctx)}
}

func (_c *MockConfigCacher_GetOnRampDynamicConfig_Call) Run(run func(ctx context.Context)) *MockConfigCacher_GetOnRampDynamicConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigCacher_GetOnRampDynamicConfig_Call) Return(_a0 ccipocr3.GetOnRampDynamicConfigResponse, _a1 error) *MockConfigCacher_GetOnRampDynamicConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetOnRampDynamicConfig_Call) RunAndReturn(run func(context.Context) (ccipocr3.GetOnRampDynamicConfigResponse, error)) *MockConfigCacher_GetOnRampDynamicConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetRMNDigestHeader provides a mock function with given fields: ctx
func (_m *MockConfigCacher) GetRMNDigestHeader(ctx context.Context) (ccipocr3.RMNDigestHeader, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRMNDigestHeader")
	}

	var r0 ccipocr3.RMNDigestHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ccipocr3.RMNDigestHeader, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ccipocr3.RMNDigestHeader); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ccipocr3.RMNDigestHeader)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetRMNDigestHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRMNDigestHeader'
type MockConfigCacher_GetRMNDigestHeader_Call struct {
	*mock.Call
}

// GetRMNDigestHeader is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigCacher_Expecter) GetRMNDigestHeader(ctx interface{}) *MockConfigCacher_GetRMNDigestHeader_Call {
	return &MockConfigCacher_GetRMNDigestHeader_Call{Call: _e.mock.On("GetRMNDigestHeader", ctx)}
}

func (_c *MockConfigCacher_GetRMNDigestHeader_Call) Run(run func(ctx context.Context)) *MockConfigCacher_GetRMNDigestHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigCacher_GetRMNDigestHeader_Call) Return(_a0 ccipocr3.RMNDigestHeader, _a1 error) *MockConfigCacher_GetRMNDigestHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetRMNDigestHeader_Call) RunAndReturn(run func(context.Context) (ccipocr3.RMNDigestHeader, error)) *MockConfigCacher_GetRMNDigestHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetRMNRemoteAddress provides a mock function with given fields: ctx
func (_m *MockConfigCacher) GetRMNRemoteAddress(ctx context.Context) (ccipocr3.Bytes, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRMNRemoteAddress")
	}

	var r0 ccipocr3.Bytes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ccipocr3.Bytes, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ccipocr3.Bytes); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ccipocr3.Bytes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetRMNRemoteAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRMNRemoteAddress'
type MockConfigCacher_GetRMNRemoteAddress_Call struct {
	*mock.Call
}

// GetRMNRemoteAddress is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigCacher_Expecter) GetRMNRemoteAddress(ctx interface{}) *MockConfigCacher_GetRMNRemoteAddress_Call {
	return &MockConfigCacher_GetRMNRemoteAddress_Call{Call: _e.mock.On("GetRMNRemoteAddress", ctx)}
}

func (_c *MockConfigCacher_GetRMNRemoteAddress_Call) Run(run func(ctx context.Context)) *MockConfigCacher_GetRMNRemoteAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigCacher_GetRMNRemoteAddress_Call) Return(_a0 ccipocr3.Bytes, _a1 error) *MockConfigCacher_GetRMNRemoteAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetRMNRemoteAddress_Call) RunAndReturn(run func(context.Context) (ccipocr3.Bytes, error)) *MockConfigCacher_GetRMNRemoteAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetRMNVersionedConfig provides a mock function with given fields: ctx
func (_m *MockConfigCacher) GetRMNVersionedConfig(ctx context.Context) (ccipocr3.VersionedConfigRemote, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRMNVersionedConfig")
	}

	var r0 ccipocr3.VersionedConfigRemote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ccipocr3.VersionedConfigRemote, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ccipocr3.VersionedConfigRemote); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ccipocr3.VersionedConfigRemote)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCacher_GetRMNVersionedConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRMNVersionedConfig'
type MockConfigCacher_GetRMNVersionedConfig_Call struct {
	*mock.Call
}

// GetRMNVersionedConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigCacher_Expecter) GetRMNVersionedConfig(ctx interface{}) *MockConfigCacher_GetRMNVersionedConfig_Call {
	return &MockConfigCacher_GetRMNVersionedConfig_Call{Call: _e.mock.On("GetRMNVersionedConfig", ctx)}
}

func (_c *MockConfigCacher_GetRMNVersionedConfig_Call) Run(run func(ctx context.Context)) *MockConfigCacher_GetRMNVersionedConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigCacher_GetRMNVersionedConfig_Call) Return(_a0 ccipocr3.VersionedConfigRemote, _a1 error) *MockConfigCacher_GetRMNVersionedConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCacher_GetRMNVersionedConfig_Call) RunAndReturn(run func(context.Context) (ccipocr3.VersionedConfigRemote, error)) *MockConfigCacher_GetRMNVersionedConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigCacher creates a new instance of MockConfigCacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigCacher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigCacher {
	mock := &MockConfigCacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
