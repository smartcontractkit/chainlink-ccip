// Code generated by mockery v2.43.2. DO NOT EDIT.

package reader

import (
	context "context"

	ccipocr3 "github.com/smartcontractkit/chainlink-ccip/pkg/types/ccipocr3"

	mock "github.com/stretchr/testify/mock"

	reader "github.com/smartcontractkit/chainlink-ccip/pkg/reader"
)

// MockConfigCache is an autogenerated mock type for the ConfigCache type
type MockConfigCache struct {
	mock.Mock
}

type MockConfigCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigCache) EXPECT() *MockConfigCache_Expecter {
	return &MockConfigCache_Expecter{mock: &_m.Mock}
}

// GetChainConfig provides a mock function with given fields: ctx, chainSel
func (_m *MockConfigCache) GetChainConfig(ctx context.Context, chainSel ccipocr3.ChainSelector) (reader.ChainConfigSnapshot, error) {
	ret := _m.Called(ctx, chainSel)

	if len(ret) == 0 {
		panic("no return value specified for GetChainConfig")
	}

	var r0 reader.ChainConfigSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector) (reader.ChainConfigSnapshot, error)); ok {
		return rf(ctx, chainSel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector) reader.ChainConfigSnapshot); ok {
		r0 = rf(ctx, chainSel)
	} else {
		r0 = ret.Get(0).(reader.ChainConfigSnapshot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccipocr3.ChainSelector) error); ok {
		r1 = rf(ctx, chainSel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCache_GetChainConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainConfig'
type MockConfigCache_GetChainConfig_Call struct {
	*mock.Call
}

// GetChainConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - chainSel ccipocr3.ChainSelector
func (_e *MockConfigCache_Expecter) GetChainConfig(ctx interface{}, chainSel interface{}) *MockConfigCache_GetChainConfig_Call {
	return &MockConfigCache_GetChainConfig_Call{Call: _e.mock.On("GetChainConfig", ctx, chainSel)}
}

func (_c *MockConfigCache_GetChainConfig_Call) Run(run func(ctx context.Context, chainSel ccipocr3.ChainSelector)) *MockConfigCache_GetChainConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccipocr3.ChainSelector))
	})
	return _c
}

func (_c *MockConfigCache_GetChainConfig_Call) Return(_a0 reader.ChainConfigSnapshot, _a1 error) *MockConfigCache_GetChainConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCache_GetChainConfig_Call) RunAndReturn(run func(context.Context, ccipocr3.ChainSelector) (reader.ChainConfigSnapshot, error)) *MockConfigCache_GetChainConfig_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshChainConfig provides a mock function with given fields: ctx, chainSel
func (_m *MockConfigCache) RefreshChainConfig(ctx context.Context, chainSel ccipocr3.ChainSelector) (reader.ChainConfigSnapshot, error) {
	ret := _m.Called(ctx, chainSel)

	if len(ret) == 0 {
		panic("no return value specified for RefreshChainConfig")
	}

	var r0 reader.ChainConfigSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector) (reader.ChainConfigSnapshot, error)); ok {
		return rf(ctx, chainSel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector) reader.ChainConfigSnapshot); ok {
		r0 = rf(ctx, chainSel)
	} else {
		r0 = ret.Get(0).(reader.ChainConfigSnapshot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccipocr3.ChainSelector) error); ok {
		r1 = rf(ctx, chainSel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigCache_RefreshChainConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshChainConfig'
type MockConfigCache_RefreshChainConfig_Call struct {
	*mock.Call
}

// RefreshChainConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - chainSel ccipocr3.ChainSelector
func (_e *MockConfigCache_Expecter) RefreshChainConfig(ctx interface{}, chainSel interface{}) *MockConfigCache_RefreshChainConfig_Call {
	return &MockConfigCache_RefreshChainConfig_Call{Call: _e.mock.On("RefreshChainConfig", ctx, chainSel)}
}

func (_c *MockConfigCache_RefreshChainConfig_Call) Run(run func(ctx context.Context, chainSel ccipocr3.ChainSelector)) *MockConfigCache_RefreshChainConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccipocr3.ChainSelector))
	})
	return _c
}

func (_c *MockConfigCache_RefreshChainConfig_Call) Return(_a0 reader.ChainConfigSnapshot, _a1 error) *MockConfigCache_RefreshChainConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigCache_RefreshChainConfig_Call) RunAndReturn(run func(context.Context, ccipocr3.ChainSelector) (reader.ChainConfigSnapshot, error)) *MockConfigCache_RefreshChainConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigCache creates a new instance of MockConfigCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigCache {
	mock := &MockConfigCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
