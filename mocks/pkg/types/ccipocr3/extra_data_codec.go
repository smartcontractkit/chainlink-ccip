// Code generated by mockery v2.43.2. DO NOT EDIT.

package ccipocr3

import (
	ccipocr3 "github.com/smartcontractkit/chainlink-ccip/pkg/types/ccipocr3"
	mock "github.com/stretchr/testify/mock"
)

// MockExtraDataCodec is an autogenerated mock type for the ExtraDataCodec type
type MockExtraDataCodec struct {
	mock.Mock
}

type MockExtraDataCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExtraDataCodec) EXPECT() *MockExtraDataCodec_Expecter {
	return &MockExtraDataCodec_Expecter{mock: &_m.Mock}
}

// DecodeExtraData provides a mock function with given fields: ExtraArgs, sourceChainSelector
func (_m *MockExtraDataCodec) DecodeExtraData(ExtraArgs ccipocr3.Bytes, sourceChainSelector ccipocr3.ChainSelector) (map[string]interface{}, error) {
	ret := _m.Called(ExtraArgs, sourceChainSelector)

	if len(ret) == 0 {
		panic("no return value specified for DecodeExtraData")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(ccipocr3.Bytes, ccipocr3.ChainSelector) (map[string]interface{}, error)); ok {
		return rf(ExtraArgs, sourceChainSelector)
	}
	if rf, ok := ret.Get(0).(func(ccipocr3.Bytes, ccipocr3.ChainSelector) map[string]interface{}); ok {
		r0 = rf(ExtraArgs, sourceChainSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(ccipocr3.Bytes, ccipocr3.ChainSelector) error); ok {
		r1 = rf(ExtraArgs, sourceChainSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExtraDataCodec_DecodeExtraData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeExtraData'
type MockExtraDataCodec_DecodeExtraData_Call struct {
	*mock.Call
}

// DecodeExtraData is a helper method to define mock.On call
//   - ExtraArgs ccipocr3.Bytes
//   - sourceChainSelector ccipocr3.ChainSelector
func (_e *MockExtraDataCodec_Expecter) DecodeExtraData(ExtraArgs interface{}, sourceChainSelector interface{}) *MockExtraDataCodec_DecodeExtraData_Call {
	return &MockExtraDataCodec_DecodeExtraData_Call{Call: _e.mock.On("DecodeExtraData", ExtraArgs, sourceChainSelector)}
}

func (_c *MockExtraDataCodec_DecodeExtraData_Call) Run(run func(ExtraArgs ccipocr3.Bytes, sourceChainSelector ccipocr3.ChainSelector)) *MockExtraDataCodec_DecodeExtraData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ccipocr3.Bytes), args[1].(ccipocr3.ChainSelector))
	})
	return _c
}

func (_c *MockExtraDataCodec_DecodeExtraData_Call) Return(_a0 map[string]interface{}, _a1 error) *MockExtraDataCodec_DecodeExtraData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExtraDataCodec_DecodeExtraData_Call) RunAndReturn(run func(ccipocr3.Bytes, ccipocr3.ChainSelector) (map[string]interface{}, error)) *MockExtraDataCodec_DecodeExtraData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExtraDataCodec creates a new instance of MockExtraDataCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExtraDataCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExtraDataCodec {
	mock := &MockExtraDataCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
