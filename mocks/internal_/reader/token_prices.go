// Code generated by mockery v2.43.2. DO NOT EDIT.

package reader

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/libocr/offchainreporting2plus/types"
)

// MockTokenPrices is an autogenerated mock type for the TokenPrices type
type MockTokenPrices struct {
	mock.Mock
}

type MockTokenPrices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenPrices) EXPECT() *MockTokenPrices_Expecter {
	return &MockTokenPrices_Expecter{mock: &_m.Mock}
}

// GetTokenPricesUSD provides a mock function with given fields: ctx, tokens
func (_m *MockTokenPrices) GetTokenPricesUSD(ctx context.Context, tokens []types.Account) ([]*big.Int, error) {
	ret := _m.Called(ctx, tokens)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenPricesUSD")
	}

	var r0 []*big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.Account) ([]*big.Int, error)); ok {
		return rf(ctx, tokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []types.Account) []*big.Int); ok {
		r0 = rf(ctx, tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []types.Account) error); ok {
		r1 = rf(ctx, tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenPrices_GetTokenPricesUSD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenPricesUSD'
type MockTokenPrices_GetTokenPricesUSD_Call struct {
	*mock.Call
}

// GetTokenPricesUSD is a helper method to define mock.On call
//   - ctx context.Context
//   - tokens []types.Account
func (_e *MockTokenPrices_Expecter) GetTokenPricesUSD(ctx interface{}, tokens interface{}) *MockTokenPrices_GetTokenPricesUSD_Call {
	return &MockTokenPrices_GetTokenPricesUSD_Call{Call: _e.mock.On("GetTokenPricesUSD", ctx, tokens)}
}

func (_c *MockTokenPrices_GetTokenPricesUSD_Call) Run(run func(ctx context.Context, tokens []types.Account)) *MockTokenPrices_GetTokenPricesUSD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]types.Account))
	})
	return _c
}

func (_c *MockTokenPrices_GetTokenPricesUSD_Call) Return(_a0 []*big.Int, _a1 error) *MockTokenPrices_GetTokenPricesUSD_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenPrices_GetTokenPricesUSD_Call) RunAndReturn(run func(context.Context, []types.Account) ([]*big.Int, error)) *MockTokenPrices_GetTokenPricesUSD_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenPrices creates a new instance of MockTokenPrices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenPrices(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenPrices {
	mock := &MockTokenPrices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
