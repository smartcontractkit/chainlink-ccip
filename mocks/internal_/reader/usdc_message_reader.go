// Code generated by mockery v2.43.2. DO NOT EDIT.

package reader

import (
	context "context"

	ccipocr3 "github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"

	mock "github.com/stretchr/testify/mock"
)

// MockUSDCMessageReader is an autogenerated mock type for the USDCMessageReader type
type MockUSDCMessageReader struct {
	mock.Mock
}

type MockUSDCMessageReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUSDCMessageReader) EXPECT() *MockUSDCMessageReader_Expecter {
	return &MockUSDCMessageReader_Expecter{mock: &_m.Mock}
}

// MessageHashes provides a mock function with given fields: ctx, source, seqNums
func (_m *MockUSDCMessageReader) MessageHashes(ctx context.Context, source ccipocr3.ChainSelector, seqNums []ccipocr3.SeqNum) (map[ccipocr3.SeqNum][][32]byte, error) {
	ret := _m.Called(ctx, source, seqNums)

	if len(ret) == 0 {
		panic("no return value specified for MessageHashes")
	}

	var r0 map[ccipocr3.SeqNum][][32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, []ccipocr3.SeqNum) (map[ccipocr3.SeqNum][][32]byte, error)); ok {
		return rf(ctx, source, seqNums)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, []ccipocr3.SeqNum) map[ccipocr3.SeqNum][][32]byte); ok {
		r0 = rf(ctx, source, seqNums)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[ccipocr3.SeqNum][][32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccipocr3.ChainSelector, []ccipocr3.SeqNum) error); ok {
		r1 = rf(ctx, source, seqNums)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUSDCMessageReader_MessageHashes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MessageHashes'
type MockUSDCMessageReader_MessageHashes_Call struct {
	*mock.Call
}

// MessageHashes is a helper method to define mock.On call
//   - ctx context.Context
//   - source ccipocr3.ChainSelector
//   - seqNums []ccipocr3.SeqNum
func (_e *MockUSDCMessageReader_Expecter) MessageHashes(ctx interface{}, source interface{}, seqNums interface{}) *MockUSDCMessageReader_MessageHashes_Call {
	return &MockUSDCMessageReader_MessageHashes_Call{Call: _e.mock.On("MessageHashes", ctx, source, seqNums)}
}

func (_c *MockUSDCMessageReader_MessageHashes_Call) Run(run func(ctx context.Context, source ccipocr3.ChainSelector, seqNums []ccipocr3.SeqNum)) *MockUSDCMessageReader_MessageHashes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccipocr3.ChainSelector), args[2].([]ccipocr3.SeqNum))
	})
	return _c
}

func (_c *MockUSDCMessageReader_MessageHashes_Call) Return(_a0 map[ccipocr3.SeqNum][][32]byte, _a1 error) *MockUSDCMessageReader_MessageHashes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUSDCMessageReader_MessageHashes_Call) RunAndReturn(run func(context.Context, ccipocr3.ChainSelector, []ccipocr3.SeqNum) (map[ccipocr3.SeqNum][][32]byte, error)) *MockUSDCMessageReader_MessageHashes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUSDCMessageReader creates a new instance of MockUSDCMessageReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUSDCMessageReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUSDCMessageReader {
	mock := &MockUSDCMessageReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
