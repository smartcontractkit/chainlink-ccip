// Code generated by mockery v2.43.2. DO NOT EDIT.

package reader

import (
	context "context"

	ccipocr3 "github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"

	mock "github.com/stretchr/testify/mock"

	plugintypes "github.com/smartcontractkit/chainlink-ccip/plugintypes"

	time "time"
)

// MockCCIP is an autogenerated mock type for the CCIP type
type MockCCIP struct {
	mock.Mock
}

type MockCCIP_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCCIP) EXPECT() *MockCCIP_Expecter {
	return &MockCCIP_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockCCIP) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCCIP_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockCCIP_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCCIP_Expecter) Close(ctx interface{}) *MockCCIP_Close_Call {
	return &MockCCIP_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockCCIP_Close_Call) Run(run func(ctx context.Context)) *MockCCIP_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCCIP_Close_Call) Return(_a0 error) *MockCCIP_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCCIP_Close_Call) RunAndReturn(run func(context.Context) error) *MockCCIP_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CommitReportsGTETimestamp provides a mock function with given fields: ctx, dest, ts, limit
func (_m *MockCCIP) CommitReportsGTETimestamp(ctx context.Context, dest ccipocr3.ChainSelector, ts time.Time, limit int) ([]plugintypes.CommitPluginReportWithMeta, error) {
	ret := _m.Called(ctx, dest, ts, limit)

	if len(ret) == 0 {
		panic("no return value specified for CommitReportsGTETimestamp")
	}

	var r0 []plugintypes.CommitPluginReportWithMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, time.Time, int) ([]plugintypes.CommitPluginReportWithMeta, error)); ok {
		return rf(ctx, dest, ts, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, time.Time, int) []plugintypes.CommitPluginReportWithMeta); ok {
		r0 = rf(ctx, dest, ts, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plugintypes.CommitPluginReportWithMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccipocr3.ChainSelector, time.Time, int) error); ok {
		r1 = rf(ctx, dest, ts, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCCIP_CommitReportsGTETimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitReportsGTETimestamp'
type MockCCIP_CommitReportsGTETimestamp_Call struct {
	*mock.Call
}

// CommitReportsGTETimestamp is a helper method to define mock.On call
//   - ctx context.Context
//   - dest ccipocr3.ChainSelector
//   - ts time.Time
//   - limit int
func (_e *MockCCIP_Expecter) CommitReportsGTETimestamp(ctx interface{}, dest interface{}, ts interface{}, limit interface{}) *MockCCIP_CommitReportsGTETimestamp_Call {
	return &MockCCIP_CommitReportsGTETimestamp_Call{Call: _e.mock.On("CommitReportsGTETimestamp", ctx, dest, ts, limit)}
}

func (_c *MockCCIP_CommitReportsGTETimestamp_Call) Run(run func(ctx context.Context, dest ccipocr3.ChainSelector, ts time.Time, limit int)) *MockCCIP_CommitReportsGTETimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccipocr3.ChainSelector), args[2].(time.Time), args[3].(int))
	})
	return _c
}

func (_c *MockCCIP_CommitReportsGTETimestamp_Call) Return(_a0 []plugintypes.CommitPluginReportWithMeta, _a1 error) *MockCCIP_CommitReportsGTETimestamp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCCIP_CommitReportsGTETimestamp_Call) RunAndReturn(run func(context.Context, ccipocr3.ChainSelector, time.Time, int) ([]plugintypes.CommitPluginReportWithMeta, error)) *MockCCIP_CommitReportsGTETimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// ExecutedMessageRanges provides a mock function with given fields: ctx, source, dest, seqNumRange
func (_m *MockCCIP) ExecutedMessageRanges(ctx context.Context, source ccipocr3.ChainSelector, dest ccipocr3.ChainSelector, seqNumRange ccipocr3.SeqNumRange) ([]ccipocr3.SeqNumRange, error) {
	ret := _m.Called(ctx, source, dest, seqNumRange)

	if len(ret) == 0 {
		panic("no return value specified for ExecutedMessageRanges")
	}

	var r0 []ccipocr3.SeqNumRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.ChainSelector, ccipocr3.SeqNumRange) ([]ccipocr3.SeqNumRange, error)); ok {
		return rf(ctx, source, dest, seqNumRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.ChainSelector, ccipocr3.SeqNumRange) []ccipocr3.SeqNumRange); ok {
		r0 = rf(ctx, source, dest, seqNumRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ccipocr3.SeqNumRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.ChainSelector, ccipocr3.SeqNumRange) error); ok {
		r1 = rf(ctx, source, dest, seqNumRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCCIP_ExecutedMessageRanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutedMessageRanges'
type MockCCIP_ExecutedMessageRanges_Call struct {
	*mock.Call
}

// ExecutedMessageRanges is a helper method to define mock.On call
//   - ctx context.Context
//   - source ccipocr3.ChainSelector
//   - dest ccipocr3.ChainSelector
//   - seqNumRange ccipocr3.SeqNumRange
func (_e *MockCCIP_Expecter) ExecutedMessageRanges(ctx interface{}, source interface{}, dest interface{}, seqNumRange interface{}) *MockCCIP_ExecutedMessageRanges_Call {
	return &MockCCIP_ExecutedMessageRanges_Call{Call: _e.mock.On("ExecutedMessageRanges", ctx, source, dest, seqNumRange)}
}

func (_c *MockCCIP_ExecutedMessageRanges_Call) Run(run func(ctx context.Context, source ccipocr3.ChainSelector, dest ccipocr3.ChainSelector, seqNumRange ccipocr3.SeqNumRange)) *MockCCIP_ExecutedMessageRanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccipocr3.ChainSelector), args[2].(ccipocr3.ChainSelector), args[3].(ccipocr3.SeqNumRange))
	})
	return _c
}

func (_c *MockCCIP_ExecutedMessageRanges_Call) Return(_a0 []ccipocr3.SeqNumRange, _a1 error) *MockCCIP_ExecutedMessageRanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCCIP_ExecutedMessageRanges_Call) RunAndReturn(run func(context.Context, ccipocr3.ChainSelector, ccipocr3.ChainSelector, ccipocr3.SeqNumRange) ([]ccipocr3.SeqNumRange, error)) *MockCCIP_ExecutedMessageRanges_Call {
	_c.Call.Return(run)
	return _c
}

// GasPrices provides a mock function with given fields: ctx, chains
func (_m *MockCCIP) GasPrices(ctx context.Context, chains []ccipocr3.ChainSelector) ([]ccipocr3.BigInt, error) {
	ret := _m.Called(ctx, chains)

	if len(ret) == 0 {
		panic("no return value specified for GasPrices")
	}

	var r0 []ccipocr3.BigInt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ccipocr3.ChainSelector) ([]ccipocr3.BigInt, error)); ok {
		return rf(ctx, chains)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ccipocr3.ChainSelector) []ccipocr3.BigInt); ok {
		r0 = rf(ctx, chains)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ccipocr3.BigInt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ccipocr3.ChainSelector) error); ok {
		r1 = rf(ctx, chains)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCCIP_GasPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GasPrices'
type MockCCIP_GasPrices_Call struct {
	*mock.Call
}

// GasPrices is a helper method to define mock.On call
//   - ctx context.Context
//   - chains []ccipocr3.ChainSelector
func (_e *MockCCIP_Expecter) GasPrices(ctx interface{}, chains interface{}) *MockCCIP_GasPrices_Call {
	return &MockCCIP_GasPrices_Call{Call: _e.mock.On("GasPrices", ctx, chains)}
}

func (_c *MockCCIP_GasPrices_Call) Run(run func(ctx context.Context, chains []ccipocr3.ChainSelector)) *MockCCIP_GasPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ccipocr3.ChainSelector))
	})
	return _c
}

func (_c *MockCCIP_GasPrices_Call) Return(_a0 []ccipocr3.BigInt, _a1 error) *MockCCIP_GasPrices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCCIP_GasPrices_Call) RunAndReturn(run func(context.Context, []ccipocr3.ChainSelector) ([]ccipocr3.BigInt, error)) *MockCCIP_GasPrices_Call {
	_c.Call.Return(run)
	return _c
}

// MsgsBetweenSeqNums provides a mock function with given fields: ctx, chain, seqNumRange
func (_m *MockCCIP) MsgsBetweenSeqNums(ctx context.Context, chain ccipocr3.ChainSelector, seqNumRange ccipocr3.SeqNumRange) ([]ccipocr3.Message, error) {
	ret := _m.Called(ctx, chain, seqNumRange)

	if len(ret) == 0 {
		panic("no return value specified for MsgsBetweenSeqNums")
	}

	var r0 []ccipocr3.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.SeqNumRange) ([]ccipocr3.Message, error)); ok {
		return rf(ctx, chain, seqNumRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.SeqNumRange) []ccipocr3.Message); ok {
		r0 = rf(ctx, chain, seqNumRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ccipocr3.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.SeqNumRange) error); ok {
		r1 = rf(ctx, chain, seqNumRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCCIP_MsgsBetweenSeqNums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MsgsBetweenSeqNums'
type MockCCIP_MsgsBetweenSeqNums_Call struct {
	*mock.Call
}

// MsgsBetweenSeqNums is a helper method to define mock.On call
//   - ctx context.Context
//   - chain ccipocr3.ChainSelector
//   - seqNumRange ccipocr3.SeqNumRange
func (_e *MockCCIP_Expecter) MsgsBetweenSeqNums(ctx interface{}, chain interface{}, seqNumRange interface{}) *MockCCIP_MsgsBetweenSeqNums_Call {
	return &MockCCIP_MsgsBetweenSeqNums_Call{Call: _e.mock.On("MsgsBetweenSeqNums", ctx, chain, seqNumRange)}
}

func (_c *MockCCIP_MsgsBetweenSeqNums_Call) Run(run func(ctx context.Context, chain ccipocr3.ChainSelector, seqNumRange ccipocr3.SeqNumRange)) *MockCCIP_MsgsBetweenSeqNums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccipocr3.ChainSelector), args[2].(ccipocr3.SeqNumRange))
	})
	return _c
}

func (_c *MockCCIP_MsgsBetweenSeqNums_Call) Return(_a0 []ccipocr3.Message, _a1 error) *MockCCIP_MsgsBetweenSeqNums_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCCIP_MsgsBetweenSeqNums_Call) RunAndReturn(run func(context.Context, ccipocr3.ChainSelector, ccipocr3.SeqNumRange) ([]ccipocr3.Message, error)) *MockCCIP_MsgsBetweenSeqNums_Call {
	_c.Call.Return(run)
	return _c
}

// NextSeqNum provides a mock function with given fields: ctx, chains
func (_m *MockCCIP) NextSeqNum(ctx context.Context, chains []ccipocr3.ChainSelector) ([]ccipocr3.SeqNum, error) {
	ret := _m.Called(ctx, chains)

	if len(ret) == 0 {
		panic("no return value specified for NextSeqNum")
	}

	var r0 []ccipocr3.SeqNum
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ccipocr3.ChainSelector) ([]ccipocr3.SeqNum, error)); ok {
		return rf(ctx, chains)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ccipocr3.ChainSelector) []ccipocr3.SeqNum); ok {
		r0 = rf(ctx, chains)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ccipocr3.SeqNum)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ccipocr3.ChainSelector) error); ok {
		r1 = rf(ctx, chains)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCCIP_NextSeqNum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextSeqNum'
type MockCCIP_NextSeqNum_Call struct {
	*mock.Call
}

// NextSeqNum is a helper method to define mock.On call
//   - ctx context.Context
//   - chains []ccipocr3.ChainSelector
func (_e *MockCCIP_Expecter) NextSeqNum(ctx interface{}, chains interface{}) *MockCCIP_NextSeqNum_Call {
	return &MockCCIP_NextSeqNum_Call{Call: _e.mock.On("NextSeqNum", ctx, chains)}
}

func (_c *MockCCIP_NextSeqNum_Call) Run(run func(ctx context.Context, chains []ccipocr3.ChainSelector)) *MockCCIP_NextSeqNum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ccipocr3.ChainSelector))
	})
	return _c
}

func (_c *MockCCIP_NextSeqNum_Call) Return(seqNum []ccipocr3.SeqNum, err error) *MockCCIP_NextSeqNum_Call {
	_c.Call.Return(seqNum, err)
	return _c
}

func (_c *MockCCIP_NextSeqNum_Call) RunAndReturn(run func(context.Context, []ccipocr3.ChainSelector) ([]ccipocr3.SeqNum, error)) *MockCCIP_NextSeqNum_Call {
	_c.Call.Return(run)
	return _c
}

// Nonces provides a mock function with given fields: ctx, source, dest, addresses
func (_m *MockCCIP) Nonces(ctx context.Context, source ccipocr3.ChainSelector, dest ccipocr3.ChainSelector, addresses []string) (map[string]uint64, error) {
	ret := _m.Called(ctx, source, dest, addresses)

	if len(ret) == 0 {
		panic("no return value specified for Nonces")
	}

	var r0 map[string]uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.ChainSelector, []string) (map[string]uint64, error)); ok {
		return rf(ctx, source, dest, addresses)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.ChainSelector, []string) map[string]uint64); ok {
		r0 = rf(ctx, source, dest, addresses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccipocr3.ChainSelector, ccipocr3.ChainSelector, []string) error); ok {
		r1 = rf(ctx, source, dest, addresses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCCIP_Nonces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nonces'
type MockCCIP_Nonces_Call struct {
	*mock.Call
}

// Nonces is a helper method to define mock.On call
//   - ctx context.Context
//   - source ccipocr3.ChainSelector
//   - dest ccipocr3.ChainSelector
//   - addresses []string
func (_e *MockCCIP_Expecter) Nonces(ctx interface{}, source interface{}, dest interface{}, addresses interface{}) *MockCCIP_Nonces_Call {
	return &MockCCIP_Nonces_Call{Call: _e.mock.On("Nonces", ctx, source, dest, addresses)}
}

func (_c *MockCCIP_Nonces_Call) Run(run func(ctx context.Context, source ccipocr3.ChainSelector, dest ccipocr3.ChainSelector, addresses []string)) *MockCCIP_Nonces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccipocr3.ChainSelector), args[2].(ccipocr3.ChainSelector), args[3].([]string))
	})
	return _c
}

func (_c *MockCCIP_Nonces_Call) Return(_a0 map[string]uint64, _a1 error) *MockCCIP_Nonces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCCIP_Nonces_Call) RunAndReturn(run func(context.Context, ccipocr3.ChainSelector, ccipocr3.ChainSelector, []string) (map[string]uint64, error)) *MockCCIP_Nonces_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: ctx
func (_m *MockCCIP) Sync(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCCIP_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockCCIP_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCCIP_Expecter) Sync(ctx interface{}) *MockCCIP_Sync_Call {
	return &MockCCIP_Sync_Call{Call: _e.mock.On("Sync", ctx)}
}

func (_c *MockCCIP_Sync_Call) Run(run func(ctx context.Context)) *MockCCIP_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCCIP_Sync_Call) Return(_a0 bool, _a1 error) *MockCCIP_Sync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCCIP_Sync_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockCCIP_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCCIP creates a new instance of MockCCIP. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCCIP(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCCIP {
	mock := &MockCCIP{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
