// Code generated by mockery v2.43.2. DO NOT EDIT.

package reader

import (
	ccipocr3 "github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-ccip/commit/merkleroot/rmn/types"
)

// MockRMNRemote is an autogenerated mock type for the RMNRemote type
type MockRMNRemote struct {
	mock.Mock
}

type MockRMNRemote_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRMNRemote) EXPECT() *MockRMNRemote_Expecter {
	return &MockRMNRemote_Expecter{mock: &_m.Mock}
}

// GetMinSigners provides a mock function with given fields:
func (_m *MockRMNRemote) GetMinSigners() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMinSigners")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockRMNRemote_GetMinSigners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMinSigners'
type MockRMNRemote_GetMinSigners_Call struct {
	*mock.Call
}

// GetMinSigners is a helper method to define mock.On call
func (_e *MockRMNRemote_Expecter) GetMinSigners() *MockRMNRemote_GetMinSigners_Call {
	return &MockRMNRemote_GetMinSigners_Call{Call: _e.mock.On("GetMinSigners")}
}

func (_c *MockRMNRemote_GetMinSigners_Call) Run(run func()) *MockRMNRemote_GetMinSigners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRMNRemote_GetMinSigners_Call) Return(_a0 uint64) *MockRMNRemote_GetMinSigners_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRMNRemote_GetMinSigners_Call) RunAndReturn(run func() uint64) *MockRMNRemote_GetMinSigners_Call {
	_c.Call.Return(run)
	return _c
}

// GetRmnHomeConfigDigest provides a mock function with given fields:
func (_m *MockRMNRemote) GetRmnHomeConfigDigest() ccipocr3.Bytes32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRmnHomeConfigDigest")
	}

	var r0 ccipocr3.Bytes32
	if rf, ok := ret.Get(0).(func() ccipocr3.Bytes32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ccipocr3.Bytes32)
		}
	}

	return r0
}

// MockRMNRemote_GetRmnHomeConfigDigest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRmnHomeConfigDigest'
type MockRMNRemote_GetRmnHomeConfigDigest_Call struct {
	*mock.Call
}

// GetRmnHomeConfigDigest is a helper method to define mock.On call
func (_e *MockRMNRemote_Expecter) GetRmnHomeConfigDigest() *MockRMNRemote_GetRmnHomeConfigDigest_Call {
	return &MockRMNRemote_GetRmnHomeConfigDigest_Call{Call: _e.mock.On("GetRmnHomeConfigDigest")}
}

func (_c *MockRMNRemote_GetRmnHomeConfigDigest_Call) Run(run func()) *MockRMNRemote_GetRmnHomeConfigDigest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRMNRemote_GetRmnHomeConfigDigest_Call) Return(_a0 ccipocr3.Bytes32) *MockRMNRemote_GetRmnHomeConfigDigest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRMNRemote_GetRmnHomeConfigDigest_Call) RunAndReturn(run func() ccipocr3.Bytes32) *MockRMNRemote_GetRmnHomeConfigDigest_Call {
	_c.Call.Return(run)
	return _c
}

// GetRmnRemoteContractAddress provides a mock function with given fields:
func (_m *MockRMNRemote) GetRmnRemoteContractAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRmnRemoteContractAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRMNRemote_GetRmnRemoteContractAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRmnRemoteContractAddress'
type MockRMNRemote_GetRmnRemoteContractAddress_Call struct {
	*mock.Call
}

// GetRmnRemoteContractAddress is a helper method to define mock.On call
func (_e *MockRMNRemote_Expecter) GetRmnRemoteContractAddress() *MockRMNRemote_GetRmnRemoteContractAddress_Call {
	return &MockRMNRemote_GetRmnRemoteContractAddress_Call{Call: _e.mock.On("GetRmnRemoteContractAddress")}
}

func (_c *MockRMNRemote_GetRmnRemoteContractAddress_Call) Run(run func()) *MockRMNRemote_GetRmnRemoteContractAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRMNRemote_GetRmnRemoteContractAddress_Call) Return(_a0 string) *MockRMNRemote_GetRmnRemoteContractAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRMNRemote_GetRmnRemoteContractAddress_Call) RunAndReturn(run func() string) *MockRMNRemote_GetRmnRemoteContractAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetRmnReportVersion provides a mock function with given fields:
func (_m *MockRMNRemote) GetRmnReportVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRmnReportVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRMNRemote_GetRmnReportVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRmnReportVersion'
type MockRMNRemote_GetRmnReportVersion_Call struct {
	*mock.Call
}

// GetRmnReportVersion is a helper method to define mock.On call
func (_e *MockRMNRemote_Expecter) GetRmnReportVersion() *MockRMNRemote_GetRmnReportVersion_Call {
	return &MockRMNRemote_GetRmnReportVersion_Call{Call: _e.mock.On("GetRmnReportVersion")}
}

func (_c *MockRMNRemote_GetRmnReportVersion_Call) Run(run func()) *MockRMNRemote_GetRmnReportVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRMNRemote_GetRmnReportVersion_Call) Return(_a0 string) *MockRMNRemote_GetRmnReportVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRMNRemote_GetRmnReportVersion_Call) RunAndReturn(run func() string) *MockRMNRemote_GetRmnReportVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignersInfo provides a mock function with given fields:
func (_m *MockRMNRemote) GetSignersInfo() []types.RemoteSignerInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSignersInfo")
	}

	var r0 []types.RemoteSignerInfo
	if rf, ok := ret.Get(0).(func() []types.RemoteSignerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.RemoteSignerInfo)
		}
	}

	return r0
}

// MockRMNRemote_GetSignersInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignersInfo'
type MockRMNRemote_GetSignersInfo_Call struct {
	*mock.Call
}

// GetSignersInfo is a helper method to define mock.On call
func (_e *MockRMNRemote_Expecter) GetSignersInfo() *MockRMNRemote_GetSignersInfo_Call {
	return &MockRMNRemote_GetSignersInfo_Call{Call: _e.mock.On("GetSignersInfo")}
}

func (_c *MockRMNRemote_GetSignersInfo_Call) Run(run func()) *MockRMNRemote_GetSignersInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRMNRemote_GetSignersInfo_Call) Return(_a0 []types.RemoteSignerInfo) *MockRMNRemote_GetSignersInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRMNRemote_GetSignersInfo_Call) RunAndReturn(run func() []types.RemoteSignerInfo) *MockRMNRemote_GetSignersInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRMNRemote creates a new instance of MockRMNRemote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRMNRemote(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRMNRemote {
	mock := &MockRMNRemote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
