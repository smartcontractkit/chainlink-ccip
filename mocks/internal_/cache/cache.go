// Code generated by mockery v2.43.2. DO NOT EDIT.

package cache

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache[V interface{}] struct {
	mock.Mock
}

type MockCache_Expecter[V interface{}] struct {
	mock *mock.Mock
}

func (_m *MockCache[V]) EXPECT() *MockCache_Expecter[V] {
	return &MockCache_Expecter[V]{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: key
func (_m *MockCache[V]) Delete(key string) {
	_m.Called(key)
}

// MockCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCache_Delete_Call[V interface{}] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *MockCache_Expecter[V]) Delete(key interface{}) *MockCache_Delete_Call[V] {
	return &MockCache_Delete_Call[V]{Call: _e.mock.On("Delete", key)}
}

func (_c *MockCache_Delete_Call[V]) Run(run func(key string)) *MockCache_Delete_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_Delete_Call[V]) Return() *MockCache_Delete_Call[V] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Delete_Call[V]) RunAndReturn(run func(string)) *MockCache_Delete_Call[V] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockCache[V]) Get(key string) (V, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 V
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (V, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) V); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(V)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call[V interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockCache_Expecter[V]) Get(key interface{}) *MockCache_Get_Call[V] {
	return &MockCache_Get_Call[V]{Call: _e.mock.On("Get", key)}
}

func (_c *MockCache_Get_Call[V]) Run(run func(key string)) *MockCache_Get_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_Get_Call[V]) Return(_a0 V, _a1 bool) *MockCache_Get_Call[V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_Get_Call[V]) RunAndReturn(run func(string) (V, bool)) *MockCache_Get_Call[V] {
	_c.Call.Return(run)
	return _c
}

// Items provides a mock function with given fields:
func (_m *MockCache[V]) Items() map[string]V {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Items")
	}

	var r0 map[string]V
	if rf, ok := ret.Get(0).(func() map[string]V); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]V)
		}
	}

	return r0
}

// MockCache_Items_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Items'
type MockCache_Items_Call[V interface{}] struct {
	*mock.Call
}

// Items is a helper method to define mock.On call
func (_e *MockCache_Expecter[V]) Items() *MockCache_Items_Call[V] {
	return &MockCache_Items_Call[V]{Call: _e.mock.On("Items")}
}

func (_c *MockCache_Items_Call[V]) Run(run func()) *MockCache_Items_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Items_Call[V]) Return(_a0 map[string]V) *MockCache_Items_Call[V] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Items_Call[V]) RunAndReturn(run func() map[string]V) *MockCache_Items_Call[V] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value, expiration
func (_m *MockCache[V]) Set(key string, value V, expiration time.Duration) {
	_m.Called(key, value, expiration)
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call[V interface{}] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value V
//   - expiration time.Duration
func (_e *MockCache_Expecter[V]) Set(key interface{}, value interface{}, expiration interface{}) *MockCache_Set_Call[V] {
	return &MockCache_Set_Call[V]{Call: _e.mock.On("Set", key, value, expiration)}
}

func (_c *MockCache_Set_Call[V]) Run(run func(key string, value V, expiration time.Duration)) *MockCache_Set_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(V), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockCache_Set_Call[V]) Return() *MockCache_Set_Call[V] {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Set_Call[V]) RunAndReturn(run func(string, V, time.Duration)) *MockCache_Set_Call[V] {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache[V interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache[V] {
	mock := &MockCache[V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
