// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.28.0
// source: rmn_offchain.proto

package rmnpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LaneSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceChainSelector uint64 `protobuf:"varint,1,opt,name=source_chain_selector,json=sourceChainSelector,proto3" json:"source_chain_selector,omitempty"`
	OnrampAddress       []byte `protobuf:"bytes,2,opt,name=onramp_address,json=onrampAddress,proto3" json:"onramp_address,omitempty"`
}

func (x *LaneSource) Reset() {
	*x = LaneSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaneSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaneSource) ProtoMessage() {}

func (x *LaneSource) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaneSource.ProtoReflect.Descriptor instead.
func (*LaneSource) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{0}
}

func (x *LaneSource) GetSourceChainSelector() uint64 {
	if x != nil {
		return x.SourceChainSelector
	}
	return 0
}

func (x *LaneSource) GetOnrampAddress() []byte {
	if x != nil {
		return x.OnrampAddress
	}
	return nil
}

type LaneDest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestChainSelector uint64 `protobuf:"varint,1,opt,name=dest_chain_selector,json=destChainSelector,proto3" json:"dest_chain_selector,omitempty"`
	OfframpAddress    []byte `protobuf:"bytes,2,opt,name=offramp_address,json=offrampAddress,proto3" json:"offramp_address,omitempty"`
}

func (x *LaneDest) Reset() {
	*x = LaneDest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaneDest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaneDest) ProtoMessage() {}

func (x *LaneDest) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaneDest.ProtoReflect.Descriptor instead.
func (*LaneDest) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{1}
}

func (x *LaneDest) GetDestChainSelector() uint64 {
	if x != nil {
		return x.DestChainSelector
	}
	return 0
}

func (x *LaneDest) GetOfframpAddress() []byte {
	if x != nil {
		return x.OfframpAddress
	}
	return nil
}

type ClosedInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinMsgNr uint64 `protobuf:"varint,1,opt,name=min_msg_nr,json=minMsgNr,proto3" json:"min_msg_nr,omitempty"`
	MaxMsgNr uint64 `protobuf:"varint,2,opt,name=max_msg_nr,json=maxMsgNr,proto3" json:"max_msg_nr,omitempty"`
}

func (x *ClosedInterval) Reset() {
	*x = ClosedInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosedInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosedInterval) ProtoMessage() {}

func (x *ClosedInterval) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosedInterval.ProtoReflect.Descriptor instead.
func (*ClosedInterval) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{2}
}

func (x *ClosedInterval) GetMinMsgNr() uint64 {
	if x != nil {
		return x.MinMsgNr
	}
	return 0
}

func (x *ClosedInterval) GetMaxMsgNr() uint64 {
	if x != nil {
		return x.MaxMsgNr
	}
	return 0
}

type FixedDestLaneUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaneSource     *LaneSource     `protobuf:"bytes,1,opt,name=lane_source,json=laneSource,proto3" json:"lane_source,omitempty"`
	ClosedInterval *ClosedInterval `protobuf:"bytes,2,opt,name=closed_interval,json=closedInterval,proto3" json:"closed_interval,omitempty"`
}

func (x *FixedDestLaneUpdateRequest) Reset() {
	*x = FixedDestLaneUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedDestLaneUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedDestLaneUpdateRequest) ProtoMessage() {}

func (x *FixedDestLaneUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedDestLaneUpdateRequest.ProtoReflect.Descriptor instead.
func (*FixedDestLaneUpdateRequest) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{3}
}

func (x *FixedDestLaneUpdateRequest) GetLaneSource() *LaneSource {
	if x != nil {
		return x.LaneSource
	}
	return nil
}

func (x *FixedDestLaneUpdateRequest) GetClosedInterval() *ClosedInterval {
	if x != nil {
		return x.ClosedInterval
	}
	return nil
}

type FixedDestLaneUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaneSource     *LaneSource     `protobuf:"bytes,1,opt,name=lane_source,json=laneSource,proto3" json:"lane_source,omitempty"`
	ClosedInterval *ClosedInterval `protobuf:"bytes,2,opt,name=closed_interval,json=closedInterval,proto3" json:"closed_interval,omitempty"`
	Root           []byte          `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *FixedDestLaneUpdate) Reset() {
	*x = FixedDestLaneUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedDestLaneUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedDestLaneUpdate) ProtoMessage() {}

func (x *FixedDestLaneUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedDestLaneUpdate.ProtoReflect.Descriptor instead.
func (*FixedDestLaneUpdate) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{4}
}

func (x *FixedDestLaneUpdate) GetLaneSource() *LaneSource {
	if x != nil {
		return x.LaneSource
	}
	return nil
}

func (x *FixedDestLaneUpdate) GetClosedInterval() *ClosedInterval {
	if x != nil {
		return x.ClosedInterval
	}
	return nil
}

func (x *FixedDestLaneUpdate) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

type ObservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaneDest                    *LaneDest                     `protobuf:"bytes,1,opt,name=lane_dest,json=laneDest,proto3" json:"lane_dest,omitempty"` // could be implied
	FixedDestLaneUpdateRequests []*FixedDestLaneUpdateRequest `protobuf:"bytes,2,rep,name=fixed_dest_lane_update_requests,json=fixedDestLaneUpdateRequests,proto3" json:"fixed_dest_lane_update_requests,omitempty"`
}

func (x *ObservationRequest) Reset() {
	*x = ObservationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRequest) ProtoMessage() {}

func (x *ObservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRequest.ProtoReflect.Descriptor instead.
func (*ObservationRequest) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{5}
}

func (x *ObservationRequest) GetLaneDest() *LaneDest {
	if x != nil {
		return x.LaneDest
	}
	return nil
}

func (x *ObservationRequest) GetFixedDestLaneUpdateRequests() []*FixedDestLaneUpdateRequest {
	if x != nil {
		return x.FixedDestLaneUpdateRequests
	}
	return nil
}

// TODO: For terseness, we might want to split this into two messages down the line:
// An observation containing only the things that cannot be inferred
// An observation representing the exact message that is signed by the RMN node
type Observation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RmnHomeContractConfigDigest []byte                 `protobuf:"bytes,1,opt,name=rmn_home_contract_config_digest,json=rmnHomeContractConfigDigest,proto3" json:"rmn_home_contract_config_digest,omitempty"` // could be implied
	LaneDest                    *LaneDest              `protobuf:"bytes,2,opt,name=lane_dest,json=laneDest,proto3" json:"lane_dest,omitempty"`                                                                // could be implied
	FixedDestLaneUpdates        []*FixedDestLaneUpdate `protobuf:"bytes,3,rep,name=fixed_dest_lane_updates,json=fixedDestLaneUpdates,proto3" json:"fixed_dest_lane_updates,omitempty"`
	Timestamp                   uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Observation) Reset() {
	*x = Observation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{6}
}

func (x *Observation) GetRmnHomeContractConfigDigest() []byte {
	if x != nil {
		return x.RmnHomeContractConfigDigest
	}
	return nil
}

func (x *Observation) GetLaneDest() *LaneDest {
	if x != nil {
		return x.LaneDest
	}
	return nil
}

func (x *Observation) GetFixedDestLaneUpdates() []*FixedDestLaneUpdate {
	if x != nil {
		return x.FixedDestLaneUpdates
	}
	return nil
}

func (x *Observation) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SignedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observation *Observation `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	Signature   []byte       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"` // sign(sha256("chainlink ccip 1.6 rmn observation"|sha256(observation)))
}

func (x *SignedObservation) Reset() {
	*x = SignedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedObservation) ProtoMessage() {}

func (x *SignedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedObservation.ProtoReflect.Descriptor instead.
func (*SignedObservation) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{7}
}

func (x *SignedObservation) GetObservation() *Observation {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *SignedObservation) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AttributedSignedObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedObservation *SignedObservation `protobuf:"bytes,1,opt,name=signed_observation,json=signedObservation,proto3" json:"signed_observation,omitempty"`
	SignerNodeIndex   uint32             `protobuf:"varint,2,opt,name=signer_node_index,json=signerNodeIndex,proto3" json:"signer_node_index,omitempty"`
}

func (x *AttributedSignedObservation) Reset() {
	*x = AttributedSignedObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributedSignedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedSignedObservation) ProtoMessage() {}

func (x *AttributedSignedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedSignedObservation.ProtoReflect.Descriptor instead.
func (*AttributedSignedObservation) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{8}
}

func (x *AttributedSignedObservation) GetSignedObservation() *SignedObservation {
	if x != nil {
		return x.SignedObservation
	}
	return nil
}

func (x *AttributedSignedObservation) GetSignerNodeIndex() uint32 {
	if x != nil {
		return x.SignerNodeIndex
	}
	return 0
}

// Signed along with the report
type ReportContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvmDestChainId              uint64    `protobuf:"varint,1,opt,name=evm_dest_chain_id,json=evmDestChainId,proto3" json:"evm_dest_chain_id,omitempty"`
	RmnRemoteContractAddress    []byte    `protobuf:"bytes,2,opt,name=rmn_remote_contract_address,json=rmnRemoteContractAddress,proto3" json:"rmn_remote_contract_address,omitempty"`
	RmnHomeContractConfigDigest []byte    `protobuf:"bytes,3,opt,name=rmn_home_contract_config_digest,json=rmnHomeContractConfigDigest,proto3" json:"rmn_home_contract_config_digest,omitempty"` // can lag behind home chain to support blue/green
	LaneDest                    *LaneDest `protobuf:"bytes,4,opt,name=lane_dest,json=laneDest,proto3" json:"lane_dest,omitempty"`
}

func (x *ReportContext) Reset() {
	*x = ReportContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportContext) ProtoMessage() {}

func (x *ReportContext) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportContext.ProtoReflect.Descriptor instead.
func (*ReportContext) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{9}
}

func (x *ReportContext) GetEvmDestChainId() uint64 {
	if x != nil {
		return x.EvmDestChainId
	}
	return 0
}

func (x *ReportContext) GetRmnRemoteContractAddress() []byte {
	if x != nil {
		return x.RmnRemoteContractAddress
	}
	return nil
}

func (x *ReportContext) GetRmnHomeContractConfigDigest() []byte {
	if x != nil {
		return x.RmnHomeContractConfigDigest
	}
	return nil
}

func (x *ReportContext) GetLaneDest() *LaneDest {
	if x != nil {
		return x.LaneDest
	}
	return nil
}

type ReportSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context                      *ReportContext                 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	AttributedSignedObservations []*AttributedSignedObservation `protobuf:"bytes,2,rep,name=attributed_signed_observations,json=attributedSignedObservations,proto3" json:"attributed_signed_observations,omitempty"`
}

func (x *ReportSignatureRequest) Reset() {
	*x = ReportSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSignatureRequest) ProtoMessage() {}

func (x *ReportSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSignatureRequest.ProtoReflect.Descriptor instead.
func (*ReportSignatureRequest) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{10}
}

func (x *ReportSignatureRequest) GetContext() *ReportContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ReportSignatureRequest) GetAttributedSignedObservations() []*AttributedSignedObservation {
	if x != nil {
		return x.AttributedSignedObservations
	}
	return nil
}

type ReportSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bytes signed_hash = 1; // needless since we have a request_id
	Signature *EcdsaSignature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ReportSignature) Reset() {
	*x = ReportSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSignature) ProtoMessage() {}

func (x *ReportSignature) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSignature.ProtoReflect.Descriptor instead.
func (*ReportSignature) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{11}
}

func (x *ReportSignature) GetSignature() *EcdsaSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// CCIP -> RMN
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are assignable to Request:
	//
	//	*Request_ObservationRequest
	//	*Request_ReportSignatureRequest
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{12}
}

func (x *Request) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *Request) GetObservationRequest() *ObservationRequest {
	if x, ok := x.GetRequest().(*Request_ObservationRequest); ok {
		return x.ObservationRequest
	}
	return nil
}

func (x *Request) GetReportSignatureRequest() *ReportSignatureRequest {
	if x, ok := x.GetRequest().(*Request_ReportSignatureRequest); ok {
		return x.ReportSignatureRequest
	}
	return nil
}

type isRequest_Request interface {
	isRequest_Request()
}

type Request_ObservationRequest struct {
	ObservationRequest *ObservationRequest `protobuf:"bytes,2,opt,name=observation_request,json=observationRequest,proto3,oneof"`
}

type Request_ReportSignatureRequest struct {
	ReportSignatureRequest *ReportSignatureRequest `protobuf:"bytes,3,opt,name=report_signature_request,json=reportSignatureRequest,proto3,oneof"`
}

func (*Request_ObservationRequest) isRequest_Request() {}

func (*Request_ReportSignatureRequest) isRequest_Request() {}

// RMN -> CCIP
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are assignable to Response:
	//
	//	*Response_SignedObservation
	//	*Response_ReportSignature
	Response isResponse_Response `protobuf_oneof:"response"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{13}
}

func (x *Response) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *Response) GetSignedObservation() *SignedObservation {
	if x, ok := x.GetResponse().(*Response_SignedObservation); ok {
		return x.SignedObservation
	}
	return nil
}

func (x *Response) GetReportSignature() *ReportSignature {
	if x, ok := x.GetResponse().(*Response_ReportSignature); ok {
		return x.ReportSignature
	}
	return nil
}

type isResponse_Response interface {
	isResponse_Response()
}

type Response_SignedObservation struct {
	SignedObservation *SignedObservation `protobuf:"bytes,2,opt,name=signed_observation,json=signedObservation,proto3,oneof"`
}

type Response_ReportSignature struct {
	ReportSignature *ReportSignature `protobuf:"bytes,3,opt,name=report_signature,json=reportSignature,proto3,oneof"`
}

func (*Response_SignedObservation) isResponse_Response() {}

func (*Response_ReportSignature) isResponse_Response() {}

type EcdsaSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *EcdsaSignature) Reset() {
	*x = EcdsaSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcdsaSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcdsaSignature) ProtoMessage() {}

func (x *EcdsaSignature) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcdsaSignature.ProtoReflect.Descriptor instead.
func (*EcdsaSignature) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{14}
}

func (x *EcdsaSignature) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *EcdsaSignature) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

// To be sent by the OCR leader in a "BuildingReports" round.
type ReportingPluginQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedDestLaneUpdates []*FixedDestLaneUpdate `protobuf:"bytes,1,rep,name=fixed_dest_lane_updates,json=fixedDestLaneUpdates,proto3" json:"fixed_dest_lane_updates,omitempty"`
	EcdsaSignatures      []*EcdsaSignature      `protobuf:"bytes,2,rep,name=ecdsa_signatures,json=ecdsaSignatures,proto3" json:"ecdsa_signatures,omitempty"`
}

func (x *ReportingPluginQuery) Reset() {
	*x = ReportingPluginQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rmn_offchain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportingPluginQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingPluginQuery) ProtoMessage() {}

func (x *ReportingPluginQuery) ProtoReflect() protoreflect.Message {
	mi := &file_rmn_offchain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingPluginQuery.ProtoReflect.Descriptor instead.
func (*ReportingPluginQuery) Descriptor() ([]byte, []int) {
	return file_rmn_offchain_proto_rawDescGZIP(), []int{15}
}

func (x *ReportingPluginQuery) GetFixedDestLaneUpdates() []*FixedDestLaneUpdate {
	if x != nil {
		return x.FixedDestLaneUpdates
	}
	return nil
}

func (x *ReportingPluginQuery) GetEcdsaSignatures() []*EcdsaSignature {
	if x != nil {
		return x.EcdsaSignatures
	}
	return nil
}

var File_rmn_offchain_proto protoreflect.FileDescriptor

var file_rmn_offchain_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x67, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6e, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x6e,
	0x72, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x63, 0x0a, 0x08, 0x4c,
	0x61, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x72, 0x61,
	0x6d, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x6f, 0x66, 0x66, 0x72, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x4c, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x4e, 0x72,
	0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x4e, 0x72, 0x22, 0x9e,
	0x01, 0x0a, 0x1a, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0b, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x6c, 0x61,
	0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0xab, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6d,
	0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0xb9, 0x01,
	0x0a, 0x12, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66,
	0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x1f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1b, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x0b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x6d, 0x6e,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1b, 0x72, 0x6d, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x61,
	0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x14, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x6e, 0x0a, 0x11,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x99, 0x01, 0x0a,
	0x1b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x12,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x65, 0x76,
	0x6d, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x76, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x6d, 0x6e, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x72, 0x6d, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x6d, 0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x72,
	0x6d, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4c, 0x61, 0x6e,
	0x65, 0x44, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x74, 0x22,
	0xc0, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6d,
	0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x6f, 0x0a, 0x1e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x6d, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f,
	0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x45, 0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xea, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x13,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x6d, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x60, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd3,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x10,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x0e, 0x45, 0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x17, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72,
	0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x14, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x45,
	0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x65,
	0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x0a,
	0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x72, 0x6d, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_rmn_offchain_proto_rawDescOnce sync.Once
	file_rmn_offchain_proto_rawDescData = file_rmn_offchain_proto_rawDesc
)

func file_rmn_offchain_proto_rawDescGZIP() []byte {
	file_rmn_offchain_proto_rawDescOnce.Do(func() {
		file_rmn_offchain_proto_rawDescData = protoimpl.X.CompressGZIP(file_rmn_offchain_proto_rawDescData)
	})
	return file_rmn_offchain_proto_rawDescData
}

var file_rmn_offchain_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_rmn_offchain_proto_goTypes = []interface{}{
	(*LaneSource)(nil),                  // 0: rmn_offchain.LaneSource
	(*LaneDest)(nil),                    // 1: rmn_offchain.LaneDest
	(*ClosedInterval)(nil),              // 2: rmn_offchain.ClosedInterval
	(*FixedDestLaneUpdateRequest)(nil),  // 3: rmn_offchain.FixedDestLaneUpdateRequest
	(*FixedDestLaneUpdate)(nil),         // 4: rmn_offchain.FixedDestLaneUpdate
	(*ObservationRequest)(nil),          // 5: rmn_offchain.ObservationRequest
	(*Observation)(nil),                 // 6: rmn_offchain.Observation
	(*SignedObservation)(nil),           // 7: rmn_offchain.SignedObservation
	(*AttributedSignedObservation)(nil), // 8: rmn_offchain.AttributedSignedObservation
	(*ReportContext)(nil),               // 9: rmn_offchain.ReportContext
	(*ReportSignatureRequest)(nil),      // 10: rmn_offchain.ReportSignatureRequest
	(*ReportSignature)(nil),             // 11: rmn_offchain.ReportSignature
	(*Request)(nil),                     // 12: rmn_offchain.Request
	(*Response)(nil),                    // 13: rmn_offchain.Response
	(*EcdsaSignature)(nil),              // 14: rmn_offchain.EcdsaSignature
	(*ReportingPluginQuery)(nil),        // 15: rmn_offchain.ReportingPluginQuery
}
var file_rmn_offchain_proto_depIdxs = []int32{
	0,  // 0: rmn_offchain.FixedDestLaneUpdateRequest.lane_source:type_name -> rmn_offchain.LaneSource
	2,  // 1: rmn_offchain.FixedDestLaneUpdateRequest.closed_interval:type_name -> rmn_offchain.ClosedInterval
	0,  // 2: rmn_offchain.FixedDestLaneUpdate.lane_source:type_name -> rmn_offchain.LaneSource
	2,  // 3: rmn_offchain.FixedDestLaneUpdate.closed_interval:type_name -> rmn_offchain.ClosedInterval
	1,  // 4: rmn_offchain.ObservationRequest.lane_dest:type_name -> rmn_offchain.LaneDest
	3,  // 5: rmn_offchain.ObservationRequest.fixed_dest_lane_update_requests:type_name -> rmn_offchain.FixedDestLaneUpdateRequest
	1,  // 6: rmn_offchain.Observation.lane_dest:type_name -> rmn_offchain.LaneDest
	4,  // 7: rmn_offchain.Observation.fixed_dest_lane_updates:type_name -> rmn_offchain.FixedDestLaneUpdate
	6,  // 8: rmn_offchain.SignedObservation.observation:type_name -> rmn_offchain.Observation
	7,  // 9: rmn_offchain.AttributedSignedObservation.signed_observation:type_name -> rmn_offchain.SignedObservation
	1,  // 10: rmn_offchain.ReportContext.lane_dest:type_name -> rmn_offchain.LaneDest
	9,  // 11: rmn_offchain.ReportSignatureRequest.context:type_name -> rmn_offchain.ReportContext
	8,  // 12: rmn_offchain.ReportSignatureRequest.attributed_signed_observations:type_name -> rmn_offchain.AttributedSignedObservation
	14, // 13: rmn_offchain.ReportSignature.signature:type_name -> rmn_offchain.EcdsaSignature
	5,  // 14: rmn_offchain.Request.observation_request:type_name -> rmn_offchain.ObservationRequest
	10, // 15: rmn_offchain.Request.report_signature_request:type_name -> rmn_offchain.ReportSignatureRequest
	7,  // 16: rmn_offchain.Response.signed_observation:type_name -> rmn_offchain.SignedObservation
	11, // 17: rmn_offchain.Response.report_signature:type_name -> rmn_offchain.ReportSignature
	4,  // 18: rmn_offchain.ReportingPluginQuery.fixed_dest_lane_updates:type_name -> rmn_offchain.FixedDestLaneUpdate
	14, // 19: rmn_offchain.ReportingPluginQuery.ecdsa_signatures:type_name -> rmn_offchain.EcdsaSignature
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_rmn_offchain_proto_init() }
func file_rmn_offchain_proto_init() {
	if File_rmn_offchain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rmn_offchain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaneSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaneDest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosedInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedDestLaneUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedDestLaneUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributedSignedObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcdsaSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rmn_offchain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportingPluginQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rmn_offchain_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Request_ObservationRequest)(nil),
		(*Request_ReportSignatureRequest)(nil),
	}
	file_rmn_offchain_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Response_SignedObservation)(nil),
		(*Response_ReportSignature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rmn_offchain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rmn_offchain_proto_goTypes,
		DependencyIndexes: file_rmn_offchain_proto_depIdxs,
		MessageInfos:      file_rmn_offchain_proto_msgTypes,
	}.Build()
	File_rmn_offchain_proto = out.File
	file_rmn_offchain_proto_rawDesc = nil
	file_rmn_offchain_proto_goTypes = nil
	file_rmn_offchain_proto_depIdxs = nil
}
