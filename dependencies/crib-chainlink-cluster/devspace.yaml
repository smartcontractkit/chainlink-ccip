---
version: v2beta1
name: chainlink

vars:
  SCRIPTS_DIR:
    source: env
    default: "../../scripts"
  DEVSPACE_ENV_FILE: .env
  # The list of default ENV Vars for CRIB, you can override any of them in the .env file
  # AWS Account ID used for deploying CRIB environment
  AWS_ACCOUNT_ID:
    source: env
    default: 323150190480
  # The image that will be used for the Chainlink nodes.
  DEVSPACE_IMAGE:
    source: env
    default: "323150190480.dkr.ecr.us-west-2.amazonaws.com/chainlink-devspace"
  # This is a comma separated list of CIDR blocks that will be allowed to access the ingress.
  DEVSPACE_INGRESS_CIDRS:
    source: env
    default: "0.0.0.0/0"
  # This is the base domain in AWS Route 53 that our ingress subdomains will use.
  DEVSPACE_INGRESS_BASE_DOMAIN:
    source: env
    default: "main.stage.cldev.sh"
  # This is the ARN of the AWS ACM certificate that will be used for the ingress.
  DEVSPACE_INGRESS_CERT_ARN:
    source: env
    default: "arn:aws:acm:us-west-2:323150190480:certificate/edd19542-7c7c-42dc-ba00-507c4b962ed3"
  # Time to wait for pods to be in `Ready` condition
  DEVSPACE_K8S_POD_WAIT_TIMEOUT:
    source: env
    default: 1200s
  # Helm repo URI for the crib-ccip helm chart
  CHAINLINK_HELM_REGISTRY_URI:
    source: env
    default: "oci://804282218731.dkr.ecr.us-west-2.amazonaws.com/infra-charts"

  DEPENDENCIES_DIR:
    source: env
    default: "../../dependencies"
  IMPORTS_DIR:
    source: env
    default: "../../imports"
  CHAINLINK_REPO_DIR:
    source: env
    default: "${CHAINLINK_CODE_DIR}/chainlink"
  CHAINLINK_CLUSTER_HELM_CHART_URI:
    source: env
    default: "${CHAINLINK_HELM_REGISTRY_URI}/crib-chainlink-cluster"

pipelines:
  deploy:
    flags:
      - name: override-image-tag
        short: o
        type: string
        description: "If specified, the specified tag will be used instead of building a new image"
    run: |-
      # Source the shared functions file.
      # shellcheck disable=SC1091
      source "../../scripts/lib/shared_functions.sh"
      
      tagOverride=$(get_flag "override-image-tag")
      
      if [[ ${PROVIDER:-} == "kind" ]]; then
        ensure_pull_secrets --all
        run_dependency_pipelines loki
        run_dependency_pipelines promtail
        run_dependency_pipelines grafana
      fi
      
      if [[ -n "${tagOverride}" ]]; then
        image=${DEVSPACE_IMAGE}:${tagOverride}
        echo "Using user provided image: $image"
      
        args=""
        for i in {1..5}; do
          args+="--set=helm.values.chainlink.nodes.node$i.image=$image "
        done
        echo $args
      
        create_deployments app $args
      elif is_custom_image "${DEVSPACE_IMAGE}"; then
        echo "Your configuration uses custom DEVSPACE_IMAGE: $DEVSPACE_IMAGE"
        echo "You need to provide an explicit image tag via \"-o\" flag. e.g. devspace deploy --skip-build -o=latest"
        exit 1
      else
        build_images --all
        create_deployments app
      fi
      
      kubectl label namespace/${DEVSPACE_NAMESPACE} network=crib > /dev/null 2>&1 || true

  purge:
    run: |-
      kubectl delete ns ${DEVSPACE_NAMESPACE}

images:
  app:
    image: ${DEVSPACE_IMAGE}
    tags:
      - ${devspace.namespace}-${devspace.timestamp}
    custom:
      skipImageArg: true
      command: |-
        image=${runtime.images.app}
        (
          cd ${CHAINLINK_REPO_DIR} && \
          nix develop -c \
            bash -c "MACOS_SDK_DIR=$(pwd)/tools/bin/MacOSX12.3.sdk IMAGE=$image ./tools/bin/goreleaser_wrapper \
              release --snapshot --clean --config .goreleaser.devspace.yaml" && \
          docker push $image
        )

pullSecrets:
  regcred-don:
    registry: 323150190480.dkr.ecr.us-west-2.amazonaws.com
    secret: regcred-don
    serviceAccounts:
      - default

commands:
  ingress-hosts:
    command: >-
      kubectl get ingress -n ${DEVSPACE_NAMESPACE}
      -o=jsonpath="{range .items[*].spec.rules[*]}{'https://'}{.host}{'\n'}{end}"
    description: List Kubernetes ingress hostnames in the namespace.
  connect:
    command: |-
      echo "Exposing services from ${DEVSPACE_NAMESPACE} CRIB namespace locally..."
      sudo kubefwd svc -n $DEVSPACE_NAMESPACE
    description: >-
      Expose Kubernetes services from the CRIB namespace to local machine for direct,
      secure access during development. It facilitates debugging and access to ports not exposed through Ingress.
  ttl:
    command: ./${SCRIPTS_DIR}/manage_namespace.sh label $1 --overwrite
    description: Configure TTL for devspace resource cleanup. Default is 72h.
  workload:
    command: cd ../integration-tests/load/ocr && go test -v -run TestOCRLoad || cd -
    description: Run workload
  dashboard-deploy:
    command: go run dashboard/cmd/deploy.go
    description: Deploy dashboards
  dashboard-test:
    command: cd dashboard/tests && npx playwright test || cd -
    description: Run tests
  man:
    command: ${SCRIPTS_DIR}/man.sh $1
    description: Display man pages

hooks:
  - command: ${SCRIPTS_DIR}/check_env_vars.sh
    events: [ "before:deploy:app" ]
  - name: "pre-image-build-hook"
    command: ${SCRIPTS_DIR}/before_build_checks.sh
    events: ["before:build:app"]
  - command: ${SCRIPTS_DIR}/before_deploy_checks.sh
    events: ["before:deploy:app"]
  - command: ./${SCRIPTS_DIR}/manage_namespace.sh
    args: ["create"]
    events: ["before:deploy:*"]
  - wait:
      running: true
      terminatedWithCode: 0
      timeout: 600
    container:
      labelSelector:
        # vars don't work here, = releaseName
        release: "app"
    events: ["after:deploy:app"]

  # Check that the ingress was created successfully, and print ingress hostnames.
  - name: "ingress-check-hook"
    command: ./${SCRIPTS_DIR}/ingress_check.sh
    args: ["app"] # Ingress name.
    events: ["after:deploy:app"]

  # Prints man pages about available commands
  - command: ${SCRIPTS_DIR}/man.sh
    events: ["after:deploy:app"]

  # Prints man pages about build errors
  - command: ${SCRIPTS_DIR}/man.sh
    args: ["build-error"]
    events: ["error:build:*"]

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    updateImageTags: false
    namespace: ${DEVSPACE_NAMESPACE}
    helm:
      upgradeArgs: ["--timeout", "10m"]
      releaseName: "app"
      chart:
        name: ${CHAINLINK_CLUSTER_HELM_CHART_URI}
        version: "1.x"
      # for simplicity, we define all the values here
      # they can be defined the same way in values.yml
      # devspace merges these "values" with the "values.yaml" before deploy
      values:
        podSecurityContext:
          fsGroup: 999

        chainlink:
          global:
            overridesToml: |
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 14933
            runAsGroup: 999
          web_port: 6688
          p2p_port: 6690
          # extraEnvVars:
          # "CL_MEDIAN_CMD": "chainlink-feeds"
          nodes:
            node1:
              image: ${runtime.images.app}
              # override default config per node
              # for example, use OCRv2 P2P setup, the whole config
              #      toml: |
              #        RootDir = './clroot'
              #        [Log]
              #        JSONConsole = true
              #        Level = 'debug'
              #        [WebServer]
              #        AllowOrigins = '*'
              #        SecureCookies = false
              #        SessionTimeout = '999h0m0s'
              #        [OCR2]
              #        Enabled = true
              #        [P2P]
              #        [P2P.V2]
              #        Enabled = false
              #        AnnounceAddresses = []
              #        DefaultBootstrappers = []
              #        DeltaDial = '15s'
              #        DeltaReconcile = '1m0s'
              #        ListenAddresses = []
              #        [[EVM]]
              #        ChainID = '1337'
              #        MinContractPayment = '0'
              #        [[EVM.Nodes]]
              #        Name = 'node-0'
              #        WSURL = 'ws://geth:8546'
              #        HTTPURL = 'http://geth:8544'
              #        [WebServer.TLS]
              #        HTTPSPort = 0
              # or use overridesToml to override some part of configuration
              # overridesToml: |
              # Enable Tracing
              #   [Tracing]
              #   Enabled = true
              #   SamplingRatio = 1.0
              #   CollectorTarget = 'app-opentelemetry-collector:4317'
              #   TLSCertPath = ''
              #   Mode = 'unencrypted'
            node2:
              image: ${runtime.images.app}
            node3:
              image: ${runtime.images.app}
            node4:
              image: ${runtime.images.app}
            node5:
              image: ${runtime.images.app}

        db:
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
        # default cluster shipped with latest Geth ( dev mode by default )
        geth:
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
          version: v1.12.0
          wsRpcPort: 8546
          httpRpcPort: 8544
          chains:
            - networkId: 1337
            - networkId: 2337
          blocktime: 1
        # mockserver is https://www.mock-server.com/where/kubernetes.html
        # used to stub External Adapters
        mockserver:
          #  image: "mockserver/mockserver"
          #  version: "mockserver-5.15.0"
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
          enabled: true
          releasenameOverride: mockserver
          app:
            runAsUser: 999
            readOnlyRootFilesystem: false
          port: 1080
        # monitoring.coreos.com/v1 PodMonitor for each node
        prometheusMonitor: true

        # These ingresses create AWS ALB resources and Route 53 Records.
        ingress:
          enabled: true
          annotation_certificate_arn: ${DEVSPACE_INGRESS_CERT_ARN}
          annotation_group_name: ${DEVSPACE_NAMESPACE}
          hosts:
            - host: ${DEVSPACE_NAMESPACE}-node1.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: app-node1
                        port:
                          number: 6688
            - host: ${DEVSPACE_NAMESPACE}-node2.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: app-node2
                        port:
                          number: 6688
            - host: ${DEVSPACE_NAMESPACE}-node3.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: app-node3
                        port:
                          number: 6688
            - host: ${DEVSPACE_NAMESPACE}-node4.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: app-node4
                        port:
                          number: 6688
            - host: ${DEVSPACE_NAMESPACE}-node5.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: app-node5
                        port:
                          number: 6688
            - host: ${DEVSPACE_NAMESPACE}-geth-1337-http.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: geth-1337
                        port:
                          number: 8544
            - host: ${DEVSPACE_NAMESPACE}-geth-1337-ws.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: geth-1337
                        port:
                          number: 8546
            - host: ${DEVSPACE_NAMESPACE}-geth-2337-http.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: geth-2337
                        port:
                          number: 8544
            - host: ${DEVSPACE_NAMESPACE}-geth-2337-ws.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: geth-2337
                        port:
                          number: 8546
            - host: ${DEVSPACE_NAMESPACE}-mockserver.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: mockserver
                        port:
                          number: 1080

            # TODO: Move this Ingress to the component
            - host: ${DEVSPACE_NAMESPACE}-grafana.${DEVSPACE_INGRESS_BASE_DOMAIN}
              http:
                paths:
                  - path: /
                    backend:
                      service:
                        name: grafana
                        port:
                          number: 80
        networkPolicyDefault:
          ingress:
            allowCustomCidrs: true
            # Should be a comma separated list of CIDR blocks. To include
            # AWS ALB private CIDRs and optionally other custom CIDRs.
            # Example format: 10.0.0.0/16,192.168.0.1/24
            customCidrs: ${DEVSPACE_INGRESS_CIDRS}
        # deployment placement, standard helm stuff
        podAnnotations:
        nodeSelector:
        tolerations:
        affinity:

profiles:
  - name: core
    merge:
      deployments:
        app:
          helm:
            values:
              chainlink:
                global:
                  overridesToml: |-
                    [Feature]
                    LogPoller = true
                    [Log]
                    Level = 'debug'
                    JSONConsole = true
                    [Log.File]
                    MaxSize = '0b'
                    [WebServer]
                    AllowOrigins = '*'
                    HTTPPort = 6688
                    SecureCookies = false
                    HTTPWriteTimeout = '1m'
                    [WebServer.RateLimit]
                    Authenticated = 2000
                    Unauthenticated = 1000
                    [WebServer.TLS]
                    HTTPSPort = 0
                    [Database]
                    MaxIdleConns = 50
                    MaxOpenConns = 50
                    MigrateOnStartup = true
                    [OCR2]
                    Enabled = true
                    DefaultTransactionQueueDepth = 0
                    [OCR]
                    Enabled = false
                    DefaultTransactionQueueDepth = 0
                    [P2P]
                    [P2P.V2]
                    Enabled = true
                    ListenAddresses = ['0.0.0.0:6690']
                    AnnounceAddresses = ['0.0.0.0:6690']
                    DeltaDial = '500ms'
                    DeltaReconcile = '5s'
  - name: ccip
    merge:
      deployments:
        app:
          helm:
            values:
              chainlink:
                global:
                  overridesToml: |-
                    [Feature]
                    LogPoller = true
                    CCIP = true

                    [Log]
                    Level = 'debug'
                    JSONConsole = true

                    [Log.File]
                    MaxSize = '0b'

                    [WebServer]
                    AllowOrigins = '*'
                    HTTPPort = 6688
                    SecureCookies = false
                    HTTPWriteTimeout = '1m'

                    [WebServer.RateLimit]
                    Authenticated = 2000
                    Unauthenticated = 1000

                    [WebServer.TLS]
                    HTTPSPort = 0

                    [Database]
                    MaxIdleConns = 50
                    MaxOpenConns = 50
                    MigrateOnStartup = true

                    [OCR2]
                    Enabled = true
                    DefaultTransactionQueueDepth = 0

                    [OCR]
                    Enabled = false
                    DefaultTransactionQueueDepth = 0

                    [P2P]
                    [P2P.V2]
                    Enabled = true
                    ListenAddresses = ['0.0.0.0:6690']
                    AnnounceAddresses = ['0.0.0.0:6690']
                    DeltaDial = '500ms'
                    DeltaReconcile = '5s'
              geth:
                statefulSet:
                  # Set to true to use StatefulSet instead of Deployment.
                  enabled: true
                networkPolicy:
                  # Allow additional services to access geth
                  extraIngressSelectors:
                    - podSelector:
                        matchLabels:
                          app: atlas
                    - podSelector:
                        matchLabels:
                          app: ccip-scripts-deployer
                chains:
                  - networkId: 1337
                    customEVMConfigToml: |
                      [EVM.GasEstimator]
                      PriceMax = '200 gwei'
                      LimitDefault = 6000000
                      FeeCapDefault = '200 gwei'
                  - networkId: 2337
                    customEVMConfigToml: |
                      [EVM.GasEstimator]
                      PriceMax = '200 gwei'
                      LimitDefault = 6000000
                      FeeCapDefault = '200 gwei'