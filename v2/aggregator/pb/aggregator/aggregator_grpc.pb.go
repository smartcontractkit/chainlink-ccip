// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/aggregator.proto

package aggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AggregatorService_WriteCommitVerification_FullMethodName = "/v2.aggregator.AggregatorService/WriteCommitVerification"
	AggregatorService_ReadCommitVerification_FullMethodName  = "/v2.aggregator.AggregatorService/ReadCommitVerification"
)

// AggregatorServiceClient is the client API for AggregatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorServiceClient interface {
	WriteCommitVerification(ctx context.Context, in *WriteCommitVerificationRequest, opts ...grpc.CallOption) (*WriteCommitVerificationResponse, error)
	ReadCommitVerification(ctx context.Context, in *ReadCommitVerificationRequest, opts ...grpc.CallOption) (*ReadCommitVerificationResponse, error)
}

type aggregatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorServiceClient(cc grpc.ClientConnInterface) AggregatorServiceClient {
	return &aggregatorServiceClient{cc}
}

func (c *aggregatorServiceClient) WriteCommitVerification(ctx context.Context, in *WriteCommitVerificationRequest, opts ...grpc.CallOption) (*WriteCommitVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteCommitVerificationResponse)
	err := c.cc.Invoke(ctx, AggregatorService_WriteCommitVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) ReadCommitVerification(ctx context.Context, in *ReadCommitVerificationRequest, opts ...grpc.CallOption) (*ReadCommitVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadCommitVerificationResponse)
	err := c.cc.Invoke(ctx, AggregatorService_ReadCommitVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorServiceServer is the server API for AggregatorService service.
// All implementations must embed UnimplementedAggregatorServiceServer
// for forward compatibility.
type AggregatorServiceServer interface {
	WriteCommitVerification(context.Context, *WriteCommitVerificationRequest) (*WriteCommitVerificationResponse, error)
	ReadCommitVerification(context.Context, *ReadCommitVerificationRequest) (*ReadCommitVerificationResponse, error)
	mustEmbedUnimplementedAggregatorServiceServer()
}

// UnimplementedAggregatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregatorServiceServer struct{}

func (UnimplementedAggregatorServiceServer) WriteCommitVerification(context.Context, *WriteCommitVerificationRequest) (*WriteCommitVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteCommitVerification not implemented")
}
func (UnimplementedAggregatorServiceServer) ReadCommitVerification(context.Context, *ReadCommitVerificationRequest) (*ReadCommitVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCommitVerification not implemented")
}
func (UnimplementedAggregatorServiceServer) mustEmbedUnimplementedAggregatorServiceServer() {}
func (UnimplementedAggregatorServiceServer) testEmbeddedByValue()                           {}

// UnsafeAggregatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorServiceServer will
// result in compilation errors.
type UnsafeAggregatorServiceServer interface {
	mustEmbedUnimplementedAggregatorServiceServer()
}

func RegisterAggregatorServiceServer(s grpc.ServiceRegistrar, srv AggregatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAggregatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggregatorService_ServiceDesc, srv)
}

func _AggregatorService_WriteCommitVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteCommitVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).WriteCommitVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregatorService_WriteCommitVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).WriteCommitVerification(ctx, req.(*WriteCommitVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_ReadCommitVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCommitVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).ReadCommitVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregatorService_ReadCommitVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).ReadCommitVerification(ctx, req.(*ReadCommitVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregatorService_ServiceDesc is the grpc.ServiceDesc for AggregatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.aggregator.AggregatorService",
	HandlerType: (*AggregatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteCommitVerification",
			Handler:    _AggregatorService_WriteCommitVerification_Handler,
		},
		{
			MethodName: "ReadCommitVerification",
			Handler:    _AggregatorService_ReadCommitVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/aggregator.proto",
}
