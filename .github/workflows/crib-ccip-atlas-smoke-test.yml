---
name: CRIB CCIP/Atlas Smoke Test

on:
  pull_request:
    branches:
      - "*" # Trigger on any branch in a PR
    paths:
      # Include common changes
      - "*"
      - "dependencies/crib-chainlink-cluster/**"
      - "dependencies/crib-ccip-scripts/**"
      - "imports/**"
      - "dependencies/atlas/**"
      - "scripts/**"
      - "cli/**"
      # Include crib ccip changes
      - "deployments/chainlink/**"
      - ".github/workflows/crib-ccip-atlas-smoke-test.yml"
      # Exclude doc updates
      - "!**/*.md" # Exclude doc updates
      # Exclude .gitignore
      - "!.gitignore"
      # Exclude changesets version bumps
      - "!package.json"
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - main # Trigger only on pushes to the main branch
    paths:
      # Include common changes
      - "*"
      - "dependencies/crib-chainlink-cluster/**"
      - "dependencies/crib-ccip-scripts/**"
      - "imports/**"
      - "scripts/**"
      # Include crib ccip changes
      - "deployments/chainlink/**"
      - ".github/workflows/crib-ccip-atlas-smoke-test.yml"
      # Exclude doc updates
      - "!**/*.md" # Exclude doc updates
      # Exclude .gitignore
      - "!.gitignore"
      # Exclude changesets version bumps
      - "!package.json"
  workflow_dispatch:
    inputs:
      debug:
        description: |
          Enables debug mode to disable CRIB env teardown
        default: "false"
        required: false

jobs:
  run-crib-ccip-atlas-smoke-test:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      CHAINLINK_HELM_REGISTRY_URI: oci://${{secrets.AWS_ACCOUNT_ID_PROD}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/infra-charts
    permissions:
      id-token: write
      contents: read
      actions: read
      pull-requests: read
    steps:
      - name: Prevent running on draft or changesets PRs
        id: check-prereqs-for-running
        run: |
          should_run=true
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ github.event.pull_request.draft }}" == "true" ]; then
              should_run=false
            elif [ "${{ github.event.pull_request.user.login }}" == "app-token-issuer-infra-releng[bot]" ] && [[ "${{ github.event.pull_request.title }}" == "Version Packages" ]]; then
              should_run=false
            fi
          fi
          echo "should_run=$should_run" >> "$GITHUB_OUTPUT"

      - name: Setup gobin for nix # This will be included in crib-deploy-environment@4.1.0
        run: |
          GOBIN="$HOME/.nix-go/bin"
          echo "GOBIN=$GOBIN" >> $GITHUB_ENV
          mkdir -p "$GOBIN"
          echo "PATH=$GOBIN:$PATH" >> $GITHUB_ENV

      - name: Deploy and validate CRIB Environment for CCIP
        if: steps.check-prereqs-for-running.outputs.should_run == 'true'
        id: deploy
        uses: smartcontractkit/.github/actions/crib-deploy-environment@99747b298ad960374b47b6315175a349d06579d7 # crib-deploy-environment@7.3.0
        with:
          aws-ecr-private-registry: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-role-arn: ${{ secrets.AWS_OIDC_CRIB_ROLE_ARN_STAGE }}
          ingress-base-domain: ${{ secrets.INGRESS_BASE_DOMAIN_STAGE }}
          k8s-cluster-name: ${{ secrets.AWS_K8S_CLUSTER_NAME_STAGE }}
          command: "ccip-atlas"
          product-image: "${{ secrets.AWS_ACCOUNT_ID_PROD }}.dkr.ecr.us-west-2.amazonaws.com/chainlink-ccip"
          product-image-tag: "ccip-develop"
          # Send alerts only for push to main
          send-alerts: ${{ github.event_name == 'push' && 'true' || 'false'}}
          crib-alert-slack-webhook: ${{ secrets.CRIB_ALERT_SLACK_WEBHOOK }}
          crib-repo-ref: ${{ github.ref }}
          chainlink-team: releng
          chainlink-product: crib
          k8s-api-endpoint: ${{ secrets.K8S_API_ENDPOINT_STAGE }}

      - name: Assume role capable of fetching data from s3
        if: steps.check-prereqs-for-running.outputs.should_run == 'true'
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: true
          role-duration-seconds: 900
          role-to-assume: ${{ secrets.AWS_OIDC_CRIB_ROLE_ARN_STAGE }}

      - name: Setup Smoke Test Env for CCIP
        if: steps.check-prereqs-for-running.outputs.should_run == 'true'
        env:
          DEVSPACE_NAMESPACE: ${{ steps.deploy.outputs.devspace-namespace }}
        run: |
          aws s3 cp s3://cl-stage-ccip-scripts-deploy-output/${DEVSPACE_NAMESPACE}-testInput.toml override.toml

      - name: Checkout ccip git repo
        if: steps.check-prereqs-for-running.outputs.should_run == 'true'
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          repository: "smartcontractkit/ccip"
          path: "ccip"
          ref: "ccip-develop"

      - name: Setup go for ccip
        if: steps.check-prereqs-for-running.outputs.should_run == 'true'
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version-file: "ccip/go.mod"

      - name: Run Smoke Tests (WIP)
        if: steps.check-prereqs-for-running.outputs.should_run == 'true'
        shell: bash
        run: |
          wc -l override.toml
          cd ccip/integration-tests/ccip-tests/

          # todo: populate secrets
          # todo: fix test step below

          # make test_load_ccip testimage="" testname=TestLoadCCIPStableRPS \
          #  override_toml="${GITHUB_WORKSPACE}/override.toml" \
          #  secret_toml="${GITHUB_WORKSPACE}/secrets.toml"

      - name: Destroy CRIB Environment
        id: destroy
        if: always() && steps.deploy.outputs.devspace-namespace != '' && inputs.debug != 'true' && steps.check-prereqs-for-running.outputs.should_run == 'true'
        uses: smartcontractkit/.github/actions/crib-purge-environment@142671bc21953c8cc3edbd21848c50b5ec201c2a # crib-purge-environment@0.3.0
        with:
          namespace: ${{ steps.deploy.outputs.devspace-namespace }}
