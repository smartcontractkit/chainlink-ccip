name: "Run CCIP OCR3 Integration Test"

on:
  pull_request:
  push:
    branches:
      - 'ccip-develop'

jobs:
  integration-test-ccip-ocr3:
    env:
      # We explicitly have this env var not be "CL_DATABASE_URL" to avoid having it be used by core related tests
      # when they should not be using it, while still allowing us to DRY up the setup
      DB_URL: postgresql://postgres:postgres@localhost:5432/chainlink_test?sslmode=disable

    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22.5']
    steps:
      - name: Clone chainlink-ccip and check out the current ref
        run: |
          cd $GITHUB_WORKSPACE
          mkdir chainlink-ccip && cd chainlink-ccip
          git init
          git remote add origin ${{ github.repositoryUrl }}
          git fetch origin ${{ github.ref }} --depth=1
          git checkout FETCH_HEAD
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Clone CCIP repo
        run: |
          cd $GITHUB_WORKSPACE
          git clone https://github.com/smartcontractkit/ccip.git
          cd ccip
          git fetch
          git checkout ccip-develop
      - name: Update the chainlink-ccip dependency in ccip
        run: |
          cd ccip
          go get github.com/smartcontractkit/chainlink-ccip@$(git -C $GITHUB_WORKSPACE/chainlink-ccip rev-parse HEAD)
          make gomodtidy
      - name: Setup Postgres
        uses: ./.github/actions/setup-postgres
      - name: Download Go vendor packages
        run: |
          cd ccip
          go mod download
      - name: Build binary
        run: |
          cd ccip
          go build -o ccip.test .
      - name: Setup DB
        run: |
          cd ccip
          ./ccip.test local db preparetest
        env:
          CL_DATABASE_URL: ${{ env.DB_URL }}
      - name: Run ccip ocr3 integration test
        run: |
          cd ccip
          go test -v -timeout 3m -run "^TestIntegration_OCR3Nodes$" ./core/capabilities/ccip/ccip_integration_tests
          EXITCODE=${PIPESTATUS[0]}
          if [ $EXITCODE -ne 0 ]; then
            echo "Integration test failed"
          else
            echo "Integration test passed!"
          fi
          exit $EXITCODE
        env:
          CL_DATABASE_URL: ${{ env.DB_URL }}
