name: Solana

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: solana-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: ./chains/solana

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      solana_changes: ${{ steps.changes.outputs.solana_changes }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Detect changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: changes
        with:
          list-files: "shell"
          filters: |
            solana_changes:
              - 'chains/solana/**'
              - '.github/workflows/solana*.yml'

  get_anchor_version:
    needs: [ changes ]
    if: ${{ needs.changes.outputs.solana_changes == 'true' }}
    name: Get Anchor Version
    runs-on: ubuntu-latest
    outputs:
      anchor_version: ${{ steps.anchorversion.outputs.anchor }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
      - name: Get Anchor Version
        id: anchorversion
        run: |
          anchor=$(make anchor_version)
          echo "anchor=${anchor}" >>$GITHUB_OUTPUT

  build_solana:
    needs: [changes, get_anchor_version]
    if: ${{ needs.changes.outputs.solana_changes == 'true' }}
    name: cache build artifacts
    runs-on: ubuntu-latest-8cores-32GB
    steps:
    - uses: actions/checkout@v4
    - name: cache docker build image
      id: cache-image
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        lookup-only: true
        path: chains/solana/contracts/docker-build.tar
        key: ${{ runner.os }}-solana-build-${{ needs.get_anchor_version.outputs.anchor_version }}-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo target dir
      id: cache-target
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        lookup-only: true
        path: chains/solana/contracts/target
        key: ${{ runner.os }}-solana-contract-artifacts-${{ hashFiles('**/Cargo.lock') }}
    - name: build & save image
      if: steps.cache-image.outputs.cache-hit != 'true'
      run: |
        cd contracts
        docker buildx build . -t ccip-solana:build --build-arg ANCHOR_CLI=${{ needs.get_anchor_version.outputs.anchor_version }}
        docker save -o docker-build.tar ccip-solana
    - name: build & save contract compilation artifacts
      if: steps.cache-target.outputs.cache-hit != 'true'
      run: |
        docker run -v "$(pwd)/":/solana ccip-solana:build bash -c "\
          set -eoux pipefail &&\
          RUSTUP_HOME=\"/root/.rustup\" &&\
          FORCE_COLOR=1 &&\
          cd /solana/contracts &&\
          anchor build &&\
          chmod -R 755 ./target"

  rust:
    needs: [ changes, get_anchor_version, build_solana ]
    if: ${{ needs.changes.outputs.solana_changes == 'true' }}
    name: rust tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Cache cargo target dir
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        fail-on-cache-miss: true
        path: chains/solana/contracts/target
        key: ${{ runner.os }}-solana-contract-artifacts-${{ hashFiles('**/Cargo.lock') }}
    - name: cache docker build image
      id: cache-image
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        fail-on-cache-miss: true
        path: chains/solana/contracts/docker-build.tar
        key: ${{ runner.os }}-solana-build-${{ needs.get_anchor_version.outputs.anchor_version }}-${{ hashFiles('**/Cargo.lock') }}
    - name: load cached image
      run: |
        docker load --input contracts/docker-build.tar
    - name: run tests
      run: |
          docker run -v "$(pwd)/":/solana ccip-solana:build bash -c "\
          set -eoux pipefail &&\
          RUSTUP_HOME=\"/root/.rustup\" &&\
          FORCE_COLOR=1 &&\
          cd /solana/contracts &&\
          anchor build &&\
          cargo check &&\
          cargo clippy -- -D warnings &&\
          cargo test --workspace"

  go:
    needs: [ changes, get_anchor_version, build_solana ]
    if: ${{ needs.changes.outputs.solana_changes == 'true' }}
    name: go tests
    runs-on: ubuntu-latest-8cores-32GB
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo target dir
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          fail-on-cache-miss: true
          path: chains/solana/contracts/target
          key: ${{ runner.os }}-solana-contract-artifacts-${{ hashFiles('**/Cargo.lock') }}
      - name: cache docker build image
        id: cache-image
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          fail-on-cache-miss: true
          path: chains/solana/contracts/docker-build.tar
          key: ${{ runner.os }}-solana-build-${{ needs.get_anchor_version.outputs.anchor_version }}-${{ hashFiles('**/Cargo.lock') }}
      - name: load cached image
        run: |
          docker load --input contracts/docker-build.tar
      - name: Setup go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
        with:
          go-version-file: "./chains/solana/go.mod"
          check-latest: true
          cache-dependency-path: "./chains/solana/go.sum"
      - name: Install gotestloghelper
        run: go install github.com/smartcontractkit/chainlink-testing-framework/tools/gotestloghelper@latest
      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.anza.xyz/stable/install)" # always use latest stable release from solana
          echo "PATH=$HOME/.local/share/solana/install/active_release/bin:$PATH" >> $GITHUB_ENV
      - name: build + test
        run: |
          set -eoux pipefail
          # compile artifacts
          docker run -v "$(pwd)/":/solana ccip-solana:build bash -c "\
          set -eoux pipefail &&\
          RUSTUP_HOME=\"/root/.rustup\" &&\
          FORCE_COLOR=1 &&\
          cd /solana/contracts &&\
          anchor build"
          make go-tests

  lint:
    needs: [ changes, get_anchor_version, build_solana ]
    if: ${{ needs.changes.outputs.solana_changes == 'true' }}
    name: lint + check artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo target dir
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          fail-on-cache-miss: true
          path: chains/solana/contracts/target
          key: ${{ runner.os }}-solana-contract-artifacts-${{ hashFiles('**/Cargo.lock') }}
      - name: cache docker build image
        id: cache-image
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          fail-on-cache-miss: true
          path: chains/solana/contracts/docker-build.tar
          key: ${{ runner.os }}-solana-build-${{ needs.get_anchor_version.outputs.anchor_version }}-${{ hashFiles('**/Cargo.lock') }}
      - name: load cached image
        run: |
          docker load --input contracts/docker-build.tar
      - name: Setup go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
        with:
          go-version-file: "./chains/solana/go.mod"
          check-latest: true
          cache-dependency-path: "./chains/solana/go.sum"
      - name: check artifacts
        run: |
          set -eoux pipefail
          # compile artifacts
          docker run -v "$(pwd)/":/solana ccip-solana:build bash -c "\
          set -eoux pipefail &&\
          RUSTUP_HOME=\"/root/.rustup\" &&\
          FORCE_COLOR=1 &&\
          cd /solana/contracts &&\
          rm -rf target/idl target/types &&\
          anchor build"

          go install github.com/gagliardetto/anchor-go@v0.2.3
          ./scripts/anchor-go-gen.sh
          make format
          git diff --exit-code
      - name: Install linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.5
      - name: Run linter
        run: make lint-go
      - name: Print lint report artifact
        if: failure()
        shell: bash
        run: cat ./golangci-lint-report.xml
