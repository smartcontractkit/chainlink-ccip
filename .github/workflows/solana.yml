name: Solana

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: solana-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: ./chains/solana

jobs:
  get_anchor_version:
    name: Get Anchor Version
    runs-on: ubuntu-latest
    outputs:
      anchor_version: ${{ steps.anchorversion.outputs.anchor }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
      - name: Get Anchor Version
        id: anchorversion
        run: |
          anchor=$(make anchor_version)
          echo "anchor=${anchor}" >>$GITHUB_OUTPUT

  build_solana_test_image:
    name: build test image
    runs-on: ubuntu-latest-8cores-32GB
    needs: [get_anchor_version]
    steps:
    - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
    - name: cache docker build image
      id: cache-image
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        lookup-only: true
        path: chains/solana/contracts/docker-build.tar
        key: ${{ runner.os }}-solana-build-${{ needs.get_anchor_version.outputs.anchor_version }}-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo target dir
      id: cache-target
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        lookup-only: true
        path: chains/solana/contracts/target
        key: ${{ runner.os }}-solana-contract-artifacts-${{ hashFiles('**/Cargo.lock') }}
    - name: build & save image
      if: steps.cache-image.outputs.cache-hit != 'true'
      run: |
        cd contracts
        docker buildx build . -t ccip-solana:build --build-arg ANCHOR_CLI=${{ needs.get_anchor_version.outputs.anchor_version }}
        docker save -o docker-build.tar ccip-solana
    - name: build & save contract compilation artifacts
      if: steps.cache-target.outputs.cache-hit != 'true'
      run: |
        docker run -v "$(pwd)/":/solana ccip-solana:build bash -c "\
          set -eoux pipefail &&\
          RUSTUP_HOME=\"/root/.rustup\" &&\
          FORCE_COLOR=1 &&\
          cd /solana/contracts &&\
          solana-keygen new -o id.json --no-bip39-passphrase &&\
          anchor build &&\
          chmod -R 755 ./target"

  # rust_run_anchor_tests:
  #   name: Rust Run Anchor Tests
  #   runs-on: ubuntu-latest-8cores-32GB
  #   needs: [detect-changes, get_anchor_version, build_wrapped_anchor_image]
  #   if: needs.detect-changes.outputs.found == 'true'
  #   defaults:
  #     run:
  #       working-directory: ./solana/contracts
  #   steps:
  #   - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
  #   - name: Cache cargo target dir
  #     uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
  #     with:
  #       path: solana/contracts/target
  #       key: ${{ runner.os }}-v2-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
  #   - name: Cache hello-world target dir
  #     uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
  #     with:
  #       path: solana/contracts/examples/hello-world/target
  #       key: ${{ runner.os }}-v2-cargo-build-target-hello-world-${{ hashFiles('**/Cargo.lock') }}
  #   - name: cache docker build image
  #     id: cache-image
  #     uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
  #     with:
  #       fail-on-cache-miss: true
  #       path: solana/contracts/docker-build.tar
  #       key: ${{ runner.os }}-solana-docker-pnpm-build-${{ needs.get_anchor_version.outputs.anchor_version }}-${{ hashFiles('**/Cargo.lock') }}
  #   - name: load cached image
  #     run: |
  #       docker load --input docker-build.tar
  #   - name: run tests
  #     run: |
  #       docker run -v "$(pwd)/../":/repo chainlink-solana:build bash -c "\
  #         set -eoux pipefail &&\
  #         RUSTUP_HOME=\"/root/.rustup\" &&\
  #         FORCE_COLOR=1 &&\
  #         cd /repo/contracts &&\
  #         solana-keygen new -o id.json --no-bip39-passphrase &&\
  #         cd /repo/ts &&\
  #         pnpm install --frozen-lockfile &&\
  #         pnpm build &&\
  #         cd /repo/contracts &&\
  #         pnpm install --frozen-lockfile &&\
  #         anchor test && anchor build &&\
  #         chmod -R 755 ./target &&\
  #         cd /repo/contracts/examples/hello-world &&\
  #         pnpm install --frozen-lockfile &&\
  #         anchor test && anchor build &&\
  #         chmod -R 755 ./target"

  # rust_lint:
  #   name: Rust Lint
  #   runs-on: ubuntu-latest-8cores-32GB
  #   needs: [detect-changes,get_anchor_version, build_wrapped_anchor_image]
  #   if: needs.detect-changes.outputs.found == 'true'
  #   defaults:
  #     run:
  #       working-directory: ./solana/contracts
  #   steps:
  #   - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
  #   # check formatting before loading cache to prevent overwrites
  #   - name: format contracts + artifacts
  #     run: |
  #       npm install -g pnpm
  #       pnpm install --frozen-lockfile
  #       cd ../ # back to root
  #       make format-contracts
  #       echo "run 'make format-contracts' if this fails"
  #       git diff --stat --exit-code
  #   - name: Cache cargo target dir
  #     uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
  #     with:
  #       path: solana/contracts/target
  #       key: ${{ runner.os }}-v2-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
  #   - name: cache docker build image
  #     id: cache-image
  #     uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
  #     with:
  #       fail-on-cache-miss: true
  #       path: solana/contracts/docker-build.tar
  #       key: ${{ runner.os }}-solana-docker-pnpm-build-${{ needs.get_anchor_version.outputs.anchor_version }}-${{ hashFiles('**/Cargo.lock') }}
  #   - name: load cached image
  #     run: |
  #       docker load --input docker-build.tar
  #   - name: cargo check
  #     run: |
  #       docker run -v "$(pwd)/../":/repo chainlink-solana:build bash -c "\
  #         set -eoux pipefail &&\
  #         RUSTUP_HOME=\"/root/.rustup\" &&\
  #         FORCE_COLOR=1 &&\
  #         cd /repo/contracts &&\
  #         cargo check &&\
  #         cargo clippy -- -D warnings"

  # rust_cargo_test:
  #   name: Rust Cargo Test
  #   runs-on: ubuntu-latest-8cores-32GB
  #   needs: [detect-changes,get_anchor_version, build_wrapped_anchor_image]
  #   if: needs.detect-changes.outputs.found == 'true'
  #   defaults:
  #     run:
  #       working-directory: ./solana/contracts
  #   steps:
  #   - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
  #   - name: Cache cargo target dir
  #     uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
  #     with:
  #       path: solana/contracts/target
  #       key: ${{ runner.os }}-v2-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
  #   - name: cache docker build image
  #     id: cache-image
  #     uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
  #     with:
  #       fail-on-cache-miss: true
  #       path: solana/contracts/docker-build.tar
  #       key: ${{ runner.os }}-solana-docker-pnpm-build-${{ needs.get_anchor_version.outputs.anchor_version }}-${{ hashFiles('**/Cargo.lock') }}
  #   - name: load cached image
  #     run: |
  #       docker load --input docker-build.tar
  #   - name: run cargo tests CCIP
  #     env:
  #       psversion: ${{ needs.get_anchor_version.outputs.anchor_version }}
  #     run: |
  #       docker run -v "$(pwd)/../":/repo chainlink-solana:build bash -c "\
  #         set -eoux pipefail &&\
  #         RUSTUP_HOME=\"/root/.rustup\" &&\
  #         FORCE_COLOR=1 &&\
  #         cd /repo/contracts/ &&\
  #         cargo test --workspace --exclude ocr_2 --exclude store"
  #         # only run on non-data-feeds tests

  # golang_contract_tests:
  #   name: golang contract tests
  #   runs-on: ubuntu-latest-8cores-32GB
  #   needs: [detect-changes,get_anchor_version, build_wrapped_anchor_image]
  #   if: needs.detect-changes.outputs.found == 'true'
  #   defaults:
  #     run:
  #       working-directory: ./solana
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
  #     - name: Cache cargo target dir
  #       uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
  #       with:
  #         path: solana/contracts/target
  #         key: ${{ runner.os }}-v2-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
  #     - name: cache docker build image
  #       id: cache-image
  #       uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
  #       with:
  #         fail-on-cache-miss: true
  #         path: solana/contracts/docker-build.tar
  #         key: ${{ runner.os }}-solana-docker-pnpm-build-${{ needs.get_anchor_version.outputs.anchor_version }}-${{ hashFiles('**/Cargo.lock') }}
  #     - name: load cached image
  #       run: |
  #         docker load --input ./contracts/docker-build.tar
  #     - name: Setup go
  #       uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5.0.1
  #       with:
  #         go-version-file: "./solana/integration-tests/go.mod"
  #         check-latest: true
  #         cache-dependency-path: "./solana/integration-tests/go.sum"
  #     - name: Install gotestloghelper
  #       run: go install github.com/smartcontractkit/chainlink-testing-framework/tools/gotestloghelper@latest
  #     - name: Install Solana CLI
  #       run: ./scripts/install-solana-ci.sh
  #     - name: Test
  #       run: |
  #         set -eoux pipefail
  #         # compile artifacts
  #         cd contracts && solana-keygen new -o id.json --no-bip39-passphrase
  #         docker run -v "$(pwd)/../":/repo chainlink-solana:build bash -c "\
  #           set -eoux pipefail &&\
  #           RUSTUP_HOME=\"/root/.rustup\" &&\
  #           FORCE_COLOR=1 &&\
  #           cd /repo/contracts &&\
  #           anchor build"

  #         cd ..
  #         make contracts-go-tests
