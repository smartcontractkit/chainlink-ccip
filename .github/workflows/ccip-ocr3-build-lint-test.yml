name: "Build lint and test CCIP-OCR3"

on:
  pull_request:
  push:
    branches:
      - 'ccip-develop'

jobs:
  build-lint-test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        go-version: ['1.21']
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Build
        run: go build -v ./...
      - name: Install linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.59.0
      - name: Run linter
        run: golangci-lint run -c .golangci.yml
      - name: Run tests
        run: go test -race -fullpath -shuffle on -count 20 -coverprofile=coverage.out ./...
      - name: Generate coverage report
        run: go tool cover -func=coverage.out > coverage.txt
      - name: Remove previous coverage comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo, number: issue_number } = context.issue;
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number
            });
            const coverageCommentPrefix = "### Go Coverage Report";
            for (const comment of comments.data) {
              if (comment.body.startsWith(coverageCommentPrefix)) {
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: comment.id
                });
              }
            }
      - name: Display coverage in PR comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverageReport = fs.readFileSync('coverage.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Go Coverage Report\n\`\`\`\n${coverageReport}\n\`\`\``
            });
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest
      - name: Run gosec
        run: gosec ./...
