---
version: v2beta1
name: chainlink

vars:
  SCRIPTS_DIR:
    source: env
    default: "../../scripts"
  DEVSPACE_ENV_FILE: .env
  # The list of default ENV Vars for CRIB, you can override any of them in the .env file
  # AWS Account ID used for deploying CRIB environment
  AWS_ACCOUNT_ID:
    source: env
    default: 323150190480
  # The image that will be used for the Chainlink nodes.
  DEVSPACE_IMAGE:
    source: env
    default: "323150190480.dkr.ecr.us-west-2.amazonaws.com/chainlink-devspace"
  # This is a comma separated list of CIDR blocks that will be allowed to access the ingress.
  DEVSPACE_INGRESS_CIDRS:
    source: env
    default: "0.0.0.0/0"
  # This is the base domain in AWS Route 53 that our ingress subdomains will use.
  DEVSPACE_INGRESS_BASE_DOMAIN:
    source: env
    default: "main.stage.cldev.sh"
  # This is the ARN of the AWS ACM certificate that will be used for the ingress.
  DEVSPACE_INGRESS_CERT_ARN:
    source: env
    default: "arn:aws:acm:us-west-2:323150190480:certificate/edd19542-7c7c-42dc-ba00-507c4b962ed3"
  # Time to wait for pods to be in `Ready` condition
  DEVSPACE_K8S_POD_WAIT_TIMEOUT:
    source: env
    default: 1200s
  # Helm repo URI for the crib-ccip helm chart
  CHAINLINK_HELM_REGISTRY_URI:
    source: env
    default: "oci://804282218731.dkr.ecr.us-west-2.amazonaws.com/infra-charts"

pipelines:
  purge:
    run: |-
      kubectl delete ns ${DEVSPACE_NAMESPACE}

pullSecrets:
  regcred-don:
    registry: 323150190480.dkr.ecr.us-west-2.amazonaws.com
    secret: regcred-don
    serviceAccounts:
      - default

commands:
  ingress-hosts:
    command: >-
      kubectl get ingress -n ${DEVSPACE_NAMESPACE}
      -o=jsonpath="{range .items[*].spec.rules[*]}{'https://'}{.host}{'\n'}{end}"
    description: List Kubernetes ingress hostnames in the namespace.
  connect:
    command: |-
      echo "Exposing services from ${DEVSPACE_NAMESPACE} CRIB namespace locally..."
      sudo kubefwd svc -n $DEVSPACE_NAMESPACE
    description: >-
      Expose Kubernetes services from the CRIB namespace to local machine for direct,
      secure access during development. It facilitates debugging and access to ports not exposed through Ingress.
  ttl:
    command: ./${SCRIPTS_DIR}/manage_namespace.sh label $1 --overwrite
    description: Configure TTL for devspace resource cleanup. Default is 72h.
  workload:
    command: cd ../integration-tests/load/ocr && go test -v -run TestOCRLoad || cd -
    description: Run workload
  dashboard-deploy:
    command: go run dashboard/cmd/deploy.go
    description: Deploy dashboards
  dashboard-test:
    command: cd dashboard/tests && npx playwright test || cd -
    description: Run tests
  man:
    command: ${SCRIPTS_DIR}/man.sh $1
    description: Display man pages

images:
  app:
    image: ${DEVSPACE_IMAGE}
    tags:
      - ${devspace.namespace}-${devspace.timestamp}

hooks:
  - name: "pre-image-build-hook"
    command: ${SCRIPTS_DIR}/before_build_checks.sh
    events: ["before:build:app"]
  - command: ${SCRIPTS_DIR}/before_deploy_checks.sh
    events: ["before:deploy:app"]
  - command: ./${SCRIPTS_DIR}/manage_namespace.sh
    args: ["create"]
    events: ["before:deploy:*"]
  - wait:
      running: true
      terminatedWithCode: 0
      timeout: 600
    container:
      labelSelector:
        # vars don't work here, = releaseName
        release: "app"
    events: ["after:deploy:app"]

  # Check that the ingress was created successfully, and print ingress hostnames.
  - name: "ingress-check-hook"
    command: ./${SCRIPTS_DIR}/ingress_check.sh
    args: ["app"] # Ingress name.
    events: ["after:deploy:app"]

  # Prints man pages about available commands
  - command: ${SCRIPTS_DIR}/man.sh
    events: ["after:deploy:app"]

  # Prints man pages about build errors
  - command: ${SCRIPTS_DIR}/man.sh
    args: ["build-error"]
    events: ["error:build:*"]
