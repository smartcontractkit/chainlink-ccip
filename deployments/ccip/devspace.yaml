version: v2beta1
name: chainlink

imports:
  - path: ../../components/don/don.yaml
  - path: ../../components/atlas/atlas.yaml
  - path: ../../components/kind/kind.yaml
  - path: ../../components/ccip/ui/devspace.yaml

vars:
  SCRIPTS_DIR:
    source: env
    default: "../../scripts"
  COMPONENTS_DIR:
    source: env
    default: "../../components"
  CHAINLINK_REPO_DIR:
    source: env
    default: "${CHAINLINK_CODE_DIR}/ccip"
  # Env Vars Required for ccip-scripts based contracts and jobs deployment
  # Image URI required for deploying CCIP Contracts and Jobs
  DEVSPACE_CCIP_SCRIPTS_IMAGE:
    source: env
    default: "804282218731.dkr.ecr.us-west-2.amazonaws.com/ccip-scripts:latest"
  # AWS Role ARN required for uploading deploy job output to s3
  DEVSPACE_CCIP_SCRIPTS_OIDC_ROLE_ARN:
    source: env
    default: "arn:aws:iam::323150190480:role/ccip-scripts-deployer-upload"
  # AWS S3 bucket name required for uploading deploy job output to s3
  DEVSPACE_CCIP_SCRIPTS_OUTPUT_BUCKET_NAME:
    source: env
    default: "cl-stage-ccip-scripts-deploy-output"
  # Env vars required for Atlas Monitoring
  # Enables or disables Atlas components/pipeline
  ATLAS_ENABLED:
    source: env
    default: false
  # Env vars required for CCIP UI
  # Enables or disables CCIP UI component/pipeline
  CCIP_UI_ENABLED:
    source: env
    default: false

pullSecrets:
  regcred-ccip:
    registry: 804282218731.dkr.ecr.us-west-2.amazonaws.com
    secret: regcred-ccip

pipelines:
  deploy:
    flags:
      - name: override-image-tag
        short: o
        type: string
        description: "If specified, the specified tag will be used instead of building a new image"
    run: |-
      # Source the shared functions file.
      # shellcheck disable=SC1091
      source "../../scripts/lib/shared_functions.sh"

      if [[ ${PROVIDER:-} == "kind" ]]; then
        ensure_pull_secrets --all
      fi

      tagOverride=$(get_flag "override-image-tag")
      if [[ -n "${tagOverride}" ]]; then
        image=${DEVSPACE_IMAGE}:${tagOverride}
        echo "Using user provided image: $image"

        args=""
        for i in {1..5}; do
          args+="--set=helm.values.crib-chainlink-cluster.chainlink.nodes.node$i.image=$image "
        done

        create_deployments app $args
      elif is_custom_image "${DEVSPACE_IMAGE}"; then
        echo "Your configuration uses custom DEVSPACE_IMAGE: $DEVSPACE_IMAGE"
        echo "You need to provide an explicit image tag via \"-o\" flag. e.g. devspace deploy --skip-build -o=latest"
        exit 1
      else
        build_images --all

        # TODO: Add a function to lib.sh to check if the image already exist
        # and move the sync step to a function
        if [[ "${PROVIDER}" == "kind" ]]; then
          echo "Info: It appears you are deploying to a local Kind cluster. Let's ensure that the latest CCIP job deploy image is in the local registry."
          docker pull "804282218731.dkr.ecr.us-west-2.amazonaws.com/ccip-scripts:latest" --platform linux/amd64
          docker tag "804282218731.dkr.ecr.us-west-2.amazonaws.com/ccip-scripts:latest" "localhost:5001/ccip-scripts:latest"
          docker push "localhost:5001/ccip-scripts:latest"
        fi

        create_deployments app
      fi

      if [ "${CCIP_UI_ENABLED}" = "false" ]; then
        echo "Deployment of CCIP UI component is disabled. In order to enable it set the CCIP_UI_ENABLED ENV value to true"
      fi

      # Check if ATLAS_ENABLED is set and equals "true"
      if [ "${ATLAS_ENABLED}" = "true" ]; then
          # Execute the command
          run_pipelines atlas

          # Check if CCIP_UI_ENABLED is set and equals "true"
          if [ "${CCIP_UI_ENABLED}" = "true" ]; then
              # Execute the command
              run_pipelines ccip-ui
          fi
      else
          echo "Deployment of Atlas components is disabled. In order to enable it set the ATLAS_ENABLED ENV value to true"
          if [ "${CCIP_UI_ENABLED}" = "true" ]; then
              echo "Warning: Deployment of CCIP UI component requires ATLAS_ENABLED set to true. CCIP UI component won't be deployed."
          fi
      fi

      kubectl label namespace/${DEVSPACE_NAMESPACE} network=crib > /dev/null 2>&1 || true

commands:
  get_test_input:
    command: aws s3 cp s3://${DEVSPACE_CCIP_SCRIPTS_OUTPUT_BUCKET_NAME}/${DEVSPACE_NAMESPACE}-testInput.toml override.toml
    description: Download the testInput.toml file from the S3 bucket

images:
  app:
    image: ${DEVSPACE_IMAGE}
    tags:
      - ${devspace.namespace}-${devspace.timestamp}
    custom:
      skipImageArg: true
      command: |-
        GIT_ROOT=$CHAINLINK_CODE_DIR/ccip
        cd $GIT_ROOT

        image=${runtime.images.app}
        MACOS_SDK_DIR=$(pwd)/tools/bin/MacOSX12.3.sdk IMAGE=$image ./tools/bin/goreleaser_wrapper release --snapshot --clean --config .goreleaser.devspace.yaml
        docker push $image

hooks:
  - command: ${SCRIPTS_DIR}/check_env_vars.sh
    args: ["ccip"]
    events: ["before:deploy:app"]

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    updateImageTags: false
    namespace: ${DEVSPACE_NAMESPACE}
    helm:
      upgradeArgs: ["--timeout", "10m"]
      releaseName: "app"
      chart:
        name: ${CHAINLINK_HELM_REGISTRY_URI}/crib-ccip
        version: "1.x"
      # for simplicity, we define all the values here
      # they can be defined the same way in values.yml
      # devspace merges these "values" with the "values.yaml" before deploy
      values:
        podSecurityContext:
          fsGroup: 999

        crib-chainlink-cluster:
          chainlink:
            global:
              overridesToml: |-
                [Feature]
                LogPoller = true
                CCIP = true

                [Log]
                Level = 'debug'
                JSONConsole = true

                [Log.File]
                MaxSize = '0b'

                [WebServer]
                AllowOrigins = '*'
                HTTPPort = 6688
                SecureCookies = false
                HTTPWriteTimeout = '1m'

                [WebServer.RateLimit]
                Authenticated = 2000
                Unauthenticated = 1000

                [WebServer.TLS]
                HTTPSPort = 0

                [Database]
                MaxIdleConns = 50
                MaxOpenConns = 50
                MigrateOnStartup = true

                [OCR2]
                Enabled = true
                DefaultTransactionQueueDepth = 0

                [OCR]
                Enabled = false
                DefaultTransactionQueueDepth = 0

                [P2P]
                [P2P.V2]
                Enabled = true
                ListenAddresses = ['0.0.0.0:6690']
                AnnounceAddresses = ['0.0.0.0:6690']
                DeltaDial = '500ms'
                DeltaReconcile = '5s'
            securityContext:
              capabilities:
                drop:
                  - ALL
              readOnlyRootFilesystem: false
              runAsNonRoot: true
              runAsUser: 14933
              runAsGroup: 999
            web_port: 6688
            p2p_port: 6690
            # extraEnvVars:
            # "CL_MEDIAN_CMD": "chainlink-feeds"
            nodes:
              node1:
                image: ${runtime.images.app}
                # override default config per node
                # for example, use OCRv2 P2P setup, the whole config
                #      toml: |
                #        RootDir = './clroot'
                #        [Log]
                #        JSONConsole = true
                #        Level = 'debug'
                #        [WebServer]
                #        AllowOrigins = '*'
                #        SecureCookies = false
                #        SessionTimeout = '999h0m0s'
                #        [OCR2]
                #        Enabled = true
                #        [P2P]
                #        [P2P.V2]
                #        Enabled = false
                #        AnnounceAddresses = []
                #        DefaultBootstrappers = []
                #        DeltaDial = '15s'
                #        DeltaReconcile = '1m0s'
                #        ListenAddresses = []
                #        [[EVM]]
                #        ChainID = '1337'
                #        MinContractPayment = '0'
                #        [[EVM.Nodes]]
                #        Name = 'node-0'
                #        WSURL = 'ws://geth:8546'
                #        HTTPURL = 'http://geth:8544'
                #        [WebServer.TLS]
                #        HTTPSPort = 0
                # or use overridesToml to override some part of configuration
                # overridesToml: |
                # Enable Tracing
                #   [Tracing]
                #   Enabled = true
                #   SamplingRatio = 1.0
                #   CollectorTarget = 'app-opentelemetry-collector:4317'
                #   TLSCertPath = ''
                #   Mode = 'unencrypted'
              node2:
                image: ${runtime.images.app}
              node3:
                image: ${runtime.images.app}
              node4:
                image: ${runtime.images.app}
              node5:
                image: ${runtime.images.app}

          db:
            securityContext:
              capabilities:
                drop:
                  - ALL
              readOnlyRootFilesystem: false
              runAsNonRoot: true
              runAsUser: 999
              runAsGroup: 999
          # default cluster shipped with latest Geth ( dev mode by default )
          geth:
            statefulSet:
              # Set to true to use StatefulSet instead of Deployment.
              enabled: true
            networkPolicy:
              # Allow additional services to access geth
              extraIngressSelectors:
                - podSelector:
                    matchLabels:
                      app: atlas
                - podSelector:
                    matchLabels:
                      app: ccip-scripts-deployer
            securityContext:
              capabilities:
                drop:
                  - ALL
              readOnlyRootFilesystem: false
              runAsNonRoot: true
              runAsUser: 999
              runAsGroup: 999
            version: v1.12.0
            wsRpcPort: 8546
            httpRpcPort: 8544
            chains:
              - networkId: 1337
                customEVMConfigToml: |
                  [EVM.GasEstimator]
                  PriceMax = '200 gwei'
                  LimitDefault = 6000000
                  FeeCapDefault = '200 gwei'
              - networkId: 2337
                customEVMConfigToml: |
                  [EVM.GasEstimator]
                  PriceMax = '200 gwei'
                  LimitDefault = 6000000
                  FeeCapDefault = '200 gwei'
            blocktime: 1
          # mockserver is https://www.mock-server.com/where/kubernetes.html
          # used to stub External Adapters
          mockserver:
            #  image: "mockserver/mockserver"
            #  version: "mockserver-5.15.0"
            securityContext:
              capabilities:
                drop:
                  - ALL
              readOnlyRootFilesystem: false
              runAsNonRoot: true
              runAsUser: 999
              runAsGroup: 999
            enabled: true
            releasenameOverride: mockserver
            app:
              runAsUser: 999
              readOnlyRootFilesystem: false
            port: 1080
          # monitoring.coreos.com/v1 PodMonitor for each node
          prometheusMonitor: true

          # These ingresses create AWS ALB resources and Route 53 Records.
          ingress:
            enabled: true
            baseDomain: ${DEVSPACE_INGRESS_BASE_DOMAIN}
            annotation_certificate_arn: ${DEVSPACE_INGRESS_CERT_ARN}
            annotation_group_name: ${DEVSPACE_NAMESPACE}
            hosts:
              - host: ${DEVSPACE_NAMESPACE}-node1.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: app-node1
                          port:
                            number: 6688
              - host: ${DEVSPACE_NAMESPACE}-node2.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: app-node2
                          port:
                            number: 6688
              - host: ${DEVSPACE_NAMESPACE}-node3.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: app-node3
                          port:
                            number: 6688
              - host: ${DEVSPACE_NAMESPACE}-node4.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: app-node4
                          port:
                            number: 6688
              - host: ${DEVSPACE_NAMESPACE}-node5.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: app-node5
                          port:
                            number: 6688
              - host: ${DEVSPACE_NAMESPACE}-geth-1337-http.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: geth-1337
                          port:
                            number: 8544
              - host: ${DEVSPACE_NAMESPACE}-geth-1337-ws.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: geth-1337
                          port:
                            number: 8546
              - host: ${DEVSPACE_NAMESPACE}-geth-2337-http.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: geth-2337
                          port:
                            number: 8544
              - host: ${DEVSPACE_NAMESPACE}-geth-2337-ws.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: geth-2337
                          port:
                            number: 8546
              - host: ${DEVSPACE_NAMESPACE}-mockserver.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: mockserver
                          port:
                            number: 1080
              - host: ${DEVSPACE_NAMESPACE}-grafana.${DEVSPACE_INGRESS_BASE_DOMAIN}
                http:
                  paths:
                    - path: /
                      backend:
                        service:
                          name: app-grafana
                          port:
                            number: 80
          networkPolicyDefault:
            ingress:
              allowCustomCidrs: true
              # Should be a comma separated list of CIDR blocks. To include
              # AWS ALB private CIDRs and optionally other custom CIDRs.
              # Example format: 10.0.0.0/16,192.168.0.1/24
              customCidrs: ${DEVSPACE_INGRESS_CIDRS}
          # deployment placement, standard helm stuff
          podAnnotations:
          nodeSelector:
          tolerations:
          affinity:
        ccipScriptsDeployment:
          enabled: true
          image: ${DEVSPACE_CCIP_SCRIPTS_IMAGE}
          oidcRoleARN: ${DEVSPACE_CCIP_SCRIPTS_OIDC_ROLE_ARN}
          outputBucketName: ${DEVSPACE_CCIP_SCRIPTS_OUTPUT_BUCKET_NAME}

profiles:
  - name: kind
    description: The profile is supposed to be used with local deployment on a Kind cluster
    # This profile will be automatically activated
    activation:
      - env:
          PROVIDER: "kind"
    patches:
      - op: remove
        path: deployments.app.helm.values.crib-chainlink-cluster.geth.statefulSet
      - op: add
        path: deployments.app.helm.valuesFiles
        value: ["./values-profiles/values-dev-kind.yaml"]

  - name: local-dev
    patches:
      # Remove the global overridesToml field.
      # This will be configured via a values file.
      - op: remove
        path: deployments.app.helm.values.crib-chainlink-cluster.chainlink.global.overridesToml
      - op: add
        path: deployments.app.helm.valuesFiles
        value: ["./values-profiles/values-dev.yaml"]
      - op: replace
        path: deployments.app.helm.values.ccipScriptsDeployment.enabled
        value: false

  - name: eks-bix-ship
    patches:
      # Remove the global overridesToml field.
      # This will be configured via a values file.
      - op: remove
        path: deployments.app.helm.values.crib-chainlink-cluster.chainlink.global.overridesToml
      - op: add
        path: deployments.app.helm.valuesFiles
        value:
          [
            "./values-profiles/values-dev-eks-bix-ship.yaml",
            "./values-profiles/new-chain.yaml",
          ]
      - op: replace
        path: deployments.app.helm.values.ccipScriptsDeployment.enabled
        value: false
      - op: replace
        path: deployments.app.helm.values.crib-chainlink-cluster.geth.enabled
        value: false

  # Resolve local chart versions for development
  - name: local-charts
    merge:
      deployments:
        app:
          helm:
            chart:
              name: crib-ccip
              path: ${CHAINLINK_CODE_DIR}/infra-charts/crib-ccip
              version: null

  - name: kind-bix-ship
    description: The profile is supposed to be used with local deployment on a Kind cluster for bix-ship
    # This profile will be automatically activated
    activation:
      - env:
          PROVIDER: "kind"
    patches:
      - op: remove
        path: deployments.app.helm.values.crib-chainlink-cluster.chainlink.global.overridesToml
      - op: add
        path: deployments.app.helm.valuesFiles
        value:
          [
            "./values-profiles/values-dev-kind.yaml",
            "./values-profiles/values-dev-kind-bix-ship.yaml",
            "./values-profiles/new-chain.yaml",
          ]
      - op: remove
        path: deployments.app.helm.values.crib-chainlink-cluster.geth.statefulSet
      - op: replace
        path: deployments.app.helm.values.crib-chainlink-cluster.geth.enabled
        value: false
      - op: replace
        path: deployments.app.helm.values.ccipScriptsDeployment.enabled
        value: false
