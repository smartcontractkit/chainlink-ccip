version: v2beta1
name: chainlink

vars:
  CRIB_DIR: $(git rev-parse --show-toplevel 2>/dev/null)
  SCRIPTS_DIR:
    source: env
    default: "${CRIB_DIR}/scripts"
  DEVSPACE_ENV_FILE: .env
  DEPENDENCIES_DIR:
    source: env
    default: "${CRIB_DIR}/dependencies"
  IMPORTS_DIR:
    source: env
    default: "${CRIB_DIR}/imports"
  TMP_DIR:
    source: env
    default: "${CRIB_DIR}/deployments/ccip-v2/.tmp"
  # "The provider being used to deploy CRIB"
  PROVIDER:
    source: all
    default: "aws"
  CHAINLINK_CODE_DIR:
    source: env
    default: "../../.."
  CHAINLINK_HELM_REGISTRY_URI:
    source: env
    default: "oci://804282218731.dkr.ecr.us-west-2.amazonaws.com/infra-charts"
  DON_TYPE:
    source: env
    default: ccip
  DON_VERSION:
    source: env
    default: ccip-dev
  CCIP_TOOLING_VERSION:
    source: env
    default: v2
  DON_NODE_COUNT:
    source: env
    default: 4
  DON_BOOT_NODE_COUNT:
    source: env
    default: 1
  GETH_CHAINS_COUNT:
    source: env
    default: 2
  SOLANA_CHAINS_COUNT:
    source: env
    default: 0
  ENABLE_RMN:
    source: env
    default: "false"
  ENABLE_MONITORING:
    source: env
    default: false
  CHAINLINK_PRODUCT:
    source: env
    default: ccip
  K8S_TESTER_IMAGE_TAG:
    source: env
    default: develop

imports:
  - path: ${IMPORTS_DIR}/lib-common
  - path: ${IMPORTS_DIR}/lib-aws
  - path: ${IMPORTS_DIR}/lib-kind

pipelines:
  maybe-kind:
    run: |-
      if [ "$PROVIDER" == "kind" ]; then
        run_dependency_pipelines kind-core
        if [ "$ENABLE_MONITORING" == "true" ]; then
          run_dependency_pipelines kind-monitoring
        fi
      fi
  # rely on the DEVSPACE_TMPDIR to avoid addition ccip-v2-scripts builds
  maybe-build-ccip-v2-scripts:
    run: |-
      is_built_file=${DEVSPACE_TMPDIR}/ccip-v2-scripts-built
      # Check if the file exists
      if [ -f "$is_built_file" ]; then
        echo "ccip-v2-scripts already built in this devspace run $is_built_file"
      else
        task ccip-v2-scripts:build
        touch $is_built_file
      fi
  ccip-v2:
    run: |-
      run_pipelines maybe-kind
      run_pipelines maybe-build-ccip-v2-scripts

      run_dependency_pipelines geth-chains
      run_dependency_pipelines solana-chains
      crib devspace ingress-check --nsTimeout=2m --timeout=4m

      # Deploy CCIP enabled fully configured DON
      run_dependency_pipelines ccip-don
      crib devspace ingress-check --nsTimeout=2m --timeout=4m
  rmn:
    run: |-
      run_pipelines maybe-build-ccip-v2-scripts

      if [[ "$ENABLE_RMN" == "true" ]]; then
        echo "Deploying RMN"
        ccip-v2-scripts rmn setup-rmn-onchain
        run_dependency_pipelines rmn
      else
        echo "ENABLE_RMN is set to false, skipping RMN deployment"
      fi

  ccip-v2-redeploy-don:
    run: |-
      # Deploy CCIP enabled fully configured DON
      run_dependency_pipelines ccip-don --set-flag redeployDONOnly="true"
      crib devspace ingress-check --nsTimeout=2m --timeout=4m
  ccip-v2-pause-pods:
    run: |-
      if [ "$PROVIDER" == "kind" ]; then
        echo "ccip-v2-resume-pods is not supported in kind provider"
        exit 1
      fi
      # Stop geth pods without deleting PVCs

      kubectl delete sts -l app.kubernetes.io/name=geth --cascade=orphan
      kubectl delete pod -l app.kubernetes.io/name=geth

      # Uninstall chainlink-don app
      helm uninstall ccip

  # Resume pods stopped by ccip-v2-pause-pods pipeline
  # Make sure to run that pipeline with --force-deploy flag
  ccip-v2-resume-pods:
    run: |-
      if [ "$PROVIDER" == "kind" ]; then
        echo "ccip-v2-resume-pods is not supported in kind provider"
        exit 1
      fi

      run_dependency_pipelines geth-chains
      run_pipelines ccip-v2-redeploy-don

  ccip-v2-infra-only:
    run: |-
      run_pipelines maybe-kind
      run_pipelines maybe-build-ccip-v2-scripts
      ccip-v2-scripts generate-initial-don-overrides

      run_dependency_pipelines geth-chains
      run_dependency_pipelines solana-chains
      crib devspace ingress-check --nsTimeout=2m --timeout=4m

      # Deploy CCIP enabled fully configured DON
      run_dependency_pipelines ccip-don --set-flag infraOnly="true"
      crib devspace ingress-check --nsTimeout=2m --timeout=4m
  # Pipeline without any steps that would break --render flag
  ccip-v2-infra-only-render:
    run: |-
      # run_pipelines maybe-kind
      # run_dependency_pipelines geth-chains
      # run_dependency_pipelines solana-chains

      run_pipelines maybe-build-ccip-v2-scripts
      ccip-v2-scripts generate-initial-don-overrides
      run_dependency_pipelines ccip-don --set-flag infraOnly="true"
  k8s-remote-tester:
    run: |-
      run_dependency_pipelines k8s-remote-tester
  geth:
    run: |-
      if [ "$PROVIDER" == "kind" ]; then
        run_dependency_pipelines kind-core
      fi

      run_dependency_pipelines geth-chains
      run_dependency_pipelines solana-chains
  debug-gap:
    run: |-
      run_dependency_pipelines geth-chains
      run_dependency_pipelines solana-chains
      run_pipelines maybe-build-ccip-v2-scripts
      run_dependency_pipelines ccip-v2-scripts --pipeline deploy-home-chain-contracts
  job-distributor:
    run: |-
      run_dependency_pipelines job-distributor
profiles:
  - name: base
    patches:
      - op: add
        path: dependencies
        value:
          geth-chains:
            path: ${DEPENDENCIES_DIR}/geth-v2
            overwriteVars: true
            namespace: ${DEVSPACE_NAMESPACE}
            vars:
              CHAINS_COUNT: ${GETH_CHAINS_COUNT}
          solana-chains:
            path: ${DEPENDENCIES_DIR}/solana-validator
            overwriteVars: true
            namespace: ${DEVSPACE_NAMESPACE}
            vars:
              CHAINS_COUNT: ${SOLANA_CHAINS_COUNT}
          ccip-don:
            path: ${DEPENDENCIES_DIR}/donut/chainlink-don.yaml
            overwriteVars: true
            vars:
              ENABLE_JOB_DISTRIBUTOR: "true"
              CONFIG_OVERRIDES_DIR: "${TMP_DIR}"
              ENABLE_DON_TYPE_OVERRIDES: "true"
            namespace: ${DEVSPACE_NAMESPACE}
            pipeline: deploy-ccip-v2
            profiles:
              - version-from-env
              - network-generated
              # Uncomment this to enable overrides from overrides.ccip-v2.yaml file
              # - overrides-ccip-v2
  - name: kind
    parents:
      - profile: base
    patches:
      - op: add
        path: dependencies
        value:
          kind-core:
            path: ${DEPENDENCIES_DIR}/kind-core
            overwriteVars: true
            namespace: ${DEVSPACE_NAMESPACE}
          kind-monitoring:
            path: ${DEPENDENCIES_DIR}/kind-monitoring
            overwriteVars: true
            namespace: ${DEVSPACE_NAMESPACE}
  - name: aws
    parents:
      - profile: base
    patches:
      - op: add
        path: dependencies.ccip-don.profiles
        value: monitoring-service-monitor

  - name: load-tests-aws
    parents:
      - profile: aws
    patches:
      - op: add
        path: dependencies.ccip-don.profiles
        value: ccip-load-testing-aws-staging

  # RMN dependency requires static configuration like shared toml config to be available
  # before it can be activated
  - name: rmn
    merge:
      dependencies:
        rmn:
          path: ${DEPENDENCIES_DIR}/rmn-v2
          overwriteVars: true
          namespace: ${DEVSPACE_NAMESPACE}
          vars:
            CCIP_ENV_STATE_DIR: "${TMP_DIR}"

  ### Misc profiles for testing individual dependencies in isolation
  - name: k8s-remote-tester
    patches:
      - op: add
        path: dependencies
        value:
          k8s-remote-tester:
            path: ${DEPENDENCIES_DIR}/k8s-remote-tester
            namespace: ${DEVSPACE_NAMESPACE}
            vars:
              ENV_STATE_DIR: "${TMP_DIR}"
              IMAGE_TAG: "${K8S_TESTER_IMAGE_TAG}"
  - name: ccip-v2-scripts
    patches:
      - op: add
        path: dependencies
        value:
          ccip-v2-scripts:
            path: ${DEPENDENCIES_DIR}/ccip-v2-scripts
            overwriteVars: true
            namespace: ${DEVSPACE_NAMESPACE}
  - name: debug-gap
    patches:
      - op: add
        path: dependencies
        value:
          ccip-v2-scripts:
            path: ${DEPENDENCIES_DIR}/ccip-v2-scripts
            overwriteVars: true
            namespace: ${DEVSPACE_NAMESPACE}
          geth:
            path: ${DEPENDENCIES_DIR}/geth
            overwriteVars: true
            namespace: ${DEVSPACE_NAMESPACE}
            profiles:
              - ccip
  - name: job-distributor
    patches:
      - op: add
        path: dependencies
        value:
          job-distributor:
            path: ${DEPENDENCIES_DIR}/job-distributor
            overwriteVars: true
            namespace: ${DEVSPACE_NAMESPACE}

commands:
  ccip-v2:
    command: |
      devspace run ccip-v2-scripts generate-initial-don-overrides
      devspace run-pipeline ccip-v2 -p ${PROVIDER}
    description: Deploy full ccip-v2 setup
    appendArgs: true
  purge:
    command: |
      rm -rf ${TMP_DIR}/*
      devspace purge
    description: Cleanup temp files and purge devspace env
  rmn:
    command: |
      ccip-v2-scripts rmn generate-infra-config
      devspace run-pipeline rmn -p ${PROVIDER} -p rmn
    description: Generate config and Deploy RMN on top fully deployed CCIP DON
    appendArgs: true
  ccip-v2-redeploy-don:
    command: |
      devspace run-pipeline ccip-v2-redeploy-don -p ${PROVIDER}
    description: Redeploy DON without updating contracts
    appendArgs: true
  ccip-v2-pause-pods:
    command: devspace run-pipeline ccip-v2-pause-pods -p ${PROVIDER}
    description: Pause all pods, but keep PVCs with persistence
    appendArgs: true
  ccip-v2-resume-pods:
    command: devspace run-pipeline ccip-v2-resume-pods -p ${PROVIDER} --force-deploy
    description: Un-Pause paused pods and reuse existing PVCs
    appendArgs: true
  ccip-v2-load-tests:
    command: |
      devspace run ccip-v2-scripts generate-initial-don-overrides
      devspace run-pipeline ccip-v2 -p load-tests-aws
    description: Deploy full ccip-v2 setup to AWS with heavy load test profile. (aws only)
    appendArgs: true
  ccip-v2-infra:
    command: |
      devspace run ccip-v2-scripts generate-initial-don-overrides
      devspace run-pipeline ccip-v2-infra-only -p ${PROVIDER}
    description: Run the ccip v2 pipeline without onchain deployment, just infra.
    appendArgs: true
  ccip-v2-infra-render:
    command: |
      devspace run ccip-v2-scripts generate-initial-don-overrides
      devspace run-pipeline ccip-v2-infra-only-render --render
    description: Render infra components, pass desired profile via -p flag
    appendArgs: true
  start-remote-tests:
    command: devspace -p k8s-remote-tester run-pipeline k8s-remote-tester
    description: Run CCIP tests in k8s cluster
  stop-remote-tests:
    command: kubectl delete job k8s-tester && kubectl delete NetworkChaos --all && kubectl delete PodChaos --all
    description: stop remote tester job including chaos
  remote-tester-logs:
    command: kubectl logs -f -l app.kubernetes.io/name=k8s-remote-tester
    description: tail remote-tester logs
  deploy-dashboard:
    command: crib dashboard deploy --product=ccip
    description: Deploy Grafana Dashboards (outdated)
    appendArgs: true
  geth:
    command: devspace run-pipeline geth -p ${PROVIDER}
    description: Deploy geth chains only
    appendArgs: true
  debug-gap:
    command: devspace run-pipeline debug-gap -p debug-gap
    description: Debugging command for gap
    appendArgs: true
  job-distributor:
    command: devspace run-pipeline job-distributor -p job-distributor
    description: Deploy job-distributor
    appendArgs: true
  ccip-v2-scripts:
    command: |
      # ensure that ccip-v2-scripts binary is always up to date with local changes
      task ccip-v2-scripts:build && ccip-v2-scripts
    description: |
      run ccip-v2-scripts cli command within devspace context, you can use it to deploy home chain
      or any other command available within ccip-v2-scripts binary.
    appendArgs: true
