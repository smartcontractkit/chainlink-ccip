// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	logger "github.com/smartcontractkit/chainlink-common/pkg/logger"
	mock "github.com/stretchr/testify/mock"

	ocr3types "github.com/smartcontractkit/libocr/offchainreporting2plus/ocr3types"

	offchainreporting2plustypes "github.com/smartcontractkit/libocr/offchainreporting2plus/types"

	types "github.com/smartcontractkit/chainlink-common/pkg/types"
)

// ContractTransmitterFactory is an autogenerated mock type for the ContractTransmitterFactory type
type ContractTransmitterFactory struct {
	mock.Mock
}

type ContractTransmitterFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *ContractTransmitterFactory) EXPECT() *ContractTransmitterFactory_Expecter {
	return &ContractTransmitterFactory_Expecter{mock: &_m.Mock}
}

// NewCommitTransmitter provides a mock function with given fields: lggr, cw, fromAccount, offrampAddress, defaultMethod, priceOnlyMethod
func (_m *ContractTransmitterFactory) NewCommitTransmitter(lggr logger.Logger, cw types.ContractWriter, fromAccount offchainreporting2plustypes.Account, offrampAddress string, defaultMethod string, priceOnlyMethod string) ocr3types.ContractTransmitter[[]byte] {
	ret := _m.Called(lggr, cw, fromAccount, offrampAddress, defaultMethod, priceOnlyMethod)

	if len(ret) == 0 {
		panic("no return value specified for NewCommitTransmitter")
	}

	var r0 ocr3types.ContractTransmitter[[]byte]
	if rf, ok := ret.Get(0).(func(logger.Logger, types.ContractWriter, offchainreporting2plustypes.Account, string, string, string) ocr3types.ContractTransmitter[[]byte]); ok {
		r0 = rf(lggr, cw, fromAccount, offrampAddress, defaultMethod, priceOnlyMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ocr3types.ContractTransmitter[[]byte])
		}
	}

	return r0
}

// ContractTransmitterFactory_NewCommitTransmitter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCommitTransmitter'
type ContractTransmitterFactory_NewCommitTransmitter_Call struct {
	*mock.Call
}

// NewCommitTransmitter is a helper method to define mock.On call
//   - lggr logger.Logger
//   - cw types.ContractWriter
//   - fromAccount offchainreporting2plustypes.Account
//   - offrampAddress string
//   - defaultMethod string
//   - priceOnlyMethod string
func (_e *ContractTransmitterFactory_Expecter) NewCommitTransmitter(lggr interface{}, cw interface{}, fromAccount interface{}, offrampAddress interface{}, defaultMethod interface{}, priceOnlyMethod interface{}) *ContractTransmitterFactory_NewCommitTransmitter_Call {
	return &ContractTransmitterFactory_NewCommitTransmitter_Call{Call: _e.mock.On("NewCommitTransmitter", lggr, cw, fromAccount, offrampAddress, defaultMethod, priceOnlyMethod)}
}

func (_c *ContractTransmitterFactory_NewCommitTransmitter_Call) Run(run func(lggr logger.Logger, cw types.ContractWriter, fromAccount offchainreporting2plustypes.Account, offrampAddress string, defaultMethod string, priceOnlyMethod string)) *ContractTransmitterFactory_NewCommitTransmitter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.Logger), args[1].(types.ContractWriter), args[2].(offchainreporting2plustypes.Account), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *ContractTransmitterFactory_NewCommitTransmitter_Call) Return(_a0 ocr3types.ContractTransmitter[[]byte]) *ContractTransmitterFactory_NewCommitTransmitter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContractTransmitterFactory_NewCommitTransmitter_Call) RunAndReturn(run func(logger.Logger, types.ContractWriter, offchainreporting2plustypes.Account, string, string, string) ocr3types.ContractTransmitter[[]byte]) *ContractTransmitterFactory_NewCommitTransmitter_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecTransmitter provides a mock function with given fields: lggr, cw, fromAccount, offrampAddress
func (_m *ContractTransmitterFactory) NewExecTransmitter(lggr logger.Logger, cw types.ContractWriter, fromAccount offchainreporting2plustypes.Account, offrampAddress string) ocr3types.ContractTransmitter[[]byte] {
	ret := _m.Called(lggr, cw, fromAccount, offrampAddress)

	if len(ret) == 0 {
		panic("no return value specified for NewExecTransmitter")
	}

	var r0 ocr3types.ContractTransmitter[[]byte]
	if rf, ok := ret.Get(0).(func(logger.Logger, types.ContractWriter, offchainreporting2plustypes.Account, string) ocr3types.ContractTransmitter[[]byte]); ok {
		r0 = rf(lggr, cw, fromAccount, offrampAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ocr3types.ContractTransmitter[[]byte])
		}
	}

	return r0
}

// ContractTransmitterFactory_NewExecTransmitter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewExecTransmitter'
type ContractTransmitterFactory_NewExecTransmitter_Call struct {
	*mock.Call
}

// NewExecTransmitter is a helper method to define mock.On call
//   - lggr logger.Logger
//   - cw types.ContractWriter
//   - fromAccount offchainreporting2plustypes.Account
//   - offrampAddress string
func (_e *ContractTransmitterFactory_Expecter) NewExecTransmitter(lggr interface{}, cw interface{}, fromAccount interface{}, offrampAddress interface{}) *ContractTransmitterFactory_NewExecTransmitter_Call {
	return &ContractTransmitterFactory_NewExecTransmitter_Call{Call: _e.mock.On("NewExecTransmitter", lggr, cw, fromAccount, offrampAddress)}
}

func (_c *ContractTransmitterFactory_NewExecTransmitter_Call) Run(run func(lggr logger.Logger, cw types.ContractWriter, fromAccount offchainreporting2plustypes.Account, offrampAddress string)) *ContractTransmitterFactory_NewExecTransmitter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.Logger), args[1].(types.ContractWriter), args[2].(offchainreporting2plustypes.Account), args[3].(string))
	})
	return _c
}

func (_c *ContractTransmitterFactory_NewExecTransmitter_Call) Return(_a0 ocr3types.ContractTransmitter[[]byte]) *ContractTransmitterFactory_NewExecTransmitter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContractTransmitterFactory_NewExecTransmitter_Call) RunAndReturn(run func(logger.Logger, types.ContractWriter, offchainreporting2plustypes.Account, string) ocr3types.ContractTransmitter[[]byte]) *ContractTransmitterFactory_NewExecTransmitter_Call {
	_c.Call.Return(run)
	return _c
}

// NewContractTransmitterFactory creates a new instance of ContractTransmitterFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContractTransmitterFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContractTransmitterFactory {
	mock := &ContractTransmitterFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
