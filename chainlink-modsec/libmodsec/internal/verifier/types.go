package verifier

import (
	"github.com/smartcontractkit/chainlink-modsec/libmodsec/pkg/modsectypes"
)

// BlockInfo contains basic block metadata.
type BlockInfo struct {
	SourceChain uint64
	BlockNum    uint64 // why do they use big int... at 100k  bps it would take 500k years to overflow uint64.
	BlockHash   []byte
	Finalized   bool // if the chain supports a finalized tag.
}

// Work is generated from the blockchain reader. It contains all raw data
// required to verify a message. Work for one verification may be split
// across multiple work items. For example, a finalized message verifier
// would receive the initial work item containing message data but wait
// to emit an attestation until the block is finalized before emitting an
// attestation.
type Work struct {
	Data []byte // maybe nil if there were no messages for a particular block num
	BlockInfo
}

// HandlerPayload is generated by the Transformer. It contains the Work data
// in a processed format. Processing includes:
// * Decoding the data into an AnyToAny object.
// * Encoding the data into a destination byte format (for verifier signing).
type HandlerPayload struct {
	ID        string
	Message   modsectypes.Message
	DestData  []byte
	BlockInfo BlockInfo
}

// VerifierInfo metadata needed by the writer.
type VerifierInfo struct {
	ID string
}

// Attestation for a message.
type Attestation struct {
	VerifierInfo VerifierInfo
	Message      modsectypes.Message
	Sig          []byte
}
